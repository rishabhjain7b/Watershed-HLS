// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_segmentation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_image_r_address0,
        input_image_r_ce0,
        input_image_r_q0,
        input_image_g_address0,
        input_image_g_ce0,
        input_image_g_q0,
        input_image_b_address0,
        input_image_b_ce0,
        input_image_b_q0,
        output_image_r_address0,
        output_image_r_ce0,
        output_image_r_we0,
        output_image_r_d0,
        output_image_g_address0,
        output_image_g_ce0,
        output_image_g_we0,
        output_image_g_d0,
        output_image_b_address0,
        output_image_b_ce0,
        output_image_b_we0,
        output_image_b_d0
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] input_image_r_address0;
output   input_image_r_ce0;
input  [0:0] input_image_r_q0;
output  [17:0] input_image_g_address0;
output   input_image_g_ce0;
input  [0:0] input_image_g_q0;
output  [17:0] input_image_b_address0;
output   input_image_b_ce0;
input  [0:0] input_image_b_q0;
output  [17:0] output_image_r_address0;
output   output_image_r_ce0;
output   output_image_r_we0;
output  [0:0] output_image_r_d0;
output  [17:0] output_image_g_address0;
output   output_image_g_ce0;
output   output_image_g_we0;
output  [0:0] output_image_g_d0;
output  [17:0] output_image_b_address0;
output   output_image_b_ce0;
output   output_image_b_we0;
output  [0:0] output_image_b_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[17:0] input_image_r_address0;
reg input_image_r_ce0;
reg[17:0] input_image_g_address0;
reg input_image_g_ce0;
reg[17:0] input_image_b_address0;
reg input_image_b_ce0;
reg output_image_r_ce0;
reg output_image_r_we0;
reg output_image_g_ce0;
reg output_image_g_we0;
reg output_image_b_ce0;
reg output_image_b_we0;

(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [17:0] grayOutput_address0;
reg    grayOutput_ce0;
reg    grayOutput_we0;
wire   [7:0] grayOutput_q0;
reg   [17:0] binaryThreshold_address0;
reg    binaryThreshold_ce0;
reg    binaryThreshold_we0;
wire   [0:0] binaryThreshold_q0;
reg   [17:0] morphOpening_address0;
reg    morphOpening_ce0;
reg    morphOpening_we0;
wire   [7:0] morphOpening_q0;
reg   [17:0] distanceTransformOut_address0;
reg    distanceTransformOut_ce0;
reg    distanceTransformOut_we0;
wire   [31:0] distanceTransformOut_q0;
reg    distanceTransformOut_ce1;
reg    distanceTransformOut_we1;
wire   [31:0] distanceTransformOut_q1;
reg   [17:0] sureForeground_address0;
reg    sureForeground_ce0;
reg    sureForeground_we0;
wire   [0:0] sureForeground_q0;
reg   [31:0] reg_383;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond1_i_fu_393_p2;
wire    ap_CS_fsm_state16;
wire   [9:0] i_fu_399_p2;
reg   [9:0] i_reg_852;
wire   [19:0] tmp_79_cast_fu_413_p1;
reg   [19:0] tmp_79_cast_reg_857;
wire   [9:0] j_fu_423_p2;
reg   [9:0] j_reg_865;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond_i_fu_417_p2;
reg   [31:0] val_reg_875;
wire    ap_CS_fsm_state15;
wire   [0:0] grp_fu_374_p2;
reg   [0:0] tmp_34_reg_882;
wire   [31:0] grp_fu_366_p2;
reg   [31:0] thresholdValue_assig_reg_887;
wire    ap_CS_fsm_state20;
wire   [31:0] thresholdValue_assig_1_fu_537_p1;
reg   [31:0] thresholdValue_assig_1_reg_892;
wire   [0:0] notrhs4_fu_545_p2;
reg   [0:0] notrhs4_reg_897;
wire   [9:0] i_10_fu_557_p2;
reg   [9:0] i_10_reg_905;
wire    ap_CS_fsm_state21;
wire   [19:0] tmp_81_cast_fu_571_p1;
reg   [19:0] tmp_81_cast_reg_910;
wire   [0:0] exitcond1_i7_fu_551_p2;
wire   [9:0] j_9_fu_581_p2;
reg   [9:0] j_9_reg_918;
wire    ap_CS_fsm_state22;
wire   [63:0] tmp_85_cast_fu_596_p1;
reg   [63:0] tmp_85_cast_reg_923;
wire   [0:0] exitcond_i1_fu_575_p2;
wire   [0:0] notlhs4_fu_610_p2;
reg   [0:0] notlhs4_reg_933;
reg   [7:0] tmp_V_reg_938;
wire    ap_CS_fsm_state23;
wire   [22:0] tmp_V_1_fu_630_p1;
reg   [22:0] tmp_V_1_reg_944;
wire   [7:0] val_V_fu_727_p3;
reg   [7:0] val_V_reg_949;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_371_p1;
reg   [31:0] tmp_54_i_reg_959;
wire    ap_CS_fsm_state29;
wire   [0:0] tmp_46_fu_784_p2;
reg   [0:0] tmp_46_reg_965;
wire    ap_CS_fsm_state30;
wire   [9:0] i_11_fu_796_p2;
reg   [9:0] i_11_reg_973;
wire    ap_CS_fsm_state33;
wire   [19:0] tmp_84_cast_fu_810_p1;
reg   [19:0] tmp_84_cast_reg_978;
wire   [0:0] exitcond3_i_fu_790_p2;
wire   [9:0] j_10_fu_820_p2;
reg   [9:0] j_10_reg_986;
wire    ap_CS_fsm_state34;
wire   [63:0] tmp_89_cast_fu_835_p1;
reg   [63:0] tmp_89_cast_reg_991;
wire   [0:0] exitcond2_i_fu_814_p2;
wire    grp_distanceTransform_fu_294_ap_start;
wire    grp_distanceTransform_fu_294_ap_done;
wire    grp_distanceTransform_fu_294_ap_idle;
wire    grp_distanceTransform_fu_294_ap_ready;
wire   [17:0] grp_distanceTransform_fu_294_outputImage_address0;
wire    grp_distanceTransform_fu_294_outputImage_ce0;
wire    grp_distanceTransform_fu_294_outputImage_we0;
wire   [31:0] grp_distanceTransform_fu_294_outputImage_d0;
wire   [17:0] grp_distanceTransform_fu_294_outputImage_address1;
wire    grp_distanceTransform_fu_294_outputImage_ce1;
wire    grp_distanceTransform_fu_294_outputImage_we1;
wire   [31:0] grp_distanceTransform_fu_294_outputImage_d1;
wire   [17:0] grp_distanceTransform_fu_294_morphOpening_address0;
wire    grp_distanceTransform_fu_294_morphOpening_ce0;
wire    grp_RGBtoGray_512_512_2_fu_302_ap_start;
wire    grp_RGBtoGray_512_512_2_fu_302_ap_done;
wire    grp_RGBtoGray_512_512_2_fu_302_ap_idle;
wire    grp_RGBtoGray_512_512_2_fu_302_ap_ready;
wire   [17:0] grp_RGBtoGray_512_512_2_fu_302_input_r_address0;
wire    grp_RGBtoGray_512_512_2_fu_302_input_r_ce0;
wire   [17:0] grp_RGBtoGray_512_512_2_fu_302_input_g_address0;
wire    grp_RGBtoGray_512_512_2_fu_302_input_g_ce0;
wire   [17:0] grp_RGBtoGray_512_512_2_fu_302_input_b_address0;
wire    grp_RGBtoGray_512_512_2_fu_302_input_b_ce0;
wire   [17:0] grp_RGBtoGray_512_512_2_fu_302_output_r_address0;
wire    grp_RGBtoGray_512_512_2_fu_302_output_r_ce0;
wire    grp_RGBtoGray_512_512_2_fu_302_output_r_we0;
wire   [7:0] grp_RGBtoGray_512_512_2_fu_302_output_r_d0;
wire    grp_thresholdOtsu_fu_318_ap_start;
wire    grp_thresholdOtsu_fu_318_ap_done;
wire    grp_thresholdOtsu_fu_318_ap_idle;
wire    grp_thresholdOtsu_fu_318_ap_ready;
wire   [17:0] grp_thresholdOtsu_fu_318_src_address0;
wire    grp_thresholdOtsu_fu_318_src_ce0;
wire   [17:0] grp_thresholdOtsu_fu_318_dst_address0;
wire    grp_thresholdOtsu_fu_318_dst_ce0;
wire    grp_thresholdOtsu_fu_318_dst_we0;
wire   [0:0] grp_thresholdOtsu_fu_318_dst_d0;
wire    grp_watershed_algorithm_fu_328_ap_start;
wire    grp_watershed_algorithm_fu_328_ap_done;
wire    grp_watershed_algorithm_fu_328_ap_idle;
wire    grp_watershed_algorithm_fu_328_ap_ready;
wire   [17:0] grp_watershed_algorithm_fu_328_grayOutput_address0;
wire    grp_watershed_algorithm_fu_328_grayOutput_ce0;
wire    grp_connectedComponents_fu_340_ap_start;
wire    grp_connectedComponents_fu_340_ap_done;
wire    grp_connectedComponents_fu_340_ap_idle;
wire    grp_connectedComponents_fu_340_ap_ready;
wire   [17:0] grp_connectedComponents_fu_340_sureForeground_address0;
wire    grp_connectedComponents_fu_340_sureForeground_ce0;
wire    grp_morphologyEx_fu_348_ap_start;
wire    grp_morphologyEx_fu_348_ap_done;
wire    grp_morphologyEx_fu_348_ap_idle;
wire    grp_morphologyEx_fu_348_ap_ready;
wire   [17:0] grp_morphologyEx_fu_348_dst_address0;
wire    grp_morphologyEx_fu_348_dst_ce0;
wire    grp_morphologyEx_fu_348_dst_we0;
wire   [7:0] grp_morphologyEx_fu_348_dst_d0;
wire   [17:0] grp_morphologyEx_fu_348_binaryThreshold_address0;
wire    grp_morphologyEx_fu_348_binaryThreshold_ce0;
wire    grp_dilate_fu_356_ap_start;
wire    grp_dilate_fu_356_ap_done;
wire    grp_dilate_fu_356_ap_idle;
wire    grp_dilate_fu_356_ap_ready;
wire   [17:0] grp_dilate_fu_356_src_address0;
wire    grp_dilate_fu_356_src_ce0;
reg   [9:0] i_i_reg_228;
wire    ap_CS_fsm_state12;
reg   [9:0] j_i_reg_239;
wire    ap_CS_fsm_state17;
reg   [9:0] i_i6_reg_250;
reg   [9:0] j_i1_reg_261;
wire    ap_CS_fsm_state31;
reg   [9:0] i_i2_reg_272;
wire    ap_CS_fsm_state32;
reg    ap_block_state32_on_subcall_done;
reg   [9:0] j_i4_reg_283;
wire    ap_CS_fsm_state35;
reg    grp_distanceTransform_fu_294_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_RGBtoGray_512_512_2_fu_302_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_thresholdOtsu_fu_318_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_watershed_algorithm_fu_328_ap_start_reg;
reg    grp_connectedComponents_fu_340_ap_start_reg;
reg    grp_morphologyEx_fu_348_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_dilate_fu_356_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_82_cast_fu_438_p1;
reg   [31:0] max_fu_108;
wire   [31:0] max_2_fu_525_p3;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_371_p0;
reg   [31:0] grp_fu_374_p0;
reg   [31:0] grp_fu_374_p1;
wire   [18:0] tmp_s_fu_405_p3;
wire   [19:0] tmp_i_cast_fu_429_p1;
wire   [19:0] tmp_62_fu_433_p2;
wire   [31:0] val_to_int_fu_443_p1;
wire   [31:0] max_1_i_to_int_fu_460_p1;
wire   [7:0] tmp_fu_446_p4;
wire   [22:0] tmp_63_fu_456_p1;
wire   [0:0] notrhs_fu_484_p2;
wire   [0:0] notlhs_fu_478_p2;
wire   [7:0] tmp_29_fu_464_p4;
wire   [22:0] tmp_64_fu_474_p1;
wire   [0:0] notrhs2_fu_502_p2;
wire   [0:0] notlhs2_fu_496_p2;
wire   [0:0] tmp_31_fu_490_p2;
wire   [0:0] tmp_32_fu_508_p2;
wire   [0:0] tmp_33_fu_514_p2;
wire   [0:0] tmp_35_fu_520_p2;
wire   [22:0] tmp_61_fu_541_p1;
wire   [18:0] tmp_60_fu_563_p3;
wire   [19:0] tmp_i9_cast_fu_587_p1;
wire   [19:0] tmp_66_fu_591_p2;
wire   [7:0] tmp_40_fu_601_p4;
wire   [31:0] p_Val2_s_fu_616_p1;
wire   [24:0] mantissa_V_fu_634_p4;
wire   [8:0] tmp_i_i_i_i_i_cast_fu_647_p1;
wire   [8:0] sh_assign_fu_650_p2;
wire   [7:0] tmp_i_i_i_i_fu_664_p2;
wire   [0:0] isNeg_fu_656_p3;
wire  signed [8:0] tmp_i_i_i_i_cast_fu_669_p1;
wire  signed [8:0] ush_fu_673_p3;
wire  signed [31:0] sh_assign_6_cast_fu_681_p1;
wire  signed [24:0] sh_assign_6_cast_cas_fu_685_p1;
wire   [54:0] mantissa_V_1_cast1_fu_643_p1;
wire   [54:0] tmp_i_i_i_i_44_fu_689_p1;
wire   [24:0] r_V_fu_693_p2;
wire   [0:0] tmp_69_fu_705_p3;
wire   [54:0] r_V_1_fu_699_p2;
wire   [7:0] tmp_67_fu_713_p1;
wire   [7:0] tmp_68_fu_717_p4;
wire   [31:0] tmp_54_i_to_int_fu_739_p1;
wire   [7:0] tmp_38_fu_742_p4;
wire   [22:0] tmp_70_fu_752_p1;
wire   [0:0] notrhs3_fu_762_p2;
wire   [0:0] notlhs3_fu_756_p2;
wire   [0:0] tmp_42_fu_768_p2;
wire   [0:0] tmp_43_fu_774_p2;
wire   [0:0] tmp_44_fu_778_p2;
wire   [18:0] tmp_65_fu_802_p3;
wire   [19:0] tmp_i5_cast_fu_826_p1;
wire   [19:0] tmp_71_fu_830_p2;
reg   [34:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 grp_distanceTransform_fu_294_ap_start_reg = 1'b0;
#0 grp_RGBtoGray_512_512_2_fu_302_ap_start_reg = 1'b0;
#0 grp_thresholdOtsu_fu_318_ap_start_reg = 1'b0;
#0 grp_watershed_algorithm_fu_328_ap_start_reg = 1'b0;
#0 grp_connectedComponents_fu_340_ap_start_reg = 1'b0;
#0 grp_morphologyEx_fu_348_ap_start_reg = 1'b0;
#0 grp_dilate_fu_356_ap_start_reg = 1'b0;
end

watershed_algorithm_watershedOutput #(
    .DataWidth( 8 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
grayOutput_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grayOutput_address0),
    .ce0(grayOutput_ce0),
    .we0(grayOutput_we0),
    .d0(grp_RGBtoGray_512_512_2_fu_302_output_r_d0),
    .q0(grayOutput_q0)
);

image_segmentation_binaryThreshold #(
    .DataWidth( 1 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
binaryThreshold_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(binaryThreshold_address0),
    .ce0(binaryThreshold_ce0),
    .we0(binaryThreshold_we0),
    .d0(grp_thresholdOtsu_fu_318_dst_d0),
    .q0(binaryThreshold_q0)
);

watershed_algorithm_watershedOutput #(
    .DataWidth( 8 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
morphOpening_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(morphOpening_address0),
    .ce0(morphOpening_ce0),
    .we0(morphOpening_we0),
    .d0(grp_morphologyEx_fu_348_dst_d0),
    .q0(morphOpening_q0)
);

image_segmentation_distanceTransformOut #(
    .DataWidth( 32 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
distanceTransformOut_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(distanceTransformOut_address0),
    .ce0(distanceTransformOut_ce0),
    .we0(distanceTransformOut_we0),
    .d0(grp_distanceTransform_fu_294_outputImage_d0),
    .q0(distanceTransformOut_q0),
    .address1(grp_distanceTransform_fu_294_outputImage_address1),
    .ce1(distanceTransformOut_ce1),
    .we1(distanceTransformOut_we1),
    .d1(grp_distanceTransform_fu_294_outputImage_d1),
    .q1(distanceTransformOut_q1)
);

image_segmentation_binaryThreshold #(
    .DataWidth( 1 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
sureForeground_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sureForeground_address0),
    .ce0(sureForeground_ce0),
    .we0(sureForeground_we0),
    .d0(tmp_46_reg_965),
    .q0(sureForeground_q0)
);

distanceTransform grp_distanceTransform_fu_294(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_distanceTransform_fu_294_ap_start),
    .ap_done(grp_distanceTransform_fu_294_ap_done),
    .ap_idle(grp_distanceTransform_fu_294_ap_idle),
    .ap_ready(grp_distanceTransform_fu_294_ap_ready),
    .outputImage_address0(grp_distanceTransform_fu_294_outputImage_address0),
    .outputImage_ce0(grp_distanceTransform_fu_294_outputImage_ce0),
    .outputImage_we0(grp_distanceTransform_fu_294_outputImage_we0),
    .outputImage_d0(grp_distanceTransform_fu_294_outputImage_d0),
    .outputImage_q0(distanceTransformOut_q0),
    .outputImage_address1(grp_distanceTransform_fu_294_outputImage_address1),
    .outputImage_ce1(grp_distanceTransform_fu_294_outputImage_ce1),
    .outputImage_we1(grp_distanceTransform_fu_294_outputImage_we1),
    .outputImage_d1(grp_distanceTransform_fu_294_outputImage_d1),
    .outputImage_q1(distanceTransformOut_q1),
    .morphOpening_address0(grp_distanceTransform_fu_294_morphOpening_address0),
    .morphOpening_ce0(grp_distanceTransform_fu_294_morphOpening_ce0),
    .morphOpening_q0(morphOpening_q0)
);

RGBtoGray_512_512_2 grp_RGBtoGray_512_512_2_fu_302(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_RGBtoGray_512_512_2_fu_302_ap_start),
    .ap_done(grp_RGBtoGray_512_512_2_fu_302_ap_done),
    .ap_idle(grp_RGBtoGray_512_512_2_fu_302_ap_idle),
    .ap_ready(grp_RGBtoGray_512_512_2_fu_302_ap_ready),
    .input_r_address0(grp_RGBtoGray_512_512_2_fu_302_input_r_address0),
    .input_r_ce0(grp_RGBtoGray_512_512_2_fu_302_input_r_ce0),
    .input_r_q0(input_image_r_q0),
    .input_g_address0(grp_RGBtoGray_512_512_2_fu_302_input_g_address0),
    .input_g_ce0(grp_RGBtoGray_512_512_2_fu_302_input_g_ce0),
    .input_g_q0(input_image_g_q0),
    .input_b_address0(grp_RGBtoGray_512_512_2_fu_302_input_b_address0),
    .input_b_ce0(grp_RGBtoGray_512_512_2_fu_302_input_b_ce0),
    .input_b_q0(input_image_b_q0),
    .output_r_address0(grp_RGBtoGray_512_512_2_fu_302_output_r_address0),
    .output_r_ce0(grp_RGBtoGray_512_512_2_fu_302_output_r_ce0),
    .output_r_we0(grp_RGBtoGray_512_512_2_fu_302_output_r_we0),
    .output_r_d0(grp_RGBtoGray_512_512_2_fu_302_output_r_d0)
);

thresholdOtsu grp_thresholdOtsu_fu_318(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_thresholdOtsu_fu_318_ap_start),
    .ap_done(grp_thresholdOtsu_fu_318_ap_done),
    .ap_idle(grp_thresholdOtsu_fu_318_ap_idle),
    .ap_ready(grp_thresholdOtsu_fu_318_ap_ready),
    .src_address0(grp_thresholdOtsu_fu_318_src_address0),
    .src_ce0(grp_thresholdOtsu_fu_318_src_ce0),
    .src_q0(grayOutput_q0),
    .dst_address0(grp_thresholdOtsu_fu_318_dst_address0),
    .dst_ce0(grp_thresholdOtsu_fu_318_dst_ce0),
    .dst_we0(grp_thresholdOtsu_fu_318_dst_we0),
    .dst_d0(grp_thresholdOtsu_fu_318_dst_d0)
);

watershed_algorithm grp_watershed_algorithm_fu_328(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_watershed_algorithm_fu_328_ap_start),
    .ap_done(grp_watershed_algorithm_fu_328_ap_done),
    .ap_idle(grp_watershed_algorithm_fu_328_ap_idle),
    .ap_ready(grp_watershed_algorithm_fu_328_ap_ready),
    .grayOutput_address0(grp_watershed_algorithm_fu_328_grayOutput_address0),
    .grayOutput_ce0(grp_watershed_algorithm_fu_328_grayOutput_ce0),
    .grayOutput_q0(grayOutput_q0)
);

connectedComponents grp_connectedComponents_fu_340(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_connectedComponents_fu_340_ap_start),
    .ap_done(grp_connectedComponents_fu_340_ap_done),
    .ap_idle(grp_connectedComponents_fu_340_ap_idle),
    .ap_ready(grp_connectedComponents_fu_340_ap_ready),
    .sureForeground_address0(grp_connectedComponents_fu_340_sureForeground_address0),
    .sureForeground_ce0(grp_connectedComponents_fu_340_sureForeground_ce0),
    .sureForeground_q0(sureForeground_q0)
);

morphologyEx grp_morphologyEx_fu_348(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_morphologyEx_fu_348_ap_start),
    .ap_done(grp_morphologyEx_fu_348_ap_done),
    .ap_idle(grp_morphologyEx_fu_348_ap_idle),
    .ap_ready(grp_morphologyEx_fu_348_ap_ready),
    .dst_address0(grp_morphologyEx_fu_348_dst_address0),
    .dst_ce0(grp_morphologyEx_fu_348_dst_ce0),
    .dst_we0(grp_morphologyEx_fu_348_dst_we0),
    .dst_d0(grp_morphologyEx_fu_348_dst_d0),
    .dst_q0(morphOpening_q0),
    .binaryThreshold_address0(grp_morphologyEx_fu_348_binaryThreshold_address0),
    .binaryThreshold_ce0(grp_morphologyEx_fu_348_binaryThreshold_ce0),
    .binaryThreshold_q0(binaryThreshold_q0)
);

dilate grp_dilate_fu_356(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dilate_fu_356_ap_start),
    .ap_done(grp_dilate_fu_356_ap_done),
    .ap_idle(grp_dilate_fu_356_ap_idle),
    .ap_ready(grp_dilate_fu_356_ap_ready),
    .src_address0(grp_dilate_fu_356_src_address0),
    .src_ce0(grp_dilate_fu_356_src_ce0),
    .src_q0(morphOpening_q0)
);

imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_fu_108),
    .din1(32'd1056964608),
    .ce(1'b1),
    .dout(grp_fu_366_p2)
);

imageProcessing_sitofp_32ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imageProcessing_sitofp_32ns_32_5_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_371_p0),
    .ce(1'b1),
    .dout(grp_fu_371_p1)
);

imageProcessing_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
imageProcessing_fcmp_32ns_32ns_1_1_1_U52(
    .din0(grp_fu_374_p0),
    .din1(grp_fu_374_p1),
    .opcode(5'd2),
    .dout(grp_fu_374_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_RGBtoGray_512_512_2_fu_302_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_RGBtoGray_512_512_2_fu_302_ap_start_reg <= 1'b1;
        end else if ((grp_RGBtoGray_512_512_2_fu_302_ap_ready == 1'b1)) begin
            grp_RGBtoGray_512_512_2_fu_302_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_connectedComponents_fu_340_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state21) & (exitcond1_i7_fu_551_p2 == 1'd1))) begin
            grp_connectedComponents_fu_340_ap_start_reg <= 1'b1;
        end else if ((grp_connectedComponents_fu_340_ap_ready == 1'b1)) begin
            grp_connectedComponents_fu_340_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dilate_fu_356_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_dilate_fu_356_ap_start_reg <= 1'b1;
        end else if ((grp_dilate_fu_356_ap_ready == 1'b1)) begin
            grp_dilate_fu_356_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_distanceTransform_fu_294_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_distanceTransform_fu_294_ap_start_reg <= 1'b1;
        end else if ((grp_distanceTransform_fu_294_ap_ready == 1'b1)) begin
            grp_distanceTransform_fu_294_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_morphologyEx_fu_348_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_morphologyEx_fu_348_ap_start_reg <= 1'b1;
        end else if ((grp_morphologyEx_fu_348_ap_ready == 1'b1)) begin
            grp_morphologyEx_fu_348_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_thresholdOtsu_fu_318_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_thresholdOtsu_fu_318_ap_start_reg <= 1'b1;
        end else if ((grp_thresholdOtsu_fu_318_ap_ready == 1'b1)) begin
            grp_thresholdOtsu_fu_318_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_watershed_algorithm_fu_328_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state21) & (exitcond1_i7_fu_551_p2 == 1'd1))) begin
            grp_watershed_algorithm_fu_328_ap_start_reg <= 1'b1;
        end else if ((grp_watershed_algorithm_fu_328_ap_ready == 1'b1)) begin
            grp_watershed_algorithm_fu_328_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (exitcond2_i_fu_814_p2 == 1'd1))) begin
        i_i2_reg_272 <= i_11_reg_973;
    end else if (((1'b0 == ap_block_state32_on_subcall_done) & (1'b1 == ap_CS_fsm_state32))) begin
        i_i2_reg_272 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (exitcond_i1_fu_575_p2 == 1'd1))) begin
        i_i6_reg_250 <= i_10_reg_905;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_i6_reg_250 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond_i_fu_417_p2 == 1'd1))) begin
        i_i_reg_228 <= i_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_i_reg_228 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond1_i7_fu_551_p2 == 1'd0))) begin
        j_i1_reg_261 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        j_i1_reg_261 <= j_9_reg_918;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (exitcond3_i_fu_790_p2 == 1'd0))) begin
        j_i4_reg_283 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        j_i4_reg_283 <= j_10_reg_986;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond1_i_fu_393_p2 == 1'd0))) begin
        j_i_reg_239 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_i_reg_239 <= j_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        max_fu_108 <= max_2_fu_525_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        max_fu_108 <= distanceTransformOut_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_10_reg_905 <= i_10_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        i_11_reg_973 <= i_11_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_852 <= i_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        j_10_reg_986 <= j_10_fu_820_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_9_reg_918 <= j_9_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_reg_865 <= j_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (exitcond_i1_fu_575_p2 == 1'd0))) begin
        notlhs4_reg_933 <= notlhs4_fu_610_p2;
        tmp_85_cast_reg_923[19 : 0] <= tmp_85_cast_fu_596_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        notrhs4_reg_897 <= notrhs4_fu_545_p2;
        thresholdValue_assig_1_reg_892 <= thresholdValue_assig_1_fu_537_p1;
        thresholdValue_assig_reg_887 <= grp_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_state13) & (exitcond1_i_fu_393_p2 == 1'd1)))) begin
        reg_383 <= max_fu_108;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_34_reg_882 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_46_reg_965 <= tmp_46_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_54_i_reg_959 <= grp_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond1_i_fu_393_p2 == 1'd0))) begin
        tmp_79_cast_reg_857[18 : 9] <= tmp_79_cast_fu_413_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond1_i7_fu_551_p2 == 1'd0))) begin
        tmp_81_cast_reg_910[18 : 9] <= tmp_81_cast_fu_571_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (exitcond3_i_fu_790_p2 == 1'd0))) begin
        tmp_84_cast_reg_978[18 : 9] <= tmp_84_cast_fu_810_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (exitcond2_i_fu_814_p2 == 1'd0))) begin
        tmp_89_cast_reg_991[19 : 0] <= tmp_89_cast_fu_835_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_V_1_reg_944 <= tmp_V_1_fu_630_p1;
        tmp_V_reg_938 <= {{p_Val2_s_fu_616_p1[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        val_V_reg_949 <= val_V_fu_727_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        val_reg_875 <= distanceTransformOut_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state33) & (exitcond3_i_fu_790_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) & (exitcond3_i_fu_790_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        binaryThreshold_address0 = grp_morphologyEx_fu_348_binaryThreshold_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        binaryThreshold_address0 = grp_thresholdOtsu_fu_318_dst_address0;
    end else begin
        binaryThreshold_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        binaryThreshold_ce0 = grp_morphologyEx_fu_348_binaryThreshold_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        binaryThreshold_ce0 = grp_thresholdOtsu_fu_318_dst_ce0;
    end else begin
        binaryThreshold_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        binaryThreshold_we0 = grp_thresholdOtsu_fu_318_dst_we0;
    end else begin
        binaryThreshold_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        distanceTransformOut_address0 = tmp_85_cast_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        distanceTransformOut_address0 = tmp_82_cast_fu_438_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        distanceTransformOut_address0 = 18'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        distanceTransformOut_address0 = grp_distanceTransform_fu_294_outputImage_address0;
    end else begin
        distanceTransformOut_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        distanceTransformOut_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        distanceTransformOut_ce0 = grp_distanceTransform_fu_294_outputImage_ce0;
    end else begin
        distanceTransformOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        distanceTransformOut_ce1 = grp_distanceTransform_fu_294_outputImage_ce1;
    end else begin
        distanceTransformOut_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        distanceTransformOut_we0 = grp_distanceTransform_fu_294_outputImage_we0;
    end else begin
        distanceTransformOut_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        distanceTransformOut_we1 = grp_distanceTransform_fu_294_outputImage_we1;
    end else begin
        distanceTransformOut_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grayOutput_address0 = grp_watershed_algorithm_fu_328_grayOutput_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grayOutput_address0 = grp_thresholdOtsu_fu_318_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grayOutput_address0 = grp_RGBtoGray_512_512_2_fu_302_output_r_address0;
    end else begin
        grayOutput_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grayOutput_ce0 = grp_watershed_algorithm_fu_328_grayOutput_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grayOutput_ce0 = grp_thresholdOtsu_fu_318_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grayOutput_ce0 = grp_RGBtoGray_512_512_2_fu_302_output_r_ce0;
    end else begin
        grayOutput_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grayOutput_we0 = grp_RGBtoGray_512_512_2_fu_302_output_r_we0;
    end else begin
        grayOutput_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_374_p0 = tmp_54_i_reg_959;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_374_p0 = val_reg_875;
    end else begin
        grp_fu_374_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_374_p1 = thresholdValue_assig_reg_887;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_374_p1 = max_fu_108;
    end else begin
        grp_fu_374_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        input_image_b_address0 = tmp_89_cast_fu_835_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_image_b_address0 = grp_RGBtoGray_512_512_2_fu_302_input_b_address0;
    end else begin
        input_image_b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        input_image_b_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_image_b_ce0 = grp_RGBtoGray_512_512_2_fu_302_input_b_ce0;
    end else begin
        input_image_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        input_image_g_address0 = tmp_89_cast_fu_835_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_image_g_address0 = grp_RGBtoGray_512_512_2_fu_302_input_g_address0;
    end else begin
        input_image_g_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        input_image_g_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_image_g_ce0 = grp_RGBtoGray_512_512_2_fu_302_input_g_ce0;
    end else begin
        input_image_g_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        input_image_r_address0 = tmp_89_cast_fu_835_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_image_r_address0 = grp_RGBtoGray_512_512_2_fu_302_input_r_address0;
    end else begin
        input_image_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        input_image_r_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_image_r_ce0 = grp_RGBtoGray_512_512_2_fu_302_input_r_ce0;
    end else begin
        input_image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        morphOpening_address0 = grp_dilate_fu_356_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        morphOpening_address0 = grp_morphologyEx_fu_348_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        morphOpening_address0 = grp_distanceTransform_fu_294_morphOpening_address0;
    end else begin
        morphOpening_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        morphOpening_ce0 = grp_dilate_fu_356_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        morphOpening_ce0 = grp_morphologyEx_fu_348_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        morphOpening_ce0 = grp_distanceTransform_fu_294_morphOpening_ce0;
    end else begin
        morphOpening_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        morphOpening_we0 = grp_morphologyEx_fu_348_dst_we0;
    end else begin
        morphOpening_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        output_image_b_ce0 = 1'b1;
    end else begin
        output_image_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        output_image_b_we0 = 1'b1;
    end else begin
        output_image_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        output_image_g_ce0 = 1'b1;
    end else begin
        output_image_g_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        output_image_g_we0 = 1'b1;
    end else begin
        output_image_g_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        output_image_r_ce0 = 1'b1;
    end else begin
        output_image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        output_image_r_we0 = 1'b1;
    end else begin
        output_image_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        sureForeground_address0 = tmp_85_cast_reg_923;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        sureForeground_address0 = grp_connectedComponents_fu_340_sureForeground_address0;
    end else begin
        sureForeground_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        sureForeground_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        sureForeground_ce0 = grp_connectedComponents_fu_340_sureForeground_ce0;
    end else begin
        sureForeground_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        sureForeground_we0 = 1'b1;
    end else begin
        sureForeground_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_RGBtoGray_512_512_2_fu_302_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_thresholdOtsu_fu_318_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_morphologyEx_fu_348_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_dilate_fu_356_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_distanceTransform_fu_294_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond1_i_fu_393_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (exitcond_i_fu_417_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond1_i7_fu_551_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (exitcond_i1_fu_575_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b0 == ap_block_state32_on_subcall_done) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (exitcond3_i_fu_790_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (exitcond2_i_fu_814_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state32_on_subcall_done = ((grp_connectedComponents_fu_340_ap_done == 1'b0) | (grp_watershed_algorithm_fu_328_ap_done == 1'b0));
end

assign exitcond1_i7_fu_551_p2 = ((i_i6_reg_250 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_393_p2 = ((i_i_reg_228 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_814_p2 = ((j_i4_reg_283 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond3_i_fu_790_p2 = ((i_i2_reg_272 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_i1_fu_575_p2 = ((j_i1_reg_261 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_i_fu_417_p2 = ((j_i_reg_239 == 10'd512) ? 1'b1 : 1'b0);

assign grp_RGBtoGray_512_512_2_fu_302_ap_start = grp_RGBtoGray_512_512_2_fu_302_ap_start_reg;

assign grp_connectedComponents_fu_340_ap_start = grp_connectedComponents_fu_340_ap_start_reg;

assign grp_dilate_fu_356_ap_start = grp_dilate_fu_356_ap_start_reg;

assign grp_distanceTransform_fu_294_ap_start = grp_distanceTransform_fu_294_ap_start_reg;

assign grp_fu_371_p0 = val_V_reg_949;

assign grp_morphologyEx_fu_348_ap_start = grp_morphologyEx_fu_348_ap_start_reg;

assign grp_thresholdOtsu_fu_318_ap_start = grp_thresholdOtsu_fu_318_ap_start_reg;

assign grp_watershed_algorithm_fu_328_ap_start = grp_watershed_algorithm_fu_328_ap_start_reg;

assign i_10_fu_557_p2 = (i_i6_reg_250 + 10'd1);

assign i_11_fu_796_p2 = (i_i2_reg_272 + 10'd1);

assign i_fu_399_p2 = (i_i_reg_228 + 10'd1);

assign isNeg_fu_656_p3 = sh_assign_fu_650_p2[32'd8];

assign j_10_fu_820_p2 = (j_i4_reg_283 + 10'd1);

assign j_9_fu_581_p2 = (j_i1_reg_261 + 10'd1);

assign j_fu_423_p2 = (j_i_reg_239 + 10'd1);

assign mantissa_V_1_cast1_fu_643_p1 = mantissa_V_fu_634_p4;

assign mantissa_V_fu_634_p4 = {{{{1'd1}, {tmp_V_1_reg_944}}}, {1'd0}};

assign max_1_i_to_int_fu_460_p1 = reg_383;

assign max_2_fu_525_p3 = ((tmp_35_fu_520_p2[0:0] === 1'b1) ? val_reg_875 : reg_383);

assign notlhs2_fu_496_p2 = ((tmp_29_fu_464_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs3_fu_756_p2 = ((tmp_38_fu_742_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs4_fu_610_p2 = ((tmp_40_fu_601_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_478_p2 = ((tmp_fu_446_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs2_fu_502_p2 = ((tmp_64_fu_474_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs3_fu_762_p2 = ((tmp_70_fu_752_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_545_p2 = ((tmp_61_fu_541_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_484_p2 = ((tmp_63_fu_456_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_image_b_address0 = tmp_89_cast_reg_991;

assign output_image_b_d0 = input_image_b_q0;

assign output_image_g_address0 = tmp_89_cast_reg_991;

assign output_image_g_d0 = input_image_g_q0;

assign output_image_r_address0 = tmp_89_cast_reg_991;

assign output_image_r_d0 = input_image_r_q0;

assign p_Val2_s_fu_616_p1 = distanceTransformOut_q0;

assign r_V_1_fu_699_p2 = mantissa_V_1_cast1_fu_643_p1 << tmp_i_i_i_i_44_fu_689_p1;

assign r_V_fu_693_p2 = mantissa_V_fu_634_p4 >> sh_assign_6_cast_cas_fu_685_p1;

assign sh_assign_6_cast_cas_fu_685_p1 = ush_fu_673_p3;

assign sh_assign_6_cast_fu_681_p1 = ush_fu_673_p3;

assign sh_assign_fu_650_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_i_cast_fu_647_p1));

assign thresholdValue_assig_1_fu_537_p1 = grp_fu_366_p2;

assign tmp_29_fu_464_p4 = {{max_1_i_to_int_fu_460_p1[30:23]}};

assign tmp_31_fu_490_p2 = (notrhs_fu_484_p2 | notlhs_fu_478_p2);

assign tmp_32_fu_508_p2 = (notrhs2_fu_502_p2 | notlhs2_fu_496_p2);

assign tmp_33_fu_514_p2 = (tmp_32_fu_508_p2 & tmp_31_fu_490_p2);

assign tmp_35_fu_520_p2 = (tmp_34_reg_882 & tmp_33_fu_514_p2);

assign tmp_38_fu_742_p4 = {{tmp_54_i_to_int_fu_739_p1[30:23]}};

assign tmp_40_fu_601_p4 = {{thresholdValue_assig_1_reg_892[30:23]}};

assign tmp_42_fu_768_p2 = (notrhs3_fu_762_p2 | notlhs3_fu_756_p2);

assign tmp_43_fu_774_p2 = (notrhs4_reg_897 | notlhs4_reg_933);

assign tmp_44_fu_778_p2 = (tmp_43_fu_774_p2 & tmp_42_fu_768_p2);

assign tmp_46_fu_784_p2 = (tmp_44_fu_778_p2 & grp_fu_374_p2);

assign tmp_54_i_to_int_fu_739_p1 = tmp_54_i_reg_959;

assign tmp_60_fu_563_p3 = {{i_i6_reg_250}, {9'd0}};

assign tmp_61_fu_541_p1 = thresholdValue_assig_1_fu_537_p1[22:0];

assign tmp_62_fu_433_p2 = (tmp_79_cast_reg_857 + tmp_i_cast_fu_429_p1);

assign tmp_63_fu_456_p1 = val_to_int_fu_443_p1[22:0];

assign tmp_64_fu_474_p1 = max_1_i_to_int_fu_460_p1[22:0];

assign tmp_65_fu_802_p3 = {{i_i2_reg_272}, {9'd0}};

assign tmp_66_fu_591_p2 = (tmp_i9_cast_fu_587_p1 + tmp_81_cast_reg_910);

assign tmp_67_fu_713_p1 = tmp_69_fu_705_p3;

assign tmp_68_fu_717_p4 = {{r_V_1_fu_699_p2[31:24]}};

assign tmp_69_fu_705_p3 = r_V_fu_693_p2[32'd24];

assign tmp_70_fu_752_p1 = tmp_54_i_to_int_fu_739_p1[22:0];

assign tmp_71_fu_830_p2 = (tmp_84_cast_reg_978 + tmp_i5_cast_fu_826_p1);

assign tmp_79_cast_fu_413_p1 = tmp_s_fu_405_p3;

assign tmp_81_cast_fu_571_p1 = tmp_60_fu_563_p3;

assign tmp_82_cast_fu_438_p1 = tmp_62_fu_433_p2;

assign tmp_84_cast_fu_810_p1 = tmp_65_fu_802_p3;

assign tmp_85_cast_fu_596_p1 = tmp_66_fu_591_p2;

assign tmp_89_cast_fu_835_p1 = tmp_71_fu_830_p2;

assign tmp_V_1_fu_630_p1 = p_Val2_s_fu_616_p1[22:0];

assign tmp_fu_446_p4 = {{val_to_int_fu_443_p1[30:23]}};

assign tmp_i5_cast_fu_826_p1 = j_i4_reg_283;

assign tmp_i9_cast_fu_587_p1 = j_i1_reg_261;

assign tmp_i_cast_fu_429_p1 = j_i_reg_239;

assign tmp_i_i_i_i_44_fu_689_p1 = $unsigned(sh_assign_6_cast_fu_681_p1);

assign tmp_i_i_i_i_cast_fu_669_p1 = $signed(tmp_i_i_i_i_fu_664_p2);

assign tmp_i_i_i_i_fu_664_p2 = (8'd127 - tmp_V_reg_938);

assign tmp_i_i_i_i_i_cast_fu_647_p1 = tmp_V_reg_938;

assign tmp_s_fu_405_p3 = {{i_i_reg_228}, {9'd0}};

assign ush_fu_673_p3 = ((isNeg_fu_656_p3[0:0] === 1'b1) ? tmp_i_i_i_i_cast_fu_669_p1 : sh_assign_fu_650_p2);

assign val_V_fu_727_p3 = ((isNeg_fu_656_p3[0:0] === 1'b1) ? tmp_67_fu_713_p1 : tmp_68_fu_717_p4);

assign val_to_int_fu_443_p1 = val_reg_875;

always @ (posedge ap_clk) begin
    tmp_79_cast_reg_857[8:0] <= 9'b000000000;
    tmp_79_cast_reg_857[19] <= 1'b0;
    tmp_81_cast_reg_910[8:0] <= 9'b000000000;
    tmp_81_cast_reg_910[19] <= 1'b0;
    tmp_85_cast_reg_923[63:20] <= 44'b00000000000000000000000000000000000000000000;
    tmp_84_cast_reg_978[8:0] <= 9'b000000000;
    tmp_84_cast_reg_978[19] <= 1'b0;
    tmp_89_cast_reg_991[63:20] <= 44'b00000000000000000000000000000000000000000000;
end

endmodule //image_segmentation
