// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module thresholdOtsu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;
output  [17:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [0:0] dst_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[17:0] src_address0;
reg src_ce0;
reg dst_ce0;
reg dst_we0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] variance_address0;
reg    variance_ce0;
wire   [31:0] variance_q0;
wire   [7:0] indvarinc_fu_317_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_4_fu_340_p2;
reg   [9:0] i_4_reg_652;
wire    ap_CS_fsm_state3;
wire   [19:0] tmp_39_cast_fu_354_p1;
reg   [19:0] tmp_39_cast_reg_657;
wire   [0:0] exitcond7_fu_334_p2;
wire   [9:0] j_4_fu_364_p2;
reg   [9:0] j_4_reg_665;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond6_fu_358_p2;
reg   [7:0] histogram_addr_1_reg_675;
wire    ap_CS_fsm_state5;
wire   [31:0] histogram_q0;
reg   [31:0] histogram_load_reg_680;
wire    ap_CS_fsm_state6;
wire   [7:0] indvarinc1_fu_395_p2;
wire    ap_CS_fsm_state8;
wire   [7:0] indvarinc2_fu_412_p2;
wire    ap_CS_fsm_state9;
wire   [8:0] i_6_fu_430_p2;
reg   [8:0] i_6_reg_704;
wire    ap_CS_fsm_state10;
reg   [7:0] mean_addr_1_reg_709;
wire   [0:0] exitcond4_fu_424_p2;
wire    ap_CS_fsm_state11;
wire   [8:0] j_5_fu_452_p2;
reg   [8:0] j_5_reg_722;
wire   [8:0] indvars_iv_next_fu_458_p2;
wire   [0:0] exitcond3_fu_446_p2;
wire   [31:0] grp_fu_309_p1;
reg   [31:0] tmp_37_reg_732;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_304_p2;
reg   [31:0] tmp_40_reg_737;
wire    ap_CS_fsm_state19;
wire   [31:0] mean_q0;
reg   [31:0] mean_load_reg_742;
wire   [31:0] grp_fu_300_p2;
reg   [31:0] tmp_41_reg_747;
wire    ap_CS_fsm_state24;
wire   [31:0] threshold_2_cast3_fu_464_p1;
reg   [31:0] threshold_2_cast3_reg_752;
wire    ap_CS_fsm_state26;
wire   [8:0] i_5_fu_474_p2;
reg   [8:0] i_5_reg_760;
wire   [0:0] exitcond2_fu_468_p2;
reg   [31:0] max_variance_2_reg_770;
wire    ap_CS_fsm_state27;
wire   [0:0] tmp_8_fu_312_p2;
reg   [0:0] tmp_8_reg_777;
wire    ap_CS_fsm_state28;
wire   [31:0] max_variance_1_fu_567_p3;
wire    ap_CS_fsm_state29;
wire   [31:0] threshold_1_fu_574_p3;
wire   [9:0] i_7_fu_587_p2;
reg   [9:0] i_7_reg_795;
wire    ap_CS_fsm_state30;
wire   [19:0] tmp_44_cast_fu_601_p1;
reg   [19:0] tmp_44_cast_reg_800;
wire   [0:0] exitcond1_fu_581_p2;
wire   [9:0] j_6_fu_611_p2;
reg   [9:0] j_6_reg_808;
wire    ap_CS_fsm_state31;
wire   [63:0] tmp_49_cast_fu_626_p1;
reg   [63:0] tmp_49_cast_reg_813;
wire   [0:0] exitcond_fu_605_p2;
wire   [0:0] tmp_45_fu_635_p2;
reg   [0:0] tmp_45_reg_823;
wire    ap_CS_fsm_state32;
reg   [7:0] histogram_address0;
reg    histogram_ce0;
reg    histogram_we0;
reg   [31:0] histogram_d0;
reg   [7:0] mean_address0;
reg    mean_ce0;
reg    mean_we0;
reg   [31:0] mean_d0;
reg   [7:0] invdar_reg_154;
wire   [0:0] tmp_s_fu_328_p2;
reg   [9:0] i_reg_165;
reg   [9:0] j_reg_176;
wire    ap_CS_fsm_state7;
reg   [7:0] invdar1_reg_187;
wire   [0:0] tmp_32_fu_406_p2;
reg   [7:0] invdar2_reg_198;
wire   [0:0] tmp_34_fu_418_p2;
reg   [8:0] indvars_iv_reg_209;
reg   [8:0] i2_reg_221;
reg   [8:0] j3_reg_232;
wire    ap_CS_fsm_state25;
reg   [31:0] max_variance_reg_243;
reg   [31:0] threshold_reg_255;
reg   [8:0] threshold_2_reg_267;
reg   [9:0] i5_reg_278;
reg   [9:0] j6_reg_289;
wire    ap_CS_fsm_state33;
wire   [63:0] tmp_fu_323_p1;
wire   [63:0] tmp_40_cast_fu_379_p1;
wire   [63:0] tmp_30_fu_384_p1;
wire   [63:0] tmp_28_fu_401_p1;
wire   [63:0] tmp_35_fu_436_p1;
wire   [63:0] tmp_36_fu_480_p1;
wire   [31:0] tmp_31_fu_389_p2;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_309_p0;
wire   [18:0] tmp_29_fu_346_p3;
wire   [19:0] tmp_29_cast_fu_370_p1;
wire   [19:0] tmp_33_fu_374_p2;
wire   [31:0] max_variance_2_to_in_fu_485_p1;
wire   [31:0] max_variance_to_int_fu_502_p1;
wire   [7:0] tmp_1_fu_488_p4;
wire   [22:0] tmp_38_fu_498_p1;
wire   [0:0] notrhs_fu_526_p2;
wire   [0:0] notlhs_fu_520_p2;
wire   [7:0] tmp_3_fu_506_p4;
wire   [22:0] tmp_39_fu_516_p1;
wire   [0:0] notrhs1_fu_544_p2;
wire   [0:0] notlhs1_fu_538_p2;
wire   [0:0] tmp_5_fu_532_p2;
wire   [0:0] tmp_6_fu_550_p2;
wire   [0:0] tmp_7_fu_556_p2;
wire   [0:0] tmp_9_fu_562_p2;
wire   [18:0] tmp_42_fu_593_p3;
wire   [19:0] tmp_45_cast_fu_617_p1;
wire   [19:0] tmp_43_fu_621_p2;
wire   [31:0] tmp_44_fu_631_p1;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

thresholdOtsu_variance #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
variance_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(variance_address0),
    .ce0(variance_ce0),
    .q0(variance_q0)
);

thresholdOtsu_histogram #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
histogram_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(histogram_address0),
    .ce0(histogram_ce0),
    .we0(histogram_we0),
    .d0(histogram_d0),
    .q0(histogram_q0)
);

thresholdOtsu_histogram #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
mean_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mean_address0),
    .ce0(mean_ce0),
    .we0(mean_we0),
    .d0(mean_d0),
    .q0(mean_q0)
);

imageProcessing_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imageProcessing_fadd_32ns_32ns_32_5_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mean_load_reg_742),
    .din1(tmp_40_reg_737),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_37_reg_732),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_304_p2)
);

imageProcessing_sitofp_32ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imageProcessing_sitofp_32ns_32_5_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_309_p0),
    .ce(1'b1),
    .dout(grp_fu_309_p1)
);

imageProcessing_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
imageProcessing_fcmp_32ns_32ns_1_1_1_U16(
    .din0(max_variance_2_reg_770),
    .din1(max_variance_reg_243),
    .opcode(5'd2),
    .dout(tmp_8_fu_312_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_34_fu_418_p2 == 1'd1))) begin
        i2_reg_221 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond3_fu_446_p2 == 1'd1))) begin
        i2_reg_221 <= i_6_reg_704;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (exitcond2_fu_468_p2 == 1'd1))) begin
        i5_reg_278 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state31) & (exitcond_fu_605_p2 == 1'd1))) begin
        i5_reg_278 <= i_7_reg_795;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_328_p2 == 1'd1))) begin
        i_reg_165 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_358_p2 == 1'd1))) begin
        i_reg_165 <= i_4_reg_652;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_34_fu_418_p2 == 1'd1))) begin
        indvars_iv_reg_209 <= 9'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond3_fu_446_p2 == 1'd1))) begin
        indvars_iv_reg_209 <= indvars_iv_next_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        invdar1_reg_187 <= 8'd0;
    end else if (((tmp_32_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        invdar1_reg_187 <= indvarinc1_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_32_fu_406_p2 == 1'd1))) begin
        invdar2_reg_198 <= 8'd0;
    end else if (((tmp_34_fu_418_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        invdar2_reg_198 <= indvarinc2_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_154 <= indvarinc_fu_317_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_154 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        j3_reg_232 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        j3_reg_232 <= j_5_reg_722;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_581_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        j6_reg_289 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        j6_reg_289 <= j_6_reg_808;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_176 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_176 <= j_4_reg_665;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond4_fu_424_p2 == 1'd1))) begin
        max_variance_reg_243 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        max_variance_reg_243 <= max_variance_1_fu_567_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond4_fu_424_p2 == 1'd1))) begin
        threshold_2_reg_267 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        threshold_2_reg_267 <= i_5_reg_760;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond4_fu_424_p2 == 1'd1))) begin
        threshold_reg_255 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        threshold_reg_255 <= threshold_1_fu_574_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        histogram_addr_1_reg_675 <= tmp_30_fu_384_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        histogram_load_reg_680 <= histogram_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_4_reg_652 <= i_4_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_5_reg_760 <= i_5_fu_474_p2;
        threshold_2_cast3_reg_752[8 : 0] <= threshold_2_cast3_fu_464_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_6_reg_704 <= i_6_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_7_reg_795 <= i_7_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_4_reg_665 <= j_4_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_5_reg_722 <= j_5_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        j_6_reg_808 <= j_6_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        max_variance_2_reg_770 <= variance_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        mean_addr_1_reg_709 <= tmp_35_fu_436_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mean_load_reg_742 <= mean_q0;
        tmp_40_reg_737 <= grp_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_37_reg_732 <= grp_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_39_cast_reg_657[18 : 9] <= tmp_39_cast_fu_354_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_41_reg_747 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_581_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        tmp_44_cast_reg_800[18 : 9] <= tmp_44_cast_fu_601_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_45_reg_823 <= tmp_45_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_605_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        tmp_49_cast_reg_813[19 : 0] <= tmp_49_cast_fu_626_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_8_reg_777 <= tmp_8_fu_312_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state30) & (exitcond1_fu_581_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (exitcond1_fu_581_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        histogram_address0 = histogram_addr_1_reg_675;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        histogram_address0 = tmp_30_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        histogram_address0 = tmp_fu_323_p1;
    end else begin
        histogram_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        histogram_ce0 = 1'b1;
    end else begin
        histogram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        histogram_d0 = tmp_31_fu_389_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        histogram_d0 = 32'd0;
    end else begin
        histogram_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        histogram_we0 = 1'b1;
    end else begin
        histogram_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state25))) begin
        mean_address0 = mean_addr_1_reg_709;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mean_address0 = tmp_28_fu_401_p1;
    end else begin
        mean_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        mean_ce0 = 1'b1;
    end else begin
        mean_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        mean_d0 = tmp_41_reg_747;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mean_d0 = 32'd0;
    end else begin
        mean_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        mean_we0 = 1'b1;
    end else begin
        mean_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        src_address0 = tmp_49_cast_fu_626_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address0 = tmp_40_cast_fu_379_p1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state31))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        variance_ce0 = 1'b1;
    end else begin
        variance_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_328_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond7_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_358_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_32_fu_406_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_34_fu_418_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond4_fu_424_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond3_fu_446_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (exitcond2_fu_468_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (exitcond1_fu_581_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (exitcond_fu_605_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign dst_address0 = tmp_49_cast_reg_813;

assign dst_d0 = tmp_45_reg_823;

assign exitcond1_fu_581_p2 = ((i5_reg_278 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond2_fu_468_p2 = ((threshold_2_reg_267 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond3_fu_446_p2 = ((j3_reg_232 == indvars_iv_reg_209) ? 1'b1 : 1'b0);

assign exitcond4_fu_424_p2 = ((indvars_iv_reg_209 == 9'd257) ? 1'b1 : 1'b0);

assign exitcond6_fu_358_p2 = ((j_reg_176 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond7_fu_334_p2 = ((i_reg_165 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_605_p2 = ((j6_reg_289 == 10'd512) ? 1'b1 : 1'b0);

assign grp_fu_309_p0 = j3_reg_232;

assign i_4_fu_340_p2 = (i_reg_165 + 10'd1);

assign i_5_fu_474_p2 = (threshold_2_reg_267 + 9'd1);

assign i_6_fu_430_p2 = (i2_reg_221 + 9'd1);

assign i_7_fu_587_p2 = (i5_reg_278 + 10'd1);

assign indvarinc1_fu_395_p2 = (invdar1_reg_187 + 8'd1);

assign indvarinc2_fu_412_p2 = (invdar2_reg_198 + 8'd1);

assign indvarinc_fu_317_p2 = (invdar_reg_154 + 8'd1);

assign indvars_iv_next_fu_458_p2 = (indvars_iv_reg_209 + 9'd1);

assign j_4_fu_364_p2 = (j_reg_176 + 10'd1);

assign j_5_fu_452_p2 = (j3_reg_232 + 9'd1);

assign j_6_fu_611_p2 = (j6_reg_289 + 10'd1);

assign max_variance_1_fu_567_p3 = ((tmp_9_fu_562_p2[0:0] === 1'b1) ? max_variance_2_reg_770 : max_variance_reg_243);

assign max_variance_2_to_in_fu_485_p1 = max_variance_2_reg_770;

assign max_variance_to_int_fu_502_p1 = max_variance_reg_243;

assign notlhs1_fu_538_p2 = ((tmp_3_fu_506_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_520_p2 = ((tmp_1_fu_488_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_544_p2 = ((tmp_39_fu_516_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_526_p2 = ((tmp_38_fu_498_p1 == 23'd0) ? 1'b1 : 1'b0);

assign threshold_1_fu_574_p3 = ((tmp_9_fu_562_p2[0:0] === 1'b1) ? threshold_2_cast3_reg_752 : threshold_reg_255);

assign threshold_2_cast3_fu_464_p1 = threshold_2_reg_267;

assign tmp_1_fu_488_p4 = {{max_variance_2_to_in_fu_485_p1[30:23]}};

assign tmp_28_fu_401_p1 = invdar1_reg_187;

assign tmp_29_cast_fu_370_p1 = j_reg_176;

assign tmp_29_fu_346_p3 = {{i_reg_165}, {9'd0}};

assign tmp_30_fu_384_p1 = src_q0;

assign tmp_31_fu_389_p2 = (histogram_load_reg_680 + 32'd1);

assign tmp_32_fu_406_p2 = ((invdar1_reg_187 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_33_fu_374_p2 = (tmp_39_cast_reg_657 + tmp_29_cast_fu_370_p1);

assign tmp_34_fu_418_p2 = ((invdar2_reg_198 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_35_fu_436_p1 = i2_reg_221;

assign tmp_36_fu_480_p1 = threshold_2_reg_267;

assign tmp_38_fu_498_p1 = max_variance_2_to_in_fu_485_p1[22:0];

assign tmp_39_cast_fu_354_p1 = tmp_29_fu_346_p3;

assign tmp_39_fu_516_p1 = max_variance_to_int_fu_502_p1[22:0];

assign tmp_3_fu_506_p4 = {{max_variance_to_int_fu_502_p1[30:23]}};

assign tmp_40_cast_fu_379_p1 = tmp_33_fu_374_p2;

assign tmp_42_fu_593_p3 = {{i5_reg_278}, {9'd0}};

assign tmp_43_fu_621_p2 = (tmp_45_cast_fu_617_p1 + tmp_44_cast_reg_800);

assign tmp_44_cast_fu_601_p1 = tmp_42_fu_593_p3;

assign tmp_44_fu_631_p1 = src_q0;

assign tmp_45_cast_fu_617_p1 = j6_reg_289;

assign tmp_45_fu_635_p2 = (($signed(tmp_44_fu_631_p1) > $signed(threshold_reg_255)) ? 1'b1 : 1'b0);

assign tmp_49_cast_fu_626_p1 = tmp_43_fu_621_p2;

assign tmp_5_fu_532_p2 = (notrhs_fu_526_p2 | notlhs_fu_520_p2);

assign tmp_6_fu_550_p2 = (notrhs1_fu_544_p2 | notlhs1_fu_538_p2);

assign tmp_7_fu_556_p2 = (tmp_6_fu_550_p2 & tmp_5_fu_532_p2);

assign tmp_9_fu_562_p2 = (tmp_8_reg_777 & tmp_7_fu_556_p2);

assign tmp_fu_323_p1 = invdar_reg_154;

assign tmp_s_fu_328_p2 = ((invdar_reg_154 == 8'd255) ? 1'b1 : 1'b0);

assign variance_address0 = tmp_36_fu_480_p1;

always @ (posedge ap_clk) begin
    tmp_39_cast_reg_657[8:0] <= 9'b000000000;
    tmp_39_cast_reg_657[19] <= 1'b0;
    threshold_2_cast3_reg_752[31:9] <= 23'b00000000000000000000000;
    tmp_44_cast_reg_800[8:0] <= 9'b000000000;
    tmp_44_cast_reg_800[19] <= 1'b0;
    tmp_49_cast_reg_813[63:20] <= 44'b00000000000000000000000000000000000000000000;
end

endmodule //thresholdOtsu
