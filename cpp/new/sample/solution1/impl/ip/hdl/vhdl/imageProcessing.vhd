-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imageProcessing is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of imageProcessing is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "imageProcessing,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.606000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4103,HLS_SYN_DSP=27,HLS_SYN_FF=7740,HLS_SYN_LUT=17403,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_12_fu_185_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_12_reg_234 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_90_cast_fu_199_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_90_cast_reg_239 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_11_fu_209_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal inputImage_r_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal inputImage_r_ce0 : STD_LOGIC;
    signal inputImage_r_we0 : STD_LOGIC;
    signal inputImage_r_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputImage_g_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal inputImage_g_ce0 : STD_LOGIC;
    signal inputImage_g_we0 : STD_LOGIC;
    signal inputImage_g_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputImage_b_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal inputImage_b_ce0 : STD_LOGIC;
    signal inputImage_b_we0 : STD_LOGIC;
    signal inputImage_b_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_image_segmentation_fu_141_ap_start : STD_LOGIC;
    signal grp_image_segmentation_fu_141_ap_done : STD_LOGIC;
    signal grp_image_segmentation_fu_141_ap_idle : STD_LOGIC;
    signal grp_image_segmentation_fu_141_ap_ready : STD_LOGIC;
    signal grp_image_segmentation_fu_141_input_image_r_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_image_segmentation_fu_141_input_image_r_ce0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_input_image_g_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_image_segmentation_fu_141_input_image_g_ce0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_input_image_b_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_image_segmentation_fu_141_input_image_b_ce0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_output_image_r_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_image_segmentation_fu_141_output_image_r_ce0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_output_image_r_we0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_output_image_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_image_segmentation_fu_141_output_image_g_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_image_segmentation_fu_141_output_image_g_ce0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_output_image_g_we0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_output_image_g_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_image_segmentation_fu_141_output_image_b_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_image_segmentation_fu_141_output_image_b_ce0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_output_image_b_we0 : STD_LOGIC;
    signal grp_image_segmentation_fu_141_output_image_b_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_119 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_130 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_image_segmentation_fu_141_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_91_cast_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_191_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_cast_fu_215_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_fu_219_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component image_segmentation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_image_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        input_image_r_ce0 : OUT STD_LOGIC;
        input_image_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        input_image_g_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        input_image_g_ce0 : OUT STD_LOGIC;
        input_image_g_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        input_image_b_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        input_image_b_ce0 : OUT STD_LOGIC;
        input_image_b_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_image_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        output_image_r_ce0 : OUT STD_LOGIC;
        output_image_r_we0 : OUT STD_LOGIC;
        output_image_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_image_g_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        output_image_g_ce0 : OUT STD_LOGIC;
        output_image_g_we0 : OUT STD_LOGIC;
        output_image_g_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_image_b_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        output_image_b_ce0 : OUT STD_LOGIC;
        output_image_b_we0 : OUT STD_LOGIC;
        output_image_b_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component imageProcessing_inputImage_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component imageProcessing_finalOutputImage_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    inputImage_r_U : component imageProcessing_inputImage_r
    generic map (
        DataWidth => 1,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputImage_r_address0,
        ce0 => inputImage_r_ce0,
        we0 => inputImage_r_we0,
        d0 => ap_const_lv1_1,
        q0 => inputImage_r_q0);

    inputImage_g_U : component imageProcessing_inputImage_r
    generic map (
        DataWidth => 1,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputImage_g_address0,
        ce0 => inputImage_g_ce0,
        we0 => inputImage_g_we0,
        d0 => ap_const_lv1_0,
        q0 => inputImage_g_q0);

    inputImage_b_U : component imageProcessing_inputImage_r
    generic map (
        DataWidth => 1,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputImage_b_address0,
        ce0 => inputImage_b_ce0,
        we0 => inputImage_b_we0,
        d0 => ap_const_lv1_1,
        q0 => inputImage_b_q0);

    finalOutputImage_r_U : component imageProcessing_finalOutputImage_r
    generic map (
        DataWidth => 1,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_image_segmentation_fu_141_output_image_r_address0,
        ce0 => grp_image_segmentation_fu_141_output_image_r_ce0,
        we0 => grp_image_segmentation_fu_141_output_image_r_we0,
        d0 => grp_image_segmentation_fu_141_output_image_r_d0);

    finalOutputImage_g_U : component imageProcessing_finalOutputImage_r
    generic map (
        DataWidth => 1,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_image_segmentation_fu_141_output_image_g_address0,
        ce0 => grp_image_segmentation_fu_141_output_image_g_ce0,
        we0 => grp_image_segmentation_fu_141_output_image_g_we0,
        d0 => grp_image_segmentation_fu_141_output_image_g_d0);

    finalOutputImage_b_U : component imageProcessing_finalOutputImage_r
    generic map (
        DataWidth => 1,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_image_segmentation_fu_141_output_image_b_address0,
        ce0 => grp_image_segmentation_fu_141_output_image_b_ce0,
        we0 => grp_image_segmentation_fu_141_output_image_b_we0,
        d0 => grp_image_segmentation_fu_141_output_image_b_d0);

    grp_image_segmentation_fu_141 : component image_segmentation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_image_segmentation_fu_141_ap_start,
        ap_done => grp_image_segmentation_fu_141_ap_done,
        ap_idle => grp_image_segmentation_fu_141_ap_idle,
        ap_ready => grp_image_segmentation_fu_141_ap_ready,
        input_image_r_address0 => grp_image_segmentation_fu_141_input_image_r_address0,
        input_image_r_ce0 => grp_image_segmentation_fu_141_input_image_r_ce0,
        input_image_r_q0 => inputImage_r_q0,
        input_image_g_address0 => grp_image_segmentation_fu_141_input_image_g_address0,
        input_image_g_ce0 => grp_image_segmentation_fu_141_input_image_g_ce0,
        input_image_g_q0 => inputImage_g_q0,
        input_image_b_address0 => grp_image_segmentation_fu_141_input_image_b_address0,
        input_image_b_ce0 => grp_image_segmentation_fu_141_input_image_b_ce0,
        input_image_b_q0 => inputImage_b_q0,
        output_image_r_address0 => grp_image_segmentation_fu_141_output_image_r_address0,
        output_image_r_ce0 => grp_image_segmentation_fu_141_output_image_r_ce0,
        output_image_r_we0 => grp_image_segmentation_fu_141_output_image_r_we0,
        output_image_r_d0 => grp_image_segmentation_fu_141_output_image_r_d0,
        output_image_g_address0 => grp_image_segmentation_fu_141_output_image_g_address0,
        output_image_g_ce0 => grp_image_segmentation_fu_141_output_image_g_ce0,
        output_image_g_we0 => grp_image_segmentation_fu_141_output_image_g_we0,
        output_image_g_d0 => grp_image_segmentation_fu_141_output_image_g_d0,
        output_image_b_address0 => grp_image_segmentation_fu_141_output_image_b_address0,
        output_image_b_ce0 => grp_image_segmentation_fu_141_output_image_b_ce0,
        output_image_b_we0 => grp_image_segmentation_fu_141_output_image_b_we0,
        output_image_b_d0 => grp_image_segmentation_fu_141_output_image_b_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_image_segmentation_fu_141_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_image_segmentation_fu_141_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond1_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_image_segmentation_fu_141_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_image_segmentation_fu_141_ap_ready = ap_const_logic_1)) then 
                    grp_image_segmentation_fu_141_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_203_p2 = ap_const_lv1_1))) then 
                i_reg_119 <= i_12_reg_234;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_119 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_130 <= ap_const_lv10_0;
            elsif (((exitcond_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_130 <= j_11_fu_209_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_12_reg_234 <= i_12_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_90_cast_reg_239(18 downto 9) <= tmp_90_cast_fu_199_p1(18 downto 9);
            end if;
        end if;
    end process;
    tmp_90_cast_reg_239(8 downto 0) <= "000000000";
    tmp_90_cast_reg_239(19) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_179_p2, ap_CS_fsm_state3, grp_image_segmentation_fu_141_ap_done, exitcond_fu_203_p2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_203_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_image_segmentation_fu_141_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(grp_image_segmentation_fu_141_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_image_segmentation_fu_141_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_image_segmentation_fu_141_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_image_segmentation_fu_141_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_179_p2 <= "1" when (i_reg_119 = ap_const_lv10_200) else "0";
    exitcond_fu_203_p2 <= "1" when (j_reg_130 = ap_const_lv10_200) else "0";
    grp_image_segmentation_fu_141_ap_start <= grp_image_segmentation_fu_141_ap_start_reg;
    i_12_fu_185_p2 <= std_logic_vector(unsigned(i_reg_119) + unsigned(ap_const_lv10_1));

    inputImage_b_address0_assign_proc : process(ap_CS_fsm_state3, grp_image_segmentation_fu_141_input_image_b_address0, ap_CS_fsm_state4, tmp_91_cast_fu_224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputImage_b_address0 <= tmp_91_cast_fu_224_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputImage_b_address0 <= grp_image_segmentation_fu_141_input_image_b_address0;
        else 
            inputImage_b_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inputImage_b_ce0_assign_proc : process(ap_CS_fsm_state3, grp_image_segmentation_fu_141_input_image_b_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputImage_b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputImage_b_ce0 <= grp_image_segmentation_fu_141_input_image_b_ce0;
        else 
            inputImage_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputImage_b_we0_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_203_p2)
    begin
        if (((exitcond_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inputImage_b_we0 <= ap_const_logic_1;
        else 
            inputImage_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inputImage_g_address0_assign_proc : process(ap_CS_fsm_state3, grp_image_segmentation_fu_141_input_image_g_address0, ap_CS_fsm_state4, tmp_91_cast_fu_224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputImage_g_address0 <= tmp_91_cast_fu_224_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputImage_g_address0 <= grp_image_segmentation_fu_141_input_image_g_address0;
        else 
            inputImage_g_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inputImage_g_ce0_assign_proc : process(ap_CS_fsm_state3, grp_image_segmentation_fu_141_input_image_g_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputImage_g_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputImage_g_ce0 <= grp_image_segmentation_fu_141_input_image_g_ce0;
        else 
            inputImage_g_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputImage_g_we0_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_203_p2)
    begin
        if (((exitcond_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inputImage_g_we0 <= ap_const_logic_1;
        else 
            inputImage_g_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inputImage_r_address0_assign_proc : process(ap_CS_fsm_state3, grp_image_segmentation_fu_141_input_image_r_address0, ap_CS_fsm_state4, tmp_91_cast_fu_224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputImage_r_address0 <= tmp_91_cast_fu_224_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputImage_r_address0 <= grp_image_segmentation_fu_141_input_image_r_address0;
        else 
            inputImage_r_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inputImage_r_ce0_assign_proc : process(ap_CS_fsm_state3, grp_image_segmentation_fu_141_input_image_r_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputImage_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputImage_r_ce0 <= grp_image_segmentation_fu_141_input_image_r_ce0;
        else 
            inputImage_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputImage_r_we0_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_203_p2)
    begin
        if (((exitcond_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inputImage_r_we0 <= ap_const_logic_1;
        else 
            inputImage_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_11_fu_209_p2 <= std_logic_vector(unsigned(j_reg_130) + unsigned(ap_const_lv10_1));
    tmp_90_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_191_p3),20));
    tmp_91_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_219_p2),64));
    tmp_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_130),20));
    tmp_fu_191_p3 <= (i_reg_119 & ap_const_lv9_0);
    tmp_s_fu_219_p2 <= std_logic_vector(unsigned(tmp_90_cast_reg_239) + unsigned(tmp_cast_fu_215_p1));
end behav;
