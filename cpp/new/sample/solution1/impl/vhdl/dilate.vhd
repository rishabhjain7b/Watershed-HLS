-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dilate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of dilate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal imKernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal imKernel_ce0 : STD_LOGIC;
    signal imKernel_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sureBackground_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sureBackground_ce0 : STD_LOGIC;
    signal sureBackground_we0 : STD_LOGIC;
    signal r_1_fu_253_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_1_reg_583 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_153_cast_fu_267_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_153_cast_reg_588 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond8_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_596 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_154_cast_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_154_cast_reg_601 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_303_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_14_reg_614 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal r_2_fu_315_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_2_reg_622 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_156_cast_fu_329_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_156_cast_reg_628 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond5_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_3_fu_339_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_3_reg_636 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal kr_1_fu_355_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kr_1_reg_645 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal rr_fu_361_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rr_reg_650 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_cast_fu_374_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_162_cast_reg_655 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_149_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_149_reg_660 : STD_LOGIC_VECTOR (4 downto 0);
    signal kc_1_fu_429_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_1_reg_668 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal cc_fu_435_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal cc_reg_673 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_load_2_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal imKernel_load_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_3_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal r_3_fu_536_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_3_reg_706 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_158_cast_fu_550_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_158_cast_reg_711 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_fu_560_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_2_reg_719 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_159_cast_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_159_cast_reg_724 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_ce0 : STD_LOGIC;
    signal tmp_we0 : STD_LOGIC;
    signal tmp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_123 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_reg_134 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_reg_145 : STD_LOGIC_VECTOR (1 downto 0);
    signal r1_reg_156 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c2_reg_167 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal kr_reg_191 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_val_1_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal kc_reg_214 : STD_LOGIC_VECTOR (1 downto 0);
    signal r3_reg_225 : STD_LOGIC_VECTOR (9 downto 0);
    signal c4_reg_236 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_160_cast_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_165_cast_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_166_cast_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_fu_400_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_259_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_cast_fu_283_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_141_fu_287_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_142_fu_321_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal kr_cast9_fu_345_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_147_fu_366_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_148_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_390_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_137_cast_fu_378_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_136_cast_fu_405_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_146_fu_409_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal kc_cast6_fu_419_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_138_cast_fu_440_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_151_fu_444_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_139_cast_fu_454_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_152_fu_458_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_132_fu_468_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_195_cast_fu_480_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_197_cast_fu_483_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_val_5_fu_486_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_val_5_cast_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_140_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_5_cast3_fu_492_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_153_fu_506_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal val_0_max_val_1_fu_510_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_150_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_0_max_val_1_cast_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_143_fu_542_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_134_cast_fu_566_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_144_fu_570_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component dilate_imKernel IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dilate_sureBackground IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component morphologyEx_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    imKernel_U : component dilate_imKernel
    generic map (
        DataWidth => 1,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => imKernel_address0,
        ce0 => imKernel_ce0,
        q0 => imKernel_q0);

    sureBackground_U : component dilate_sureBackground
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sureBackground_address0,
        ce0 => sureBackground_ce0,
        we0 => sureBackground_we0,
        d0 => tmp_q0);

    tmp_U : component morphologyEx_temp
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_address0,
        ce0 => tmp_ce0,
        we0 => tmp_we0,
        d0 => tmp_d0,
        q0 => tmp_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c2_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                c2_reg_167 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_349_p2 = ap_const_lv1_1))) then 
                c2_reg_167 <= c_3_reg_636;
            end if; 
        end if;
    end process;

    c4_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_530_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                c4_reg_236 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                c4_reg_236 <= c_2_reg_719;
            end if; 
        end if;
    end process;

    c_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_reg_134 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c_reg_134 <= c_1_reg_596;
            end if; 
        end if;
    end process;

    i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_145 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond1_fu_530_p2 = ap_const_lv1_1))) then 
                i_reg_145 <= i_14_reg_614;
            end if; 
        end if;
    end process;

    kc_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                kc_reg_214 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                kc_reg_214 <= kc_1_reg_668;
            end if; 
        end if;
    end process;

    kr_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                kr_reg_191 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_423_p2 = ap_const_lv1_1))) then 
                kr_reg_191 <= kr_1_reg_645;
            end if; 
        end if;
    end process;

    max_val_1_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                max_val_1_reg_202 <= max_val_reg_179;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                max_val_1_reg_202 <= max_val_3_fu_522_p3;
            end if; 
        end if;
    end process;

    max_val_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max_val_reg_179 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_423_p2 = ap_const_lv1_1))) then 
                max_val_reg_179 <= max_val_1_reg_202;
            end if; 
        end if;
    end process;

    r1_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                r1_reg_156 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond4_fu_333_p2 = ap_const_lv1_1))) then 
                r1_reg_156 <= r_2_reg_622;
            end if; 
        end if;
    end process;

    r3_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                r3_reg_225 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_554_p2 = ap_const_lv1_1))) then 
                r3_reg_225 <= r_3_reg_706;
            end if; 
        end if;
    end process;

    r_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_reg_123 <= r_1_reg_583;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_reg_123 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_1_reg_596 <= c_1_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                c_2_reg_719 <= c_2_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c_3_reg_636 <= c_3_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                cc_reg_673 <= cc_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_14_reg_614 <= i_14_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                imKernel_load_reg_693 <= imKernel_q0;
                src_load_2_reg_688 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                kc_1_reg_668 <= kc_1_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                kr_1_reg_645 <= kr_1_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_1_reg_583 <= r_1_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                r_2_reg_622 <= r_2_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                r_3_reg_706 <= r_3_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                rr_reg_650 <= rr_fu_361_p2;
                tmp_149_reg_660 <= tmp_149_fu_394_p2;
                    tmp_162_cast_reg_655(18 downto 9) <= tmp_162_cast_fu_374_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_153_cast_reg_588(18 downto 9) <= tmp_153_cast_fu_267_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_154_cast_reg_601(19 downto 0) <= tmp_154_cast_fu_292_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_156_cast_reg_628(18 downto 9) <= tmp_156_cast_fu_329_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_530_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    tmp_158_cast_reg_711(18 downto 9) <= tmp_158_cast_fu_550_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_554_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    tmp_159_cast_reg_724(19 downto 0) <= tmp_159_cast_fu_575_p1(19 downto 0);
            end if;
        end if;
    end process;
    tmp_153_cast_reg_588(8 downto 0) <= "000000000";
    tmp_153_cast_reg_588(19) <= '0';
    tmp_154_cast_reg_601(63 downto 20) <= "00000000000000000000000000000000000000000000";
    tmp_156_cast_reg_628(8 downto 0) <= "000000000";
    tmp_156_cast_reg_628(19) <= '0';
    tmp_162_cast_reg_655(8 downto 0) <= "000000000";
    tmp_162_cast_reg_655(19) <= '0';
    tmp_158_cast_reg_711(8 downto 0) <= "000000000";
    tmp_158_cast_reg_711(19) <= '0';
    tmp_159_cast_reg_724(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_247_p2, ap_CS_fsm_state3, exitcond7_fu_271_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond5_fu_309_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, exitcond3_fu_349_p2, ap_CS_fsm_state9, exitcond2_fu_423_p2, ap_CS_fsm_state12, exitcond1_fu_530_p2, ap_CS_fsm_state13, exitcond_fu_554_p2, exitcond4_fu_333_p2, exitcond6_fu_297_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond8_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond7_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_297_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond5_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond4_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_349_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_423_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond1_fu_530_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_554_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond6_fu_297_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_297_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond6_fu_297_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_297_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_277_p2 <= std_logic_vector(unsigned(c_reg_134) + unsigned(ap_const_lv10_1));
    c_2_fu_560_p2 <= std_logic_vector(unsigned(c4_reg_236) + unsigned(ap_const_lv10_1));
    c_3_fu_339_p2 <= std_logic_vector(unsigned(c2_reg_167) + unsigned(ap_const_lv10_1));
    cc_fu_435_p2 <= std_logic_vector(unsigned(kc_cast6_fu_419_p1) + unsigned(c_3_reg_636));
    exitcond1_fu_530_p2 <= "1" when (r3_reg_225 = ap_const_lv10_200) else "0";
    exitcond2_fu_423_p2 <= "1" when (kc_reg_214 = ap_const_lv2_3) else "0";
    exitcond3_fu_349_p2 <= "1" when (kr_reg_191 = ap_const_lv2_3) else "0";
    exitcond4_fu_333_p2 <= "1" when (c2_reg_167 = ap_const_lv10_200) else "0";
    exitcond5_fu_309_p2 <= "1" when (r1_reg_156 = ap_const_lv10_200) else "0";
    exitcond6_fu_297_p2 <= "1" when (i_reg_145 = ap_const_lv2_2) else "0";
    exitcond7_fu_271_p2 <= "1" when (c_reg_134 = ap_const_lv10_200) else "0";
    exitcond8_fu_247_p2 <= "1" when (r_reg_123 = ap_const_lv10_200) else "0";
    exitcond_fu_554_p2 <= "1" when (c4_reg_236 = ap_const_lv10_200) else "0";
    i_14_fu_303_p2 <= std_logic_vector(unsigned(i_reg_145) + unsigned(ap_const_lv2_1));
    imKernel_address0 <= tmp_166_cast_fu_463_p1(4 - 1 downto 0);

    imKernel_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            imKernel_ce0 <= ap_const_logic_1;
        else 
            imKernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kc_1_fu_429_p2 <= std_logic_vector(unsigned(kc_reg_214) + unsigned(ap_const_lv2_1));
    kc_cast6_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_214),10));
    kr_1_fu_355_p2 <= std_logic_vector(unsigned(kr_reg_191) + unsigned(ap_const_lv2_1));
    kr_cast9_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_191),10));
    max_val_3_fu_522_p3 <= 
        max_val_1_reg_202 when (tmp_150_fu_472_p3(0) = '1') else 
        val_0_max_val_1_cast_fu_518_p1;
    max_val_5_cast3_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_5_fu_486_p2),31));
    max_val_5_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_5_fu_486_p2),32));
    max_val_5_fu_486_p2 <= std_logic_vector(unsigned(tmp_195_cast_fu_480_p1) + unsigned(tmp_197_cast_fu_483_p1));
    p_shl_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_382_p3),5));
    r_1_fu_253_p2 <= std_logic_vector(unsigned(r_reg_123) + unsigned(ap_const_lv10_1));
    r_2_fu_315_p2 <= std_logic_vector(unsigned(r1_reg_156) + unsigned(ap_const_lv10_1));
    r_3_fu_536_p2 <= std_logic_vector(unsigned(r3_reg_225) + unsigned(ap_const_lv10_1));
    rr_fu_361_p2 <= std_logic_vector(unsigned(r_2_reg_622) + unsigned(kr_cast9_fu_345_p1));

    src_address0_assign_proc : process(ap_CS_fsm_state3, tmp_154_cast_fu_292_p1, ap_CS_fsm_state9, tmp_165_cast_fu_449_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            src_address0 <= tmp_165_cast_fu_449_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address0 <= tmp_154_cast_fu_292_p1(18 - 1 downto 0);
        else 
            src_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sureBackground_address0 <= tmp_159_cast_reg_724(18 - 1 downto 0);

    sureBackground_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sureBackground_ce0 <= ap_const_logic_1;
        else 
            sureBackground_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sureBackground_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sureBackground_we0 <= ap_const_logic_1;
        else 
            sureBackground_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_132_fu_468_p2 <= (rr_reg_650 or cc_reg_673);
    tmp_134_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c4_reg_236),20));
    tmp_136_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_reg_167),20));
    tmp_137_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_reg_191),5));
    tmp_138_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_fu_435_p2),20));
    tmp_139_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_reg_214),5));
    tmp_140_fu_500_p2 <= "1" when (signed(max_val_5_cast_fu_496_p1) > signed(max_val_1_reg_202)) else "0";
    tmp_141_fu_287_p2 <= std_logic_vector(unsigned(tmp_153_cast_reg_588) + unsigned(tmp_cast_fu_283_p1));
    tmp_142_fu_321_p3 <= (r1_reg_156 & ap_const_lv9_0);
    tmp_143_fu_542_p3 <= (r3_reg_225 & ap_const_lv9_0);
    tmp_144_fu_570_p2 <= std_logic_vector(unsigned(tmp_158_cast_reg_711) + unsigned(tmp_134_cast_fu_566_p1));
    tmp_145_fu_400_p1 <= max_val_reg_179(8 - 1 downto 0);
    tmp_146_fu_409_p2 <= std_logic_vector(unsigned(tmp_156_cast_reg_628) + unsigned(tmp_136_cast_fu_405_p1));
    tmp_147_fu_366_p3 <= (rr_fu_361_p2 & ap_const_lv9_0);
    tmp_148_fu_382_p3 <= (kr_reg_191 & ap_const_lv2_0);
    tmp_149_fu_394_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_390_p1) - unsigned(tmp_137_cast_fu_378_p1));
    tmp_150_fu_472_p3 <= tmp_132_fu_468_p2(9 downto 9);
    tmp_151_fu_444_p2 <= std_logic_vector(unsigned(tmp_138_cast_fu_440_p1) + unsigned(tmp_162_cast_reg_655));
    tmp_152_fu_458_p2 <= std_logic_vector(unsigned(tmp_139_cast_fu_454_p1) + unsigned(tmp_149_reg_660));
    tmp_153_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_259_p3),20));
    tmp_153_fu_506_p1 <= max_val_1_reg_202(31 - 1 downto 0);
    tmp_154_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_141_fu_287_p2),64));
    tmp_156_cast_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_321_p3),20));
    tmp_158_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_542_p3),20));
    tmp_159_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_fu_570_p2),64));
    tmp_160_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_146_fu_409_p2),64));
    tmp_162_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_fu_366_p3),20));
    tmp_165_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_444_p2),64));
        tmp_166_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_152_fu_458_p2),64));

    tmp_195_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_load_2_reg_688),9));
    tmp_197_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imKernel_load_reg_693),9));

    tmp_address0_assign_proc : process(tmp_154_cast_reg_601, ap_CS_fsm_state8, ap_CS_fsm_state13, tmp_159_cast_fu_575_p1, ap_CS_fsm_state4, tmp_160_cast_fu_414_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            tmp_address0 <= tmp_159_cast_fu_575_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            tmp_address0 <= tmp_160_cast_fu_414_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_address0 <= tmp_154_cast_reg_601(18 - 1 downto 0);
        else 
            tmp_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_134),20));

    tmp_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_d0_assign_proc : process(src_q0, ap_CS_fsm_state8, ap_CS_fsm_state4, tmp_145_fu_400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            tmp_d0 <= tmp_145_fu_400_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_d0 <= src_q0;
        else 
            tmp_d0 <= "XXXXXXXX";
        end if; 
    end process;

    tmp_s_fu_259_p3 <= (r_reg_123 & ap_const_lv9_0);

    tmp_we0_assign_proc : process(ap_CS_fsm_state8, exitcond3_fu_349_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_349_p2 = ap_const_lv1_1)))) then 
            tmp_we0 <= ap_const_logic_1;
        else 
            tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    val_0_max_val_1_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_0_max_val_1_fu_510_p3),32));
    val_0_max_val_1_fu_510_p3 <= 
        max_val_5_cast3_fu_492_p1 when (tmp_140_fu_500_p2(0) = '1') else 
        tmp_153_fu_506_p1;
end behav;
