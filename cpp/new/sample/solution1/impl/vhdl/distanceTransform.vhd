-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity distanceTransform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outputImage_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    outputImage_ce0 : OUT STD_LOGIC;
    outputImage_we0 : OUT STD_LOGIC;
    outputImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputImage_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputImage_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    outputImage_ce1 : OUT STD_LOGIC;
    outputImage_we1 : OUT STD_LOGIC;
    outputImage_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputImage_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    morphOpening_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    morphOpening_ce0 : OUT STD_LOGIC;
    morphOpening_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of distanceTransform is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv32_49742400 : STD_LOGIC_VECTOR (31 downto 0) := "01001001011101000010010000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_3FF6A09E667F3BCD : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110110101000001001111001100110011111110011101111001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_308 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_91_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp_130_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_325_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_13_reg_1159 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_98_cast_fu_339_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_98_cast_reg_1164 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond3_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_12_fu_349_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_fu_375_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_reg_1180 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_103_cast_fu_389_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_103_cast_reg_1185 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1191 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_135_cast_fu_413_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_135_cast_reg_1196 : STD_LOGIC_VECTOR (19 downto 0);
    signal x_2_fu_423_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_2_reg_1205 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outputImage_addr_1_reg_1215 : STD_LOGIC_VECTOR (17 downto 0);
    signal outputImage_addr_5_reg_1221 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_100_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_reg_1226 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_102_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_91_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_cast_fu_766_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_139_cast_reg_1262 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_86_fu_750_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_141_cast_fu_790_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_141_cast_reg_1275 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_103_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_reg_1284 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_101_fu_794_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_822_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal outputImage_addr_3_reg_1299 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal outputImage_addr_7_reg_1313 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_cond4_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_1322 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal outputImage_addr_10_reg_1331 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_130_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_1150_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_reg_166 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_177 : STD_LOGIC_VECTOR (9 downto 0);
    signal y1_assign_reg_188 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_assign_reg_199 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal y1_assign_1_reg_211 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_x1_assign_1_phi_fu_227_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_assign_1_reg_223 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_136_cast_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_142_cast_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_cast_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_144_cast_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_cast_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_cast_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_146_cast_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_147_cast_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_148_cast_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_150_cast_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_151_cast_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_55_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_73_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_64_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_82_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_331_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_97_cast_fu_355_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_84_fu_359_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_75_fu_381_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal y2_assign_fu_399_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_77_fu_405_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_102_cast_fu_429_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_98_fu_433_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_99_fu_444_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_109_cast_fu_466_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_105_fu_470_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_155_to_int_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputImage_load_1_t_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_484_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_107_fu_494_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_502_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_108_fu_512_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_to_int_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputImage_load_5_t_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_568_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_fu_578_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_586_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_118_fu_596_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_cast_fu_652_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_135_fu_656_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_170_to_int_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_to_int_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_670_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_136_fu_680_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_688_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_137_fu_698_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs6_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_758_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal y2_assign_1_fu_776_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_97_fu_782_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_112_cast_fu_808_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_110_fu_812_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_114_cast_fu_828_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_112_fu_832_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_159_to_int_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputImage_load_3_t_fu_860_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_846_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_113_fu_856_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_864_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_114_fu_874_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_116_cast_fu_926_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_122_fu_930_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_125_fu_940_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_165_to_int_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputImage_load_7_t_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_fu_954_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_133_fu_964_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_972_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_134_fu_982_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_cast_fu_1038_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_138_fu_1042_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_125_cast_fu_1052_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_139_fu_1056_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_176_to_int_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_178_to_int_fu_1084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_fu_1070_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_140_fu_1080_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs10_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs10_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_1088_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_141_fu_1098_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs11_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs11_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);

    component imageProcessing_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageProcessing_fptrunc_64ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageProcessing_fpext_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imageProcessing_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component imageProcessing_dadd_64ns_64ns_64_6_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imageProcessing_dcmp_64ns_64ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    imageProcessing_fadd_32ns_32ns_32_5_full_dsp_1_U31 : component imageProcessing_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_235_p0,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    imageProcessing_fptrunc_64ns_32_1_1_U32 : component imageProcessing_fptrunc_64ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => reg_308,
        dout => grp_fu_240_p1);

    imageProcessing_fpext_32ns_64_1_1_U33 : component imageProcessing_fpext_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_243_p0,
        dout => grp_fu_243_p1);

    imageProcessing_fcmp_32ns_32ns_1_1_1_U34 : component imageProcessing_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_248_p0,
        din1 => grp_fu_248_p1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_248_p2);

    imageProcessing_dadd_64ns_64ns_64_6_full_dsp_1_U35 : component imageProcessing_dadd_64ns_64ns_64_6_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_302,
        din1 => ap_const_lv64_3FF6A09E667F3BCD,
        ce => ap_const_logic_1,
        dout => grp_fu_252_p2);

    imageProcessing_dcmp_64ns_64ns_1_1_1_U36 : component imageProcessing_dcmp_64ns_64ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => reg_308,
        din1 => reg_302,
        opcode => ap_const_lv5_4,
        dout => grp_fu_257_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_343_p2 = ap_const_lv1_1))) then 
                i_reg_166 <= i_13_reg_1159;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_166 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_177 <= ap_const_lv10_0;
            elsif (((exitcond2_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_177 <= j_12_fu_349_p2;
            end if; 
        end if;
    end process;

    reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                reg_274 <= outputImage_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                reg_274 <= outputImage_q0;
            end if; 
        end if;
    end process;

    reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                reg_288 <= outputImage_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                reg_288 <= outputImage_q1;
            end if; 
        end if;
    end process;

    x1_assign_1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_fu_750_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                x1_assign_1_reg_223 <= ap_const_lv10_1FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                x1_assign_1_reg_223 <= x_fu_1150_p2;
            end if; 
        end if;
    end process;

    x1_assign_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x1_assign_reg_199 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                x1_assign_reg_199 <= x_2_reg_1205;
            end if; 
        end if;
    end process;

    y1_assign_1_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_369_p2 = ap_const_lv1_1))) then 
                y1_assign_1_reg_211 <= ap_const_lv10_1FF;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_101_fu_794_p3 = ap_const_lv1_1))) then 
                y1_assign_1_reg_211 <= y_2_fu_822_p2;
            end if; 
        end if;
    end process;

    y1_assign_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_319_p2 = ap_const_lv1_1))) then 
                y1_assign_reg_188 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_417_p2 = ap_const_lv1_1))) then 
                y1_assign_reg_188 <= y_reg_1180;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_13_reg_1159 <= i_13_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                or_cond4_reg_1322 <= or_cond4_fu_1034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                or_cond_reg_1246 <= or_cond_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (or_cond4_fu_1034_p2 = ap_const_lv1_1))) then
                outputImage_addr_10_reg_1331 <= tmp_151_cast_fu_1061_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                outputImage_addr_1_reg_1215 <= tmp_142_cast_fu_438_p1(18 - 1 downto 0);
                outputImage_addr_5_reg_1221 <= tmp_143_cast_fu_449_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                outputImage_addr_3_reg_1299 <= tmp_146_cast_fu_837_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_95_reg_1270 = ap_const_lv1_1))) then
                outputImage_addr_7_reg_1313 <= tmp_148_cast_fu_945_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_281 <= grp_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_295 <= grp_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_302 <= grp_fu_243_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_308 <= grp_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state53) and (tmp_130_fu_1144_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (tmp_91_fu_744_p2 = ap_const_lv1_1)))) then
                reg_314 <= grp_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_100_reg_1226 <= tmp_100_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_100_fu_454_p2 = ap_const_lv1_1))) then
                tmp_102_reg_1230 <= tmp_102_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_103_cast_reg_1185(18 downto 9) <= tmp_103_cast_fu_389_p1(18 downto 9);
                    tmp_135_cast_reg_1196(19 downto 9) <= tmp_135_cast_fu_413_p1(19 downto 9);
                tmp_s_reg_1191 <= tmp_s_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_101_fu_794_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                tmp_103_reg_1284 <= tmp_103_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                tmp_130_reg_1337 <= tmp_130_fu_1144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_fu_750_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    tmp_139_cast_reg_1262(19 downto 9) <= tmp_139_cast_fu_766_p1(19 downto 9);
                    tmp_141_cast_reg_1275(18 downto 9) <= tmp_141_cast_fu_790_p1(18 downto 9);
                tmp_95_reg_1270 <= tmp_95_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_91_reg_1255 <= tmp_91_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_98_cast_reg_1164(18 downto 9) <= tmp_98_cast_fu_339_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                x_2_reg_1205 <= x_2_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y_reg_1180 <= y_fu_375_p2;
            end if;
        end if;
    end process;
    tmp_98_cast_reg_1164(8 downto 0) <= "000000000";
    tmp_98_cast_reg_1164(19) <= '0';
    tmp_103_cast_reg_1185(8 downto 0) <= "000000000";
    tmp_103_cast_reg_1185(19) <= '0';
    tmp_135_cast_reg_1196(8 downto 0) <= "000000000";
    tmp_139_cast_reg_1262(8 downto 0) <= "000000000";
    tmp_141_cast_reg_1275(8 downto 0) <= "000000000";
    tmp_141_cast_reg_1275(19) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_319_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_369_p2, tmp_s_reg_1191, ap_CS_fsm_state5, exitcond_fu_417_p2, tmp_100_fu_454_p2, ap_CS_fsm_state6, tmp_102_fu_460_p2, or_cond_fu_648_p2, ap_CS_fsm_state20, ap_CS_fsm_state30, tmp_86_fu_750_p3, tmp_95_reg_1270, tmp_103_fu_802_p2, ap_CS_fsm_state31, tmp_101_fu_794_p3, ap_CS_fsm_state38, or_cond4_fu_1034_p2, ap_CS_fsm_state45, exitcond2_fu_343_p2, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_319_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_343_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_369_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_417_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((tmp_102_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_100_fu_454_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_102_fu_460_p2 = ap_const_lv1_1) and (tmp_100_fu_454_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((tmp_s_reg_1191 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((or_cond_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (tmp_86_fu_750_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_101_fu_794_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                elsif (((tmp_101_fu_794_p3 = ap_const_lv1_0) and (tmp_103_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((tmp_95_reg_1270 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((or_cond4_fu_1034_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30, tmp_86_fu_750_p3)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (tmp_86_fu_750_p3 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_x1_assign_1_phi_fu_227_p4 <= x1_assign_1_reg_223;

    ap_ready_assign_proc : process(ap_CS_fsm_state30, tmp_86_fu_750_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (tmp_86_fu_750_p3 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_369_p2 <= "1" when (y1_assign_reg_188 = ap_const_lv10_200) else "0";
    exitcond2_fu_343_p2 <= "1" when (j_reg_177 = ap_const_lv10_200) else "0";
    exitcond3_fu_319_p2 <= "1" when (i_reg_166 = ap_const_lv10_200) else "0";
    exitcond_fu_417_p2 <= "1" when (x1_assign_reg_199 = ap_const_lv10_200) else "0";

    grp_fu_235_p0_assign_proc : process(reg_274, reg_288, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_235_p0 <= reg_288;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_235_p0 <= reg_274;
        else 
            grp_fu_235_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_243_p0_assign_proc : process(outputImage_q0, outputImage_q1, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state46, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_243_p0 <= outputImage_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_243_p0 <= outputImage_q0;
        else 
            grp_fu_243_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_248_p0_assign_proc : process(reg_281, reg_295, ap_CS_fsm_state20, ap_CS_fsm_state38, ap_CS_fsm_state45, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_248_p0 <= reg_295;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_248_p0 <= reg_281;
        else 
            grp_fu_248_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_248_p1_assign_proc : process(reg_274, reg_288, ap_CS_fsm_state20, ap_CS_fsm_state38, ap_CS_fsm_state45, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_248_p1 <= reg_288;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_248_p1 <= reg_274;
        else 
            grp_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_261_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(x1_assign_reg_199));

    grp_fu_267_p1_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state45, ap_phi_mux_x1_assign_1_phi_fu_227_p4, x1_assign_1_reg_223)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_267_p1 <= x1_assign_1_reg_223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_267_p1 <= ap_phi_mux_x1_assign_1_phi_fu_227_p4;
        else 
            grp_fu_267_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_267_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(grp_fu_267_p1));
    i_13_fu_325_p2 <= std_logic_vector(unsigned(i_reg_166) + unsigned(ap_const_lv10_1));
    j_12_fu_349_p2 <= std_logic_vector(unsigned(j_reg_177) + unsigned(ap_const_lv10_1));
    morphOpening_address0 <= tmp_142_cast_fu_438_p1(18 - 1 downto 0);

    morphOpening_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            morphOpening_ce0 <= ap_const_logic_1;
        else 
            morphOpening_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs10_fu_1102_p2 <= "0" when (tmp_92_fu_1070_p4 = ap_const_lv11_7FF) else "1";
    notlhs11_fu_1120_p2 <= "0" when (tmp_94_fu_1088_p4 = ap_const_lv11_7FF) else "1";
    notlhs1_fu_878_p2 <= "0" when (tmp_56_fu_846_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_896_p2 <= "0" when (tmp_58_fu_864_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_986_p2 <= "0" when (tmp_74_fu_954_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_1004_p2 <= "0" when (tmp_76_fu_972_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_720_p2 <= "0" when (tmp_85_fu_688_p4 = ap_const_lv11_7FF) else "1";
    notlhs6_fu_516_p2 <= "0" when (tmp_47_fu_484_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_600_p2 <= "0" when (tmp_65_fu_568_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_534_p2 <= "0" when (tmp_49_fu_502_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_618_p2 <= "0" when (tmp_67_fu_586_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_702_p2 <= "0" when (tmp_83_fu_670_p4 = ap_const_lv11_7FF) else "1";
    notrhs10_fu_1108_p2 <= "1" when (tmp_140_fu_1080_p1 = ap_const_lv52_0) else "0";
    notrhs11_fu_1126_p2 <= "1" when (tmp_141_fu_1098_p1 = ap_const_lv52_0) else "0";
    notrhs1_fu_902_p2 <= "1" when (tmp_114_fu_874_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_624_p2 <= "1" when (tmp_118_fu_596_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_992_p2 <= "1" when (tmp_133_fu_964_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_1010_p2 <= "1" when (tmp_134_fu_982_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_522_p2 <= "1" when (tmp_107_fu_494_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_726_p2 <= "1" when (tmp_137_fu_698_p1 = ap_const_lv52_0) else "0";
    notrhs7_fu_540_p2 <= "1" when (tmp_108_fu_512_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_606_p2 <= "1" when (tmp_116_fu_578_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_884_p2 <= "1" when (tmp_113_fu_856_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_708_p2 <= "1" when (tmp_136_fu_680_p1 = ap_const_lv52_0) else "0";
    or_cond4_fu_1034_p2 <= (tmp_95_reg_1270 and tmp_103_reg_1284);
    or_cond_fu_648_p2 <= (tmp_s_reg_1191 and tmp_102_reg_1230);

    outputImage_address0_assign_proc : process(ap_CS_fsm_state3, outputImage_addr_1_reg_1215, tmp_100_fu_454_p2, ap_CS_fsm_state6, tmp_102_fu_460_p2, ap_CS_fsm_state20, ap_CS_fsm_state36, ap_CS_fsm_state38, outputImage_addr_7_reg_1313, ap_CS_fsm_state45, outputImage_addr_10_reg_1331, tmp_136_cast_fu_364_p1, tmp_144_cast_fu_475_p1, tmp_149_cast_fu_661_p1, tmp_146_cast_fu_837_p1, tmp_147_cast_fu_935_p1, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            outputImage_address0 <= outputImage_addr_10_reg_1331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            outputImage_address0 <= outputImage_addr_7_reg_1313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            outputImage_address0 <= tmp_147_cast_fu_935_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            outputImage_address0 <= tmp_146_cast_fu_837_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            outputImage_address0 <= tmp_149_cast_fu_661_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_102_fu_460_p2 = ap_const_lv1_1) and (tmp_100_fu_454_p2 = ap_const_lv1_1))) then 
            outputImage_address0 <= tmp_144_cast_fu_475_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_100_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            outputImage_address0 <= outputImage_addr_1_reg_1215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outputImage_address0 <= tmp_136_cast_fu_364_p1(18 - 1 downto 0);
        else 
            outputImage_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outputImage_address1_assign_proc : process(outputImage_addr_1_reg_1215, outputImage_addr_5_reg_1221, ap_CS_fsm_state20, ap_CS_fsm_state31, outputImage_addr_3_reg_1299, ap_CS_fsm_state38, outputImage_addr_7_reg_1313, ap_CS_fsm_state45, outputImage_addr_10_reg_1331, ap_CS_fsm_state54, ap_CS_fsm_state29, tmp_145_cast_fu_817_p1, tmp_150_cast_fu_1047_p1, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state26, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            outputImage_address1 <= outputImage_addr_10_reg_1331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            outputImage_address1 <= tmp_150_cast_fu_1047_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            outputImage_address1 <= outputImage_addr_7_reg_1313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            outputImage_address1 <= outputImage_addr_3_reg_1299;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            outputImage_address1 <= tmp_145_cast_fu_817_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            outputImage_address1 <= outputImage_addr_1_reg_1215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outputImage_address1 <= outputImage_addr_5_reg_1221;
        else 
            outputImage_address1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outputImage_ce0_assign_proc : process(ap_CS_fsm_state3, tmp_100_fu_454_p2, ap_CS_fsm_state6, tmp_102_fu_460_p2, ap_CS_fsm_state20, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state45, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_100_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_102_fu_460_p2 = ap_const_lv1_1) and (tmp_100_fu_454_p2 = ap_const_lv1_1)))) then 
            outputImage_ce0 <= ap_const_logic_1;
        else 
            outputImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outputImage_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state45, ap_CS_fsm_state54, ap_CS_fsm_state29, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state26, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            outputImage_ce1 <= ap_const_logic_1;
        else 
            outputImage_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outputImage_d0_assign_proc : process(reg_281, reg_295, ap_CS_fsm_state3, tmp_100_fu_454_p2, ap_CS_fsm_state6, ap_CS_fsm_state45, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            outputImage_d0 <= reg_295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outputImage_d0 <= reg_281;
        elsif (((tmp_100_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            outputImage_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outputImage_d0 <= ap_const_lv32_49742400;
        else 
            outputImage_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outputImage_d1_assign_proc : process(reg_281, reg_295, reg_314, ap_CS_fsm_state20, ap_CS_fsm_state38, ap_CS_fsm_state54, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            outputImage_d1 <= reg_281;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            outputImage_d1 <= reg_314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            outputImage_d1 <= reg_295;
        else 
            outputImage_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    outputImage_load_1_t_fu_498_p1 <= reg_274;
    outputImage_load_3_t_fu_860_p1 <= reg_274;
    outputImage_load_5_t_fu_582_p1 <= reg_288;
    outputImage_load_7_t_fu_968_p1 <= reg_288;

    outputImage_we0_assign_proc : process(ap_CS_fsm_state3, tmp_100_fu_454_p2, ap_CS_fsm_state6, tmp_102_reg_1230, tmp_95_reg_1270, ap_CS_fsm_state45, exitcond2_fu_343_p2, ap_CS_fsm_state13, tmp_55_fu_558_p2, tmp_82_fu_1028_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_55_fu_558_p2 = ap_const_lv1_1) and (tmp_102_reg_1230 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_82_fu_1028_p2 = ap_const_lv1_1) and (tmp_95_reg_1270 = ap_const_lv1_1)) or ((tmp_100_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((exitcond2_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outputImage_we0 <= ap_const_logic_1;
        else 
            outputImage_we0 <= ap_const_logic_0;
        end if; 
    end process;


    outputImage_we1_assign_proc : process(tmp_s_reg_1191, tmp_100_reg_1226, or_cond_reg_1246, ap_CS_fsm_state20, tmp_91_reg_1255, tmp_103_reg_1284, ap_CS_fsm_state38, or_cond4_reg_1322, tmp_130_reg_1337, ap_CS_fsm_state54, ap_CS_fsm_state29, tmp_73_fu_642_p2, tmp_64_fu_920_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state29) and (tmp_91_reg_1255 = ap_const_lv1_1) and (or_cond_reg_1246 = ap_const_lv1_1) and (tmp_100_reg_1226 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (tmp_130_reg_1337 = ap_const_lv1_1) and (or_cond4_reg_1322 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_64_fu_920_p2 = ap_const_lv1_1) and (tmp_103_reg_1284 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_73_fu_642_p2 = ap_const_lv1_1) and (tmp_s_reg_1191 = ap_const_lv1_1)))) then 
            outputImage_we1 <= ap_const_logic_1;
        else 
            outputImage_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_454_p2 <= "1" when (morphOpening_q0 = ap_const_lv8_0) else "0";
    tmp_101_fu_794_p3 <= x1_assign_1_reg_223(9 downto 9);
    tmp_102_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_assign_reg_199),20));
    tmp_102_fu_460_p2 <= "0" when (x1_assign_reg_199 = ap_const_lv10_0) else "1";
    tmp_103_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_381_p3),20));
    tmp_103_fu_802_p2 <= "0" when (x1_assign_1_reg_223 = ap_const_lv10_1FF) else "1";
    tmp_105_fu_470_p2 <= std_logic_vector(unsigned(tmp_103_cast_reg_1185) + unsigned(tmp_109_cast_fu_466_p1));
    tmp_107_fu_494_p1 <= tmp_155_to_int_fu_480_p1(23 - 1 downto 0);
    tmp_108_fu_512_p1 <= outputImage_load_1_t_fu_498_p1(23 - 1 downto 0);
    tmp_109_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_261_p2),20));
    tmp_110_fu_812_p2 <= std_logic_vector(signed(tmp_139_cast_reg_1262) + signed(tmp_112_cast_fu_808_p1));
    tmp_112_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_267_p2),20));
    tmp_112_fu_832_p2 <= std_logic_vector(signed(tmp_139_cast_reg_1262) + signed(tmp_114_cast_fu_828_p1));
    tmp_113_fu_856_p1 <= tmp_159_to_int_fu_842_p1(23 - 1 downto 0);
    tmp_114_cast_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_assign_1_reg_223),20));
    tmp_114_fu_874_p1 <= outputImage_load_3_t_fu_860_p1(23 - 1 downto 0);
    tmp_116_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_assign_1_reg_223),20));
    tmp_116_fu_578_p1 <= tmp_162_to_int_fu_564_p1(23 - 1 downto 0);
    tmp_118_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_261_p2),20));
    tmp_118_fu_596_p1 <= outputImage_load_5_t_fu_582_p1(23 - 1 downto 0);
    tmp_122_cast_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_267_p2),20));
    tmp_122_fu_930_p2 <= std_logic_vector(unsigned(tmp_141_cast_reg_1275) + unsigned(tmp_116_cast_fu_926_p1));
    tmp_125_cast_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x1_assign_1_reg_223),20));
    tmp_125_fu_940_p2 <= std_logic_vector(signed(tmp_139_cast_reg_1262) + signed(tmp_116_cast_fu_926_p1));
    tmp_127_fu_1132_p2 <= (notrhs11_fu_1126_p2 or notlhs11_fu_1120_p2);
    tmp_128_fu_1138_p2 <= (tmp_96_fu_1114_p2 and tmp_127_fu_1132_p2);
    tmp_130_fu_1144_p2 <= (tmp_128_fu_1138_p2 and grp_fu_257_p2);
    tmp_133_fu_964_p1 <= tmp_165_to_int_fu_950_p1(23 - 1 downto 0);
    tmp_134_fu_982_p1 <= outputImage_load_7_t_fu_968_p1(23 - 1 downto 0);
        tmp_135_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_77_fu_405_p3),20));

    tmp_135_fu_656_p2 <= std_logic_vector(signed(tmp_135_cast_reg_1196) + signed(tmp_118_cast_fu_652_p1));
    tmp_136_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_359_p2),64));
    tmp_136_fu_680_p1 <= tmp_170_to_int_fu_666_p1(52 - 1 downto 0);
    tmp_137_fu_698_p1 <= tmp_171_to_int_fu_684_p1(52 - 1 downto 0);
    tmp_138_fu_1042_p2 <= std_logic_vector(unsigned(tmp_141_cast_reg_1275) + unsigned(tmp_122_cast_fu_1038_p1));
        tmp_139_cast_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_93_fu_758_p3),20));

    tmp_139_fu_1056_p2 <= std_logic_vector(signed(tmp_139_cast_reg_1262) + signed(tmp_125_cast_fu_1052_p1));
    tmp_140_fu_1080_p1 <= tmp_176_to_int_fu_1066_p1(52 - 1 downto 0);
    tmp_141_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_782_p3),20));
    tmp_141_fu_1098_p1 <= tmp_178_to_int_fu_1084_p1(52 - 1 downto 0);
    tmp_142_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_433_p2),64));
        tmp_143_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_99_fu_444_p2),64));

    tmp_144_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_470_p2),64));
    tmp_145_cast_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_fu_812_p2),64));
    tmp_146_cast_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_fu_832_p2),64));
    tmp_147_cast_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_122_fu_930_p2),64));
    tmp_148_cast_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_125_fu_940_p2),64));
        tmp_149_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_135_fu_656_p2),64));

    tmp_150_cast_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_1042_p2),64));
    tmp_151_cast_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_fu_1056_p2),64));
    tmp_155_to_int_fu_480_p1 <= reg_281;
    tmp_159_to_int_fu_842_p1 <= reg_281;
    tmp_162_to_int_fu_564_p1 <= reg_295;
    tmp_165_to_int_fu_950_p1 <= reg_295;
    tmp_170_to_int_fu_666_p1 <= reg_308;
    tmp_171_to_int_fu_684_p1 <= reg_302;
    tmp_176_to_int_fu_1066_p1 <= reg_308;
    tmp_178_to_int_fu_1084_p1 <= reg_302;
    tmp_47_fu_484_p4 <= tmp_155_to_int_fu_480_p1(30 downto 23);
    tmp_49_fu_502_p4 <= outputImage_load_1_t_fu_498_p1(30 downto 23);
    tmp_51_fu_528_p2 <= (notrhs5_fu_522_p2 or notlhs6_fu_516_p2);
    tmp_52_fu_546_p2 <= (notrhs7_fu_540_p2 or notlhs8_fu_534_p2);
    tmp_53_fu_552_p2 <= (tmp_52_fu_546_p2 and tmp_51_fu_528_p2);
    tmp_55_fu_558_p2 <= (tmp_53_fu_552_p2 and grp_fu_248_p2);
    tmp_56_fu_846_p4 <= tmp_159_to_int_fu_842_p1(30 downto 23);
    tmp_58_fu_864_p4 <= outputImage_load_3_t_fu_860_p1(30 downto 23);
    tmp_60_fu_890_p2 <= (notrhs9_fu_884_p2 or notlhs1_fu_878_p2);
    tmp_61_fu_908_p2 <= (notrhs1_fu_902_p2 or notlhs2_fu_896_p2);
    tmp_62_fu_914_p2 <= (tmp_61_fu_908_p2 and tmp_60_fu_890_p2);
    tmp_64_fu_920_p2 <= (tmp_62_fu_914_p2 and grp_fu_248_p2);
    tmp_65_fu_568_p4 <= tmp_162_to_int_fu_564_p1(30 downto 23);
    tmp_67_fu_586_p4 <= outputImage_load_5_t_fu_582_p1(30 downto 23);
    tmp_69_fu_612_p2 <= (notrhs8_fu_606_p2 or notlhs7_fu_600_p2);
    tmp_70_fu_630_p2 <= (notrhs2_fu_624_p2 or notlhs9_fu_618_p2);
    tmp_71_fu_636_p2 <= (tmp_70_fu_630_p2 and tmp_69_fu_612_p2);
    tmp_73_fu_642_p2 <= (tmp_71_fu_636_p2 and grp_fu_248_p2);
    tmp_74_fu_954_p4 <= tmp_165_to_int_fu_950_p1(30 downto 23);
    tmp_75_fu_381_p3 <= (y1_assign_reg_188 & ap_const_lv9_0);
    tmp_76_fu_972_p4 <= outputImage_load_7_t_fu_968_p1(30 downto 23);
    tmp_77_fu_405_p3 <= (y2_assign_fu_399_p2 & ap_const_lv9_0);
    tmp_78_fu_998_p2 <= (notrhs3_fu_992_p2 or notlhs3_fu_986_p2);
    tmp_79_fu_1016_p2 <= (notrhs4_fu_1010_p2 or notlhs4_fu_1004_p2);
    tmp_80_fu_1022_p2 <= (tmp_79_fu_1016_p2 and tmp_78_fu_998_p2);
    tmp_82_fu_1028_p2 <= (tmp_80_fu_1022_p2 and grp_fu_248_p2);
    tmp_83_fu_670_p4 <= tmp_170_to_int_fu_666_p1(62 downto 52);
    tmp_84_fu_359_p2 <= std_logic_vector(unsigned(tmp_98_cast_reg_1164) + unsigned(tmp_97_cast_fu_355_p1));
    tmp_85_fu_688_p4 <= tmp_171_to_int_fu_684_p1(62 downto 52);
    tmp_86_fu_750_p3 <= y1_assign_1_reg_211(9 downto 9);
    tmp_87_fu_714_p2 <= (notrhs_fu_708_p2 or notlhs_fu_702_p2);
    tmp_88_fu_732_p2 <= (notrhs6_fu_726_p2 or notlhs5_fu_720_p2);
    tmp_89_fu_738_p2 <= (tmp_88_fu_732_p2 and tmp_87_fu_714_p2);
    tmp_91_fu_744_p2 <= (tmp_89_fu_738_p2 and grp_fu_257_p2);
    tmp_92_fu_1070_p4 <= tmp_176_to_int_fu_1066_p1(62 downto 52);
    tmp_93_fu_758_p3 <= (y1_assign_1_reg_211 & ap_const_lv9_0);
    tmp_94_fu_1088_p4 <= tmp_178_to_int_fu_1084_p1(62 downto 52);
    tmp_95_fu_770_p2 <= "0" when (y1_assign_1_reg_211 = ap_const_lv10_1FF) else "1";
    tmp_96_fu_1114_p2 <= (notrhs10_fu_1108_p2 or notlhs10_fu_1102_p2);
    tmp_97_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_177),20));
    tmp_97_fu_782_p3 <= (y2_assign_1_fu_776_p2 & ap_const_lv9_0);
    tmp_98_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_331_p3),20));
    tmp_98_fu_433_p2 <= std_logic_vector(unsigned(tmp_103_cast_reg_1185) + unsigned(tmp_102_cast_fu_429_p1));
    tmp_99_fu_444_p2 <= std_logic_vector(signed(tmp_135_cast_reg_1196) + signed(tmp_102_cast_fu_429_p1));
    tmp_fu_331_p3 <= (i_reg_166 & ap_const_lv9_0);
    tmp_s_fu_393_p2 <= "0" when (y1_assign_reg_188 = ap_const_lv10_0) else "1";
    x_2_fu_423_p2 <= std_logic_vector(unsigned(x1_assign_reg_199) + unsigned(ap_const_lv10_1));
    x_fu_1150_p2 <= std_logic_vector(unsigned(x1_assign_1_reg_223) + unsigned(ap_const_lv10_3FF));
    y2_assign_1_fu_776_p2 <= std_logic_vector(unsigned(y1_assign_1_reg_211) + unsigned(ap_const_lv10_1));
    y2_assign_fu_399_p2 <= std_logic_vector(unsigned(y1_assign_reg_188) + unsigned(ap_const_lv10_3FF));
    y_2_fu_822_p2 <= std_logic_vector(unsigned(y1_assign_1_reg_211) + unsigned(ap_const_lv10_3FF));
    y_fu_375_p2 <= std_logic_vector(unsigned(y1_assign_reg_188) + unsigned(ap_const_lv10_1));
end behav;
