-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity thresholdOtsu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of thresholdOtsu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_101 : STD_LOGIC_VECTOR (8 downto 0) := "100000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal variance_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal variance_ce0 : STD_LOGIC;
    signal variance_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvarinc_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_4_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_652 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_39_cast_fu_354_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_39_cast_reg_657 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond7_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_364_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_4_reg_665 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond6_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal histogram_addr_1_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal histogram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal histogram_load_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal indvarinc1_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal indvarinc2_fu_412_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_6_fu_430_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_reg_704 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mean_addr_1_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_5_fu_452_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_5_reg_722 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next_fu_458_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal mean_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_load_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal threshold_2_cast3_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_2_cast3_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_5_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_5_reg_760 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_variance_2_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_8_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal max_variance_1_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal threshold_1_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_fu_587_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_reg_795 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_44_cast_fu_601_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_44_cast_reg_800 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_611_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_6_reg_808 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_49_cast_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_cast_reg_813 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal histogram_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal histogram_ce0 : STD_LOGIC;
    signal histogram_we0 : STD_LOGIC;
    signal histogram_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mean_ce0 : STD_LOGIC;
    signal mean_we0 : STD_LOGIC;
    signal mean_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_165 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_176 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal invdar1_reg_187 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar2_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_209 : STD_LOGIC_VECTOR (8 downto 0);
    signal i2_reg_221 : STD_LOGIC_VECTOR (8 downto 0);
    signal j3_reg_232 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal max_variance_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_2_reg_267 : STD_LOGIC_VECTOR (8 downto 0);
    signal i5_reg_278 : STD_LOGIC_VECTOR (9 downto 0);
    signal j6_reg_289 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_346_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_29_cast_fu_370_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_33_fu_374_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal max_variance_2_to_in_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_variance_to_int_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_488_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_498_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_516_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_593_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_45_cast_fu_617_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_43_fu_621_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_44_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component imageProcessing_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageProcessing_sitofp_32ns_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageProcessing_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component thresholdOtsu_variance IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component thresholdOtsu_histogram IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    variance_U : component thresholdOtsu_variance
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => variance_address0,
        ce0 => variance_ce0,
        q0 => variance_q0);

    histogram_U : component thresholdOtsu_histogram
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => histogram_address0,
        ce0 => histogram_ce0,
        we0 => histogram_we0,
        d0 => histogram_d0,
        q0 => histogram_q0);

    mean_U : component thresholdOtsu_histogram
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_address0,
        ce0 => mean_ce0,
        we0 => mean_we0,
        d0 => mean_d0,
        q0 => mean_q0);

    imageProcessing_fadd_32ns_32ns_32_5_full_dsp_1_U13 : component imageProcessing_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mean_load_reg_742,
        din1 => tmp_40_reg_737,
        ce => ap_const_logic_1,
        dout => grp_fu_300_p2);

    imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1_U14 : component imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_37_reg_732,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_304_p2);

    imageProcessing_sitofp_32ns_32_5_1_U15 : component imageProcessing_sitofp_32ns_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_309_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p1);

    imageProcessing_fcmp_32ns_32ns_1_1_1_U16 : component imageProcessing_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => max_variance_2_reg_770,
        din1 => max_variance_reg_243,
        opcode => ap_const_lv5_2,
        dout => tmp_8_fu_312_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i2_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_34_fu_418_p2 = ap_const_lv1_1))) then 
                i2_reg_221 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond3_fu_446_p2 = ap_const_lv1_1))) then 
                i2_reg_221 <= i_6_reg_704;
            end if; 
        end if;
    end process;

    i5_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond2_fu_468_p2 = ap_const_lv1_1))) then 
                i5_reg_278 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_fu_605_p2 = ap_const_lv1_1))) then 
                i5_reg_278 <= i_7_reg_795;
            end if; 
        end if;
    end process;

    i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_328_p2 = ap_const_lv1_1))) then 
                i_reg_165 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_358_p2 = ap_const_lv1_1))) then 
                i_reg_165 <= i_4_reg_652;
            end if; 
        end if;
    end process;

    indvars_iv_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_34_fu_418_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_209 <= ap_const_lv9_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond3_fu_446_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_209 <= indvars_iv_next_fu_458_p2;
            end if; 
        end if;
    end process;

    invdar1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                invdar1_reg_187 <= ap_const_lv8_0;
            elsif (((tmp_32_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                invdar1_reg_187 <= indvarinc1_fu_395_p2;
            end if; 
        end if;
    end process;

    invdar2_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_32_fu_406_p2 = ap_const_lv1_1))) then 
                invdar2_reg_198 <= ap_const_lv8_0;
            elsif (((tmp_34_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                invdar2_reg_198 <= indvarinc2_fu_412_p2;
            end if; 
        end if;
    end process;

    invdar_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_154 <= indvarinc_fu_317_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_154 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j3_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j3_reg_232 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j3_reg_232 <= j_5_reg_722;
            end if; 
        end if;
    end process;

    j6_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                j6_reg_289 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                j6_reg_289 <= j_6_reg_808;
            end if; 
        end if;
    end process;

    j_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_176 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_176 <= j_4_reg_665;
            end if; 
        end if;
    end process;

    max_variance_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond4_fu_424_p2 = ap_const_lv1_1))) then 
                max_variance_reg_243 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                max_variance_reg_243 <= max_variance_1_fu_567_p3;
            end if; 
        end if;
    end process;

    threshold_2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond4_fu_424_p2 = ap_const_lv1_1))) then 
                threshold_2_reg_267 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                threshold_2_reg_267 <= i_5_reg_760;
            end if; 
        end if;
    end process;

    threshold_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond4_fu_424_p2 = ap_const_lv1_1))) then 
                threshold_reg_255 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                threshold_reg_255 <= threshold_1_fu_574_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                histogram_addr_1_reg_675 <= tmp_30_fu_384_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                histogram_load_reg_680 <= histogram_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_4_reg_652 <= i_4_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_5_reg_760 <= i_5_fu_474_p2;
                    threshold_2_cast3_reg_752(8 downto 0) <= threshold_2_cast3_fu_464_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_6_reg_704 <= i_6_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_7_reg_795 <= i_7_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_4_reg_665 <= j_4_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_5_reg_722 <= j_5_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                j_6_reg_808 <= j_6_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                max_variance_2_reg_770 <= variance_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                mean_addr_1_reg_709 <= tmp_35_fu_436_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mean_load_reg_742 <= mean_q0;
                tmp_40_reg_737 <= grp_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_37_reg_732 <= grp_fu_309_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_39_cast_reg_657(18 downto 9) <= tmp_39_cast_fu_354_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_41_reg_747 <= grp_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    tmp_44_cast_reg_800(18 downto 9) <= tmp_44_cast_fu_601_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_45_reg_823 <= tmp_45_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_605_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    tmp_49_cast_reg_813(19 downto 0) <= tmp_49_cast_fu_626_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_8_reg_777 <= tmp_8_fu_312_p2;
            end if;
        end if;
    end process;
    tmp_39_cast_reg_657(8 downto 0) <= "000000000";
    tmp_39_cast_reg_657(19) <= '0';
    threshold_2_cast3_reg_752(31 downto 9) <= "00000000000000000000000";
    tmp_44_cast_reg_800(8 downto 0) <= "000000000";
    tmp_44_cast_reg_800(19) <= '0';
    tmp_49_cast_reg_813(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond7_fu_334_p2, ap_CS_fsm_state4, exitcond6_fu_358_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, exitcond4_fu_424_p2, ap_CS_fsm_state11, exitcond3_fu_446_p2, ap_CS_fsm_state26, exitcond2_fu_468_p2, ap_CS_fsm_state30, exitcond1_fu_581_p2, ap_CS_fsm_state31, exitcond_fu_605_p2, tmp_s_fu_328_p2, tmp_32_fu_406_p2, tmp_34_fu_418_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_328_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond7_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_358_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_32_fu_406_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_34_fu_418_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond4_fu_424_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond3_fu_446_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond2_fu_468_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond1_fu_581_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_fu_605_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30, exitcond1_fu_581_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond1_fu_581_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, exitcond1_fu_581_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond1_fu_581_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= tmp_49_cast_reg_813(18 - 1 downto 0);

    dst_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= tmp_45_reg_823;

    dst_we0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_581_p2 <= "1" when (i5_reg_278 = ap_const_lv10_200) else "0";
    exitcond2_fu_468_p2 <= "1" when (threshold_2_reg_267 = ap_const_lv9_100) else "0";
    exitcond3_fu_446_p2 <= "1" when (j3_reg_232 = indvars_iv_reg_209) else "0";
    exitcond4_fu_424_p2 <= "1" when (indvars_iv_reg_209 = ap_const_lv9_101) else "0";
    exitcond6_fu_358_p2 <= "1" when (j_reg_176 = ap_const_lv10_200) else "0";
    exitcond7_fu_334_p2 <= "1" when (i_reg_165 = ap_const_lv10_200) else "0";
    exitcond_fu_605_p2 <= "1" when (j6_reg_289 = ap_const_lv10_200) else "0";
    grp_fu_309_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_232),32));

    histogram_address0_assign_proc : process(ap_CS_fsm_state2, histogram_addr_1_reg_675, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_fu_323_p1, tmp_30_fu_384_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            histogram_address0 <= histogram_addr_1_reg_675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            histogram_address0 <= tmp_30_fu_384_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            histogram_address0 <= tmp_fu_323_p1(8 - 1 downto 0);
        else 
            histogram_address0 <= "XXXXXXXX";
        end if; 
    end process;


    histogram_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            histogram_ce0 <= ap_const_logic_1;
        else 
            histogram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    histogram_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, tmp_31_fu_389_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            histogram_d0 <= tmp_31_fu_389_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            histogram_d0 <= ap_const_lv32_0;
        else 
            histogram_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    histogram_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            histogram_we0 <= ap_const_logic_1;
        else 
            histogram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_4_fu_340_p2 <= std_logic_vector(unsigned(i_reg_165) + unsigned(ap_const_lv10_1));
    i_5_fu_474_p2 <= std_logic_vector(unsigned(threshold_2_reg_267) + unsigned(ap_const_lv9_1));
    i_6_fu_430_p2 <= std_logic_vector(unsigned(i2_reg_221) + unsigned(ap_const_lv9_1));
    i_7_fu_587_p2 <= std_logic_vector(unsigned(i5_reg_278) + unsigned(ap_const_lv10_1));
    indvarinc1_fu_395_p2 <= std_logic_vector(unsigned(invdar1_reg_187) + unsigned(ap_const_lv8_1));
    indvarinc2_fu_412_p2 <= std_logic_vector(unsigned(invdar2_reg_198) + unsigned(ap_const_lv8_1));
    indvarinc_fu_317_p2 <= std_logic_vector(unsigned(invdar_reg_154) + unsigned(ap_const_lv8_1));
    indvars_iv_next_fu_458_p2 <= std_logic_vector(unsigned(indvars_iv_reg_209) + unsigned(ap_const_lv9_1));
    j_4_fu_364_p2 <= std_logic_vector(unsigned(j_reg_176) + unsigned(ap_const_lv10_1));
    j_5_fu_452_p2 <= std_logic_vector(unsigned(j3_reg_232) + unsigned(ap_const_lv9_1));
    j_6_fu_611_p2 <= std_logic_vector(unsigned(j6_reg_289) + unsigned(ap_const_lv10_1));
    max_variance_1_fu_567_p3 <= 
        max_variance_2_reg_770 when (tmp_9_fu_562_p2(0) = '1') else 
        max_variance_reg_243;
    max_variance_2_to_in_fu_485_p1 <= max_variance_2_reg_770;
    max_variance_to_int_fu_502_p1 <= max_variance_reg_243;

    mean_address0_assign_proc : process(ap_CS_fsm_state8, mean_addr_1_reg_709, ap_CS_fsm_state25, tmp_28_fu_401_p1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            mean_address0 <= mean_addr_1_reg_709;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mean_address0 <= tmp_28_fu_401_p1(8 - 1 downto 0);
        else 
            mean_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mean_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mean_ce0 <= ap_const_logic_1;
        else 
            mean_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mean_d0_assign_proc : process(ap_CS_fsm_state8, tmp_41_reg_747, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            mean_d0 <= tmp_41_reg_747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mean_d0 <= ap_const_lv32_0;
        else 
            mean_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mean_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mean_we0 <= ap_const_logic_1;
        else 
            mean_we0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs1_fu_538_p2 <= "0" when (tmp_3_fu_506_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_520_p2 <= "0" when (tmp_1_fu_488_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_544_p2 <= "1" when (tmp_39_fu_516_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_526_p2 <= "1" when (tmp_38_fu_498_p1 = ap_const_lv23_0) else "0";

    src_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state31, tmp_49_cast_fu_626_p1, tmp_40_cast_fu_379_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            src_address0 <= tmp_49_cast_fu_626_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address0 <= tmp_40_cast_fu_379_p1(18 - 1 downto 0);
        else 
            src_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshold_1_fu_574_p3 <= 
        threshold_2_cast3_reg_752 when (tmp_9_fu_562_p2(0) = '1') else 
        threshold_reg_255;
    threshold_2_cast3_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(threshold_2_reg_267),32));
    tmp_1_fu_488_p4 <= max_variance_2_to_in_fu_485_p1(30 downto 23);
    tmp_28_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_187),64));
    tmp_29_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_176),20));
    tmp_29_fu_346_p3 <= (i_reg_165 & ap_const_lv9_0);
    tmp_30_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_q0),64));
    tmp_31_fu_389_p2 <= std_logic_vector(unsigned(histogram_load_reg_680) + unsigned(ap_const_lv32_1));
    tmp_32_fu_406_p2 <= "1" when (invdar1_reg_187 = ap_const_lv8_FF) else "0";
    tmp_33_fu_374_p2 <= std_logic_vector(unsigned(tmp_39_cast_reg_657) + unsigned(tmp_29_cast_fu_370_p1));
    tmp_34_fu_418_p2 <= "1" when (invdar2_reg_198 = ap_const_lv8_FF) else "0";
    tmp_35_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_221),64));
    tmp_36_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(threshold_2_reg_267),64));
    tmp_38_fu_498_p1 <= max_variance_2_to_in_fu_485_p1(23 - 1 downto 0);
    tmp_39_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_346_p3),20));
    tmp_39_fu_516_p1 <= max_variance_to_int_fu_502_p1(23 - 1 downto 0);
    tmp_3_fu_506_p4 <= max_variance_to_int_fu_502_p1(30 downto 23);
    tmp_40_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_374_p2),64));
    tmp_42_fu_593_p3 <= (i5_reg_278 & ap_const_lv9_0);
    tmp_43_fu_621_p2 <= std_logic_vector(unsigned(tmp_45_cast_fu_617_p1) + unsigned(tmp_44_cast_reg_800));
    tmp_44_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_593_p3),20));
    tmp_44_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_q0),32));
    tmp_45_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_reg_289),20));
    tmp_45_fu_635_p2 <= "1" when (signed(tmp_44_fu_631_p1) > signed(threshold_reg_255)) else "0";
    tmp_49_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_621_p2),64));
    tmp_5_fu_532_p2 <= (notrhs_fu_526_p2 or notlhs_fu_520_p2);
    tmp_6_fu_550_p2 <= (notrhs1_fu_544_p2 or notlhs1_fu_538_p2);
    tmp_7_fu_556_p2 <= (tmp_6_fu_550_p2 and tmp_5_fu_532_p2);
    tmp_9_fu_562_p2 <= (tmp_8_reg_777 and tmp_7_fu_556_p2);
    tmp_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_154),64));
    tmp_s_fu_328_p2 <= "1" when (invdar_reg_154 = ap_const_lv8_FF) else "0";
    variance_address0 <= tmp_36_fu_480_p1(8 - 1 downto 0);

    variance_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            variance_ce0 <= ap_const_logic_1;
        else 
            variance_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
