-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RGBtoGray_512_512_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_g_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    input_g_ce0 : OUT STD_LOGIC;
    input_g_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_b_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    input_b_ce0 : OUT STD_LOGIC;
    input_b_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of RGBtoGray_512_512_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_40530FAE147AE147 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001010011000011111010111000010100011110101110000101000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_403D11EB851EB852 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000111101000100011110101110000101000111101011100001010010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table2_ce0 : STD_LOGIC;
    signal one_half_table2_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_198 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_18_fu_209_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_18_reg_522 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_191_cast_fu_223_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_191_cast_reg_527 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_17_fu_233_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_17_reg_535 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_192_cast_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_192_cast_reg_540 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_g_load_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_reg_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_170_fu_257_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_170_reg_572 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_173_reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_177_fu_265_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_177_reg_587 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_1_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_1_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_i_i_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_213_i_i_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_213_i_i_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_reg_619 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal one_half_reg_624 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_V_3_reg_629 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_V_4_fu_414_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_4_reg_635 : STD_LOGIC_VECTOR (51 downto 0);
    signal val_V_fu_511_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_V_reg_640 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_reg_164 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_175 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_214_i_i_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_195_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_215_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_cast_fu_239_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_fu_243_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_V_fu_277_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_fu_299_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_half_cast_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_2_fu_338_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_216_i_i_fu_342_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_180_fu_353_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_347_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_11_fu_322_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_12_fu_363_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp_v_fu_371_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_1_fu_392_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_11_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_V_fu_418_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_i_cast4_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_434_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_448_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_440_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_453_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_457_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_8_cast_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_cast_130_fu_473_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_2_cast_fu_427_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_i_i_i_129_fu_469_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal r_V_fu_477_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_185_fu_489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_483_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_181_fu_497_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_182_fu_501_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);

    component imageProcessing_dadd_64ns_64ns_64_6_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imageProcessing_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component imageProcessing_sitodp_32ns_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component RGBtoGray_512_512_2_mask_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component RGBtoGray_512_512_2_one_half_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;



begin
    mask_table1_U : component RGBtoGray_512_512_2_mask_table1
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);

    one_half_table2_U : component RGBtoGray_512_512_2_one_half_table2
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table2_address0,
        ce0 => one_half_table2_ce0,
        q0 => one_half_table2_q0);

    imageProcessing_dadd_64ns_64ns_64_6_full_dsp_1_U1 : component imageProcessing_dadd_64ns_64ns_64_6_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    imageProcessing_dmul_64ns_64ns_64_6_max_dsp_1_U2 : component imageProcessing_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_172_reg_562,
        din1 => ap_const_lv64_3FE2C8B439581062,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    imageProcessing_sitodp_32ns_64_5_1_U3 : component imageProcessing_sitodp_32ns_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_195_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_195_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_227_p2 = ap_const_lv1_1))) then 
                i_reg_164 <= i_18_reg_522;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_164 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_203_p2 = ap_const_lv1_0))) then 
                j_reg_175 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                j_reg_175 <= j_17_reg_535;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_18_reg_522 <= i_18_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_g_load_reg_552 <= input_g_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_17_reg_535 <= j_17_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                mask_reg_619 <= mask_table1_q0;
                one_half_reg_624 <= one_half_table2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_198 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                t_V_1_reg_592 <= t_V_1_fu_273_p1;
                tmp_213_i_i_reg_604 <= tmp_213_i_i_fu_293_p2;
                tmp_i_i_reg_598 <= tmp_i_i_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    tmp_170_reg_572(2 downto 0) <= tmp_170_fu_257_p3(2 downto 0);    tmp_170_reg_572(6) <= tmp_170_fu_257_p3(6);    tmp_170_reg_572(8) <= tmp_170_fu_257_p3(8);    tmp_170_reg_572(15 downto 13) <= tmp_170_fu_257_p3(15 downto 13);    tmp_170_reg_572(17) <= tmp_170_fu_257_p3(17);    tmp_170_reg_572(22 downto 19) <= tmp_170_fu_257_p3(22 downto 19);    tmp_170_reg_572(26) <= tmp_170_fu_257_p3(26);    tmp_170_reg_572(28) <= tmp_170_fu_257_p3(28);    tmp_170_reg_572(35 downto 33) <= tmp_170_fu_257_p3(35 downto 33);    tmp_170_reg_572(37) <= tmp_170_fu_257_p3(37);    tmp_170_reg_572(43 downto 39) <= tmp_170_fu_257_p3(43 downto 39);    tmp_170_reg_572(49 downto 48) <= tmp_170_fu_257_p3(49 downto 48);    tmp_170_reg_572(52) <= tmp_170_fu_257_p3(52);    tmp_170_reg_572(54) <= tmp_170_fu_257_p3(54);    tmp_170_reg_572(62) <= tmp_170_fu_257_p3(62);
                tmp_173_reg_577 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_172_reg_562 <= grp_fu_195_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    tmp_177_reg_587(1) <= tmp_177_fu_265_p3(1);    tmp_177_reg_587(4) <= tmp_177_fu_265_p3(4);    tmp_177_reg_587(6) <= tmp_177_fu_265_p3(6);    tmp_177_reg_587(13 downto 11) <= tmp_177_fu_265_p3(13 downto 11);    tmp_177_reg_587(15) <= tmp_177_fu_265_p3(15);    tmp_177_reg_587(20 downto 17) <= tmp_177_fu_265_p3(20 downto 17);    tmp_177_reg_587(24) <= tmp_177_fu_265_p3(24);    tmp_177_reg_587(26) <= tmp_177_fu_265_p3(26);    tmp_177_reg_587(33 downto 31) <= tmp_177_fu_265_p3(33 downto 31);    tmp_177_reg_587(35) <= tmp_177_fu_265_p3(35);    tmp_177_reg_587(40 downto 37) <= tmp_177_fu_265_p3(40 downto 37);    tmp_177_reg_587(44) <= tmp_177_fu_265_p3(44);    tmp_177_reg_587(48) <= tmp_177_fu_265_p3(48);    tmp_177_reg_587(53 downto 50) <= tmp_177_fu_265_p3(53 downto 50);    tmp_177_reg_587(62) <= tmp_177_fu_265_p3(62);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_203_p2 = ap_const_lv1_0))) then
                    tmp_191_cast_reg_527(18 downto 9) <= tmp_191_cast_fu_223_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_227_p2 = ap_const_lv1_0))) then
                    tmp_192_cast_reg_540(19 downto 0) <= tmp_192_cast_fu_248_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_V_3_reg_629 <= p_Val2_11_fu_400_p1(62 downto 52);
                tmp_V_4_reg_635 <= tmp_V_4_fu_414_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                val_V_reg_640 <= val_V_fu_511_p3;
            end if;
        end if;
    end process;
    tmp_191_cast_reg_527(8 downto 0) <= "000000000";
    tmp_191_cast_reg_527(19) <= '0';
    tmp_192_cast_reg_540(63 downto 20) <= "00000000000000000000000000000000000000000000";
    tmp_170_reg_572(5 downto 3) <= "000";
    tmp_170_reg_572(7 downto 7) <= "0";
    tmp_170_reg_572(12 downto 9) <= "0000";
    tmp_170_reg_572(16 downto 16) <= "0";
    tmp_170_reg_572(18 downto 18) <= "0";
    tmp_170_reg_572(25 downto 23) <= "000";
    tmp_170_reg_572(27 downto 27) <= "0";
    tmp_170_reg_572(32 downto 29) <= "0000";
    tmp_170_reg_572(36 downto 36) <= "0";
    tmp_170_reg_572(38 downto 38) <= "0";
    tmp_170_reg_572(47 downto 44) <= "0000";
    tmp_170_reg_572(51 downto 50) <= "00";
    tmp_170_reg_572(53 downto 53) <= "0";
    tmp_170_reg_572(61 downto 55) <= "0000000";
    tmp_170_reg_572(63) <= '0';
    tmp_177_reg_587(0) <= '0';
    tmp_177_reg_587(3 downto 2) <= "00";
    tmp_177_reg_587(5 downto 5) <= "0";
    tmp_177_reg_587(10 downto 7) <= "0000";
    tmp_177_reg_587(14 downto 14) <= "0";
    tmp_177_reg_587(16 downto 16) <= "0";
    tmp_177_reg_587(23 downto 21) <= "000";
    tmp_177_reg_587(25 downto 25) <= "0";
    tmp_177_reg_587(30 downto 27) <= "0000";
    tmp_177_reg_587(34 downto 34) <= "0";
    tmp_177_reg_587(36 downto 36) <= "0";
    tmp_177_reg_587(43 downto 41) <= "000";
    tmp_177_reg_587(47 downto 45) <= "000";
    tmp_177_reg_587(49 downto 49) <= "0";
    tmp_177_reg_587(61 downto 54) <= "00000000";
    tmp_177_reg_587(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_203_p2, ap_CS_fsm_state3, exitcond_fu_227_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_203_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_227_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_203_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_203_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_203_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_203_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_203_p2 <= "1" when (i_reg_164 = ap_const_lv10_200) else "0";
    exitcond_fu_227_p2 <= "1" when (j_reg_175 = ap_const_lv10_200) else "0";

    grp_fu_186_p0_assign_proc : process(reg_198, tmp_170_reg_572, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_186_p0 <= reg_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_186_p0 <= tmp_170_reg_572;
        else 
            grp_fu_186_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p1_assign_proc : process(tmp_173_reg_577, tmp_177_reg_587, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_186_p1 <= tmp_177_reg_587;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_186_p1 <= tmp_173_reg_577;
        else 
            grp_fu_186_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_195_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_g_load_reg_552),32));
    i_18_fu_209_p2 <= std_logic_vector(unsigned(i_reg_164) + unsigned(ap_const_lv10_1));
    index_V_fu_299_p4 <= t_V_1_fu_273_p1(57 downto 52);
    input_b_address0 <= tmp_192_cast_reg_540(18 - 1 downto 0);

    input_b_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_b_ce0 <= ap_const_logic_1;
        else 
            input_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_g_address0 <= tmp_192_cast_fu_248_p1(18 - 1 downto 0);

    input_g_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_g_ce0 <= ap_const_logic_1;
        else 
            input_g_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_r_address0 <= tmp_192_cast_reg_540(18 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_440_p3 <= sh_assign_fu_434_p2(11 downto 11);
    j_17_fu_233_p2 <= std_logic_vector(unsigned(j_reg_175) + unsigned(ap_const_lv10_1));
    mantissa_V_2_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_418_p4),113));
    mantissa_V_fu_418_p4 <= ((ap_const_lv1_1 & tmp_V_4_reg_635) & ap_const_lv1_0);
    mask_table1_address0 <= tmp_214_i_i_fu_309_p1(6 - 1 downto 0);

    mask_table1_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_reg_624),64));
    one_half_table2_address0 <= tmp_214_i_i_fu_309_p1(6 - 1 downto 0);

    one_half_table2_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            one_half_table2_ce0 <= ap_const_logic_1;
        else 
            one_half_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= tmp_192_cast_reg_540(18 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= val_V_reg_640;

    output_r_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_11_fu_322_p3 <= (p_Result_s_fu_315_p3 & ap_const_lv63_0);
    p_Result_12_fu_363_p3 <= (tmp_180_fu_353_p4 & xs_sig_V_fu_347_p2);
    p_Result_s_fu_315_p3 <= t_V_1_reg_592(63 downto 63);
    p_Val2_11_fu_400_p1 <= x_assign_1_fu_392_p3;
    p_Val2_s_fu_333_p2 <= std_logic_vector(unsigned(t_V_1_reg_592) + unsigned(one_half_cast_fu_330_p1));
    r_V_2_fu_483_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_2_cast_fu_427_p1),to_integer(unsigned('0' & tmp_i_i_i_129_fu_469_p1(31-1 downto 0)))));
    r_V_fu_477_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_418_p4),to_integer(unsigned('0' & tmp_i_i_i_cast_130_fu_473_p1(31-1 downto 0)))));
    sel_tmp1_fu_382_p2 <= (tmp_i_i_reg_598 xor ap_const_lv1_1);
    sel_tmp2_fu_387_p2 <= (tmp_213_i_i_reg_604 and sel_tmp1_fu_382_p2);
    sel_tmp_fu_378_p1 <= sel_tmp_v_fu_371_p3;
    sel_tmp_v_fu_371_p3 <= 
        p_Result_11_fu_322_p3 when (tmp_i_i_reg_598(0) = '1') else 
        p_Result_12_fu_363_p3;
        sh_assign_8_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_457_p3),32));

    sh_assign_fu_434_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast4_fu_431_p1));
    t_V_1_fu_273_p1 <= reg_198;
    tmp_170_fu_257_p3 <= 
        ap_const_lv64_40530FAE147AE147 when (input_r_q0(0) = '1') else 
        ap_const_lv64_0;
    tmp_177_fu_265_p3 <= 
        ap_const_lv64_403D11EB851EB852 when (input_b_q0(0) = '1') else 
        ap_const_lv64_0;
    tmp_180_fu_353_p4 <= p_Val2_s_fu_333_p2(63 downto 52);
    tmp_181_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_185_fu_489_p3),8));
    tmp_182_fu_501_p4 <= r_V_2_fu_483_p2(60 downto 53);
    tmp_185_fu_489_p3 <= r_V_fu_477_p2(53 downto 53);
    tmp_191_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_215_p3),20));
    tmp_192_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_243_p2),64));
    tmp_213_i_i_fu_293_p2 <= "1" when (unsigned(tmp_V_fu_277_p4) > unsigned(ap_const_lv11_433)) else "0";
    tmp_214_i_i_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_299_p4),64));
    tmp_216_i_i_fu_342_p2 <= (mask_reg_619 xor ap_const_lv52_FFFFFFFFFFFFF);
    tmp_V_2_fu_338_p1 <= p_Val2_s_fu_333_p2(52 - 1 downto 0);
    tmp_V_4_fu_414_p1 <= p_Val2_11_fu_400_p1(52 - 1 downto 0);
    tmp_V_fu_277_p4 <= t_V_1_fu_273_p1(62 downto 52);
    tmp_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_175),20));
    tmp_fu_215_p3 <= (i_reg_164 & ap_const_lv9_0);
    tmp_i_i_fu_287_p2 <= "1" when (unsigned(tmp_V_fu_277_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    tmp_i_i_i_129_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_8_cast_fu_465_p1),113));
    tmp_i_i_i_cast_130_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_8_cast_fu_465_p1),54));
        tmp_i_i_i_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_448_p2),12));

    tmp_i_i_i_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_3_reg_629));
    tmp_i_i_i_i_cast4_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_3_reg_629),12));
    tmp_s_fu_243_p2 <= std_logic_vector(unsigned(tmp_cast_fu_239_p1) + unsigned(tmp_191_cast_reg_527));
    ush_fu_457_p3 <= 
        tmp_i_i_i_cast_fu_453_p1 when (isNeg_fu_440_p3(0) = '1') else 
        sh_assign_fu_434_p2;
    val_V_fu_511_p3 <= 
        tmp_181_fu_497_p1 when (isNeg_fu_440_p3(0) = '1') else 
        tmp_182_fu_501_p4;
    x_assign_1_fu_392_p3 <= 
        reg_198 when (sel_tmp2_fu_387_p2(0) = '1') else 
        sel_tmp_fu_378_p1;
    xs_sig_V_fu_347_p2 <= (tmp_V_2_fu_338_p1 and tmp_216_i_i_fu_342_p2);
end behav;
