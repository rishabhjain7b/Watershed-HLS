-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_segmentation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_image_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    input_image_r_ce0 : OUT STD_LOGIC;
    input_image_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_image_g_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    input_image_g_ce0 : OUT STD_LOGIC;
    input_image_g_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_image_b_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    input_image_b_ce0 : OUT STD_LOGIC;
    input_image_b_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_image_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    output_image_r_ce0 : OUT STD_LOGIC;
    output_image_r_we0 : OUT STD_LOGIC;
    output_image_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_image_g_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    output_image_g_ce0 : OUT STD_LOGIC;
    output_image_g_we0 : OUT STD_LOGIC;
    output_image_g_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_image_b_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    output_image_b_ce0 : OUT STD_LOGIC;
    output_image_b_we0 : OUT STD_LOGIC;
    output_image_b_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of image_segmentation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grayOutput_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grayOutput_ce0 : STD_LOGIC;
    signal grayOutput_we0 : STD_LOGIC;
    signal grayOutput_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal binaryThreshold_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal binaryThreshold_ce0 : STD_LOGIC;
    signal binaryThreshold_we0 : STD_LOGIC;
    signal binaryThreshold_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal morphOpening_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal morphOpening_ce0 : STD_LOGIC;
    signal morphOpening_we0 : STD_LOGIC;
    signal morphOpening_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal distanceTransformOut_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal distanceTransformOut_ce0 : STD_LOGIC;
    signal distanceTransformOut_we0 : STD_LOGIC;
    signal distanceTransformOut_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal distanceTransformOut_ce1 : STD_LOGIC;
    signal distanceTransformOut_we1 : STD_LOGIC;
    signal distanceTransformOut_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sureForeground_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sureForeground_ce0 : STD_LOGIC;
    signal sureForeground_we0 : STD_LOGIC;
    signal sureForeground_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond1_i_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_fu_399_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_852 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_79_cast_fu_413_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_79_cast_reg_857 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_fu_423_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_865 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_i_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresholdValue_assig_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal thresholdValue_assig_1_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresholdValue_assig_1_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs4_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs4_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_557_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_10_reg_905 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_81_cast_fu_571_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_81_cast_reg_910 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_i7_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_581_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_9_reg_918 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_85_cast_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_cast_reg_923 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_reg_938 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_V_1_fu_630_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_944 : STD_LOGIC_VECTOR (22 downto 0);
    signal val_V_fu_727_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_V_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_46_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_11_fu_796_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_11_reg_973 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_84_cast_fu_810_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_84_cast_reg_978 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond3_i_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_10_fu_820_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_10_reg_986 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_89_cast_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_cast_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_i_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_distanceTransform_fu_294_ap_start : STD_LOGIC;
    signal grp_distanceTransform_fu_294_ap_done : STD_LOGIC;
    signal grp_distanceTransform_fu_294_ap_idle : STD_LOGIC;
    signal grp_distanceTransform_fu_294_ap_ready : STD_LOGIC;
    signal grp_distanceTransform_fu_294_outputImage_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_distanceTransform_fu_294_outputImage_ce0 : STD_LOGIC;
    signal grp_distanceTransform_fu_294_outputImage_we0 : STD_LOGIC;
    signal grp_distanceTransform_fu_294_outputImage_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_distanceTransform_fu_294_outputImage_address1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_distanceTransform_fu_294_outputImage_ce1 : STD_LOGIC;
    signal grp_distanceTransform_fu_294_outputImage_we1 : STD_LOGIC;
    signal grp_distanceTransform_fu_294_outputImage_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_distanceTransform_fu_294_morphOpening_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_distanceTransform_fu_294_morphOpening_ce0 : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_ap_start : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_ap_done : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_ap_idle : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_ap_ready : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_input_r_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_RGBtoGray_512_512_2_fu_302_input_r_ce0 : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_input_g_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_RGBtoGray_512_512_2_fu_302_input_g_ce0 : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_input_b_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_RGBtoGray_512_512_2_fu_302_input_b_ce0 : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_output_r_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_RGBtoGray_512_512_2_fu_302_output_r_ce0 : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_output_r_we0 : STD_LOGIC;
    signal grp_RGBtoGray_512_512_2_fu_302_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_thresholdOtsu_fu_318_ap_start : STD_LOGIC;
    signal grp_thresholdOtsu_fu_318_ap_done : STD_LOGIC;
    signal grp_thresholdOtsu_fu_318_ap_idle : STD_LOGIC;
    signal grp_thresholdOtsu_fu_318_ap_ready : STD_LOGIC;
    signal grp_thresholdOtsu_fu_318_src_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_thresholdOtsu_fu_318_src_ce0 : STD_LOGIC;
    signal grp_thresholdOtsu_fu_318_dst_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_thresholdOtsu_fu_318_dst_ce0 : STD_LOGIC;
    signal grp_thresholdOtsu_fu_318_dst_we0 : STD_LOGIC;
    signal grp_thresholdOtsu_fu_318_dst_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_watershed_algorithm_fu_328_ap_start : STD_LOGIC;
    signal grp_watershed_algorithm_fu_328_ap_done : STD_LOGIC;
    signal grp_watershed_algorithm_fu_328_ap_idle : STD_LOGIC;
    signal grp_watershed_algorithm_fu_328_ap_ready : STD_LOGIC;
    signal grp_watershed_algorithm_fu_328_grayOutput_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_watershed_algorithm_fu_328_grayOutput_ce0 : STD_LOGIC;
    signal grp_connectedComponents_fu_340_ap_start : STD_LOGIC;
    signal grp_connectedComponents_fu_340_ap_done : STD_LOGIC;
    signal grp_connectedComponents_fu_340_ap_idle : STD_LOGIC;
    signal grp_connectedComponents_fu_340_ap_ready : STD_LOGIC;
    signal grp_connectedComponents_fu_340_sureForeground_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_connectedComponents_fu_340_sureForeground_ce0 : STD_LOGIC;
    signal grp_morphologyEx_fu_348_ap_start : STD_LOGIC;
    signal grp_morphologyEx_fu_348_ap_done : STD_LOGIC;
    signal grp_morphologyEx_fu_348_ap_idle : STD_LOGIC;
    signal grp_morphologyEx_fu_348_ap_ready : STD_LOGIC;
    signal grp_morphologyEx_fu_348_dst_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_morphologyEx_fu_348_dst_ce0 : STD_LOGIC;
    signal grp_morphologyEx_fu_348_dst_we0 : STD_LOGIC;
    signal grp_morphologyEx_fu_348_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_morphologyEx_fu_348_binaryThreshold_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_morphologyEx_fu_348_binaryThreshold_ce0 : STD_LOGIC;
    signal grp_dilate_fu_356_ap_start : STD_LOGIC;
    signal grp_dilate_fu_356_ap_done : STD_LOGIC;
    signal grp_dilate_fu_356_ap_idle : STD_LOGIC;
    signal grp_dilate_fu_356_ap_ready : STD_LOGIC;
    signal grp_dilate_fu_356_src_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_dilate_fu_356_src_ce0 : STD_LOGIC;
    signal i_i_reg_228 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_i_reg_239 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_i6_reg_250 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_i1_reg_261 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_i2_reg_272 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_block_state32_on_subcall_done : BOOLEAN;
    signal j_i4_reg_283 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_distanceTransform_fu_294_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_RGBtoGray_512_512_2_fu_302_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_thresholdOtsu_fu_318_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_watershed_algorithm_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal grp_connectedComponents_fu_340_ap_start_reg : STD_LOGIC := '0';
    signal grp_morphologyEx_fu_348_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_dilate_fu_356_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_82_cast_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_fu_525_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_371_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_405_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_i_cast_fu_429_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_62_fu_433_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal val_to_int_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_i_to_int_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_446_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_456_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_474_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_541_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_60_fu_563_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_i9_cast_fu_587_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_66_fu_591_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_40_fu_601_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_V_fu_634_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i_i_cast_fu_647_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_650_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i_i_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_656_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_i_cast_fu_669_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_673_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_cast_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_6_cast_cas_fu_685_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_1_cast1_fu_643_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_i_i_i_i_44_fu_689_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_693_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_69_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_699_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_67_fu_713_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_717_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_i_to_int_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_742_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_fu_752_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_802_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_i5_cast_fu_826_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_71_fu_830_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component distanceTransform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outputImage_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        outputImage_ce0 : OUT STD_LOGIC;
        outputImage_we0 : OUT STD_LOGIC;
        outputImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputImage_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputImage_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        outputImage_ce1 : OUT STD_LOGIC;
        outputImage_we1 : OUT STD_LOGIC;
        outputImage_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputImage_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        morphOpening_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        morphOpening_ce0 : OUT STD_LOGIC;
        morphOpening_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component RGBtoGray_512_512_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        input_g_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        input_g_ce0 : OUT STD_LOGIC;
        input_g_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        input_b_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        input_b_ce0 : OUT STD_LOGIC;
        input_b_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component thresholdOtsu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component watershed_algorithm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        grayOutput_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        grayOutput_ce0 : OUT STD_LOGIC;
        grayOutput_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component connectedComponents IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sureForeground_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        sureForeground_ce0 : OUT STD_LOGIC;
        sureForeground_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component morphologyEx IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        binaryThreshold_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        binaryThreshold_ce0 : OUT STD_LOGIC;
        binaryThreshold_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dilate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageProcessing_sitofp_32ns_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageProcessing_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component watershed_algorithm_watershedOutput IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component image_segmentation_binaryThreshold IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component image_segmentation_distanceTransformOut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grayOutput_U : component watershed_algorithm_watershedOutput
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grayOutput_address0,
        ce0 => grayOutput_ce0,
        we0 => grayOutput_we0,
        d0 => grp_RGBtoGray_512_512_2_fu_302_output_r_d0,
        q0 => grayOutput_q0);

    binaryThreshold_U : component image_segmentation_binaryThreshold
    generic map (
        DataWidth => 1,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => binaryThreshold_address0,
        ce0 => binaryThreshold_ce0,
        we0 => binaryThreshold_we0,
        d0 => grp_thresholdOtsu_fu_318_dst_d0,
        q0 => binaryThreshold_q0);

    morphOpening_U : component watershed_algorithm_watershedOutput
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => morphOpening_address0,
        ce0 => morphOpening_ce0,
        we0 => morphOpening_we0,
        d0 => grp_morphologyEx_fu_348_dst_d0,
        q0 => morphOpening_q0);

    distanceTransformOut_U : component image_segmentation_distanceTransformOut
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => distanceTransformOut_address0,
        ce0 => distanceTransformOut_ce0,
        we0 => distanceTransformOut_we0,
        d0 => grp_distanceTransform_fu_294_outputImage_d0,
        q0 => distanceTransformOut_q0,
        address1 => grp_distanceTransform_fu_294_outputImage_address1,
        ce1 => distanceTransformOut_ce1,
        we1 => distanceTransformOut_we1,
        d1 => grp_distanceTransform_fu_294_outputImage_d1,
        q1 => distanceTransformOut_q1);

    sureForeground_U : component image_segmentation_binaryThreshold
    generic map (
        DataWidth => 1,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sureForeground_address0,
        ce0 => sureForeground_ce0,
        we0 => sureForeground_we0,
        d0 => tmp_46_reg_965,
        q0 => sureForeground_q0);

    grp_distanceTransform_fu_294 : component distanceTransform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_distanceTransform_fu_294_ap_start,
        ap_done => grp_distanceTransform_fu_294_ap_done,
        ap_idle => grp_distanceTransform_fu_294_ap_idle,
        ap_ready => grp_distanceTransform_fu_294_ap_ready,
        outputImage_address0 => grp_distanceTransform_fu_294_outputImage_address0,
        outputImage_ce0 => grp_distanceTransform_fu_294_outputImage_ce0,
        outputImage_we0 => grp_distanceTransform_fu_294_outputImage_we0,
        outputImage_d0 => grp_distanceTransform_fu_294_outputImage_d0,
        outputImage_q0 => distanceTransformOut_q0,
        outputImage_address1 => grp_distanceTransform_fu_294_outputImage_address1,
        outputImage_ce1 => grp_distanceTransform_fu_294_outputImage_ce1,
        outputImage_we1 => grp_distanceTransform_fu_294_outputImage_we1,
        outputImage_d1 => grp_distanceTransform_fu_294_outputImage_d1,
        outputImage_q1 => distanceTransformOut_q1,
        morphOpening_address0 => grp_distanceTransform_fu_294_morphOpening_address0,
        morphOpening_ce0 => grp_distanceTransform_fu_294_morphOpening_ce0,
        morphOpening_q0 => morphOpening_q0);

    grp_RGBtoGray_512_512_2_fu_302 : component RGBtoGray_512_512_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_RGBtoGray_512_512_2_fu_302_ap_start,
        ap_done => grp_RGBtoGray_512_512_2_fu_302_ap_done,
        ap_idle => grp_RGBtoGray_512_512_2_fu_302_ap_idle,
        ap_ready => grp_RGBtoGray_512_512_2_fu_302_ap_ready,
        input_r_address0 => grp_RGBtoGray_512_512_2_fu_302_input_r_address0,
        input_r_ce0 => grp_RGBtoGray_512_512_2_fu_302_input_r_ce0,
        input_r_q0 => input_image_r_q0,
        input_g_address0 => grp_RGBtoGray_512_512_2_fu_302_input_g_address0,
        input_g_ce0 => grp_RGBtoGray_512_512_2_fu_302_input_g_ce0,
        input_g_q0 => input_image_g_q0,
        input_b_address0 => grp_RGBtoGray_512_512_2_fu_302_input_b_address0,
        input_b_ce0 => grp_RGBtoGray_512_512_2_fu_302_input_b_ce0,
        input_b_q0 => input_image_b_q0,
        output_r_address0 => grp_RGBtoGray_512_512_2_fu_302_output_r_address0,
        output_r_ce0 => grp_RGBtoGray_512_512_2_fu_302_output_r_ce0,
        output_r_we0 => grp_RGBtoGray_512_512_2_fu_302_output_r_we0,
        output_r_d0 => grp_RGBtoGray_512_512_2_fu_302_output_r_d0);

    grp_thresholdOtsu_fu_318 : component thresholdOtsu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_thresholdOtsu_fu_318_ap_start,
        ap_done => grp_thresholdOtsu_fu_318_ap_done,
        ap_idle => grp_thresholdOtsu_fu_318_ap_idle,
        ap_ready => grp_thresholdOtsu_fu_318_ap_ready,
        src_address0 => grp_thresholdOtsu_fu_318_src_address0,
        src_ce0 => grp_thresholdOtsu_fu_318_src_ce0,
        src_q0 => grayOutput_q0,
        dst_address0 => grp_thresholdOtsu_fu_318_dst_address0,
        dst_ce0 => grp_thresholdOtsu_fu_318_dst_ce0,
        dst_we0 => grp_thresholdOtsu_fu_318_dst_we0,
        dst_d0 => grp_thresholdOtsu_fu_318_dst_d0);

    grp_watershed_algorithm_fu_328 : component watershed_algorithm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_watershed_algorithm_fu_328_ap_start,
        ap_done => grp_watershed_algorithm_fu_328_ap_done,
        ap_idle => grp_watershed_algorithm_fu_328_ap_idle,
        ap_ready => grp_watershed_algorithm_fu_328_ap_ready,
        grayOutput_address0 => grp_watershed_algorithm_fu_328_grayOutput_address0,
        grayOutput_ce0 => grp_watershed_algorithm_fu_328_grayOutput_ce0,
        grayOutput_q0 => grayOutput_q0);

    grp_connectedComponents_fu_340 : component connectedComponents
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_connectedComponents_fu_340_ap_start,
        ap_done => grp_connectedComponents_fu_340_ap_done,
        ap_idle => grp_connectedComponents_fu_340_ap_idle,
        ap_ready => grp_connectedComponents_fu_340_ap_ready,
        sureForeground_address0 => grp_connectedComponents_fu_340_sureForeground_address0,
        sureForeground_ce0 => grp_connectedComponents_fu_340_sureForeground_ce0,
        sureForeground_q0 => sureForeground_q0);

    grp_morphologyEx_fu_348 : component morphologyEx
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_morphologyEx_fu_348_ap_start,
        ap_done => grp_morphologyEx_fu_348_ap_done,
        ap_idle => grp_morphologyEx_fu_348_ap_idle,
        ap_ready => grp_morphologyEx_fu_348_ap_ready,
        dst_address0 => grp_morphologyEx_fu_348_dst_address0,
        dst_ce0 => grp_morphologyEx_fu_348_dst_ce0,
        dst_we0 => grp_morphologyEx_fu_348_dst_we0,
        dst_d0 => grp_morphologyEx_fu_348_dst_d0,
        dst_q0 => morphOpening_q0,
        binaryThreshold_address0 => grp_morphologyEx_fu_348_binaryThreshold_address0,
        binaryThreshold_ce0 => grp_morphologyEx_fu_348_binaryThreshold_ce0,
        binaryThreshold_q0 => binaryThreshold_q0);

    grp_dilate_fu_356 : component dilate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dilate_fu_356_ap_start,
        ap_done => grp_dilate_fu_356_ap_done,
        ap_idle => grp_dilate_fu_356_ap_idle,
        ap_ready => grp_dilate_fu_356_ap_ready,
        src_address0 => grp_dilate_fu_356_src_address0,
        src_ce0 => grp_dilate_fu_356_src_ce0,
        src_q0 => morphOpening_q0);

    imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1_U50 : component imageProcessing_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_fu_108,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_366_p2);

    imageProcessing_sitofp_32ns_32_5_1_U51 : component imageProcessing_sitofp_32ns_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_371_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_371_p1);

    imageProcessing_fcmp_32ns_32ns_1_1_1_U52 : component imageProcessing_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_374_p0,
        din1 => grp_fu_374_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_374_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_RGBtoGray_512_512_2_fu_302_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_RGBtoGray_512_512_2_fu_302_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_RGBtoGray_512_512_2_fu_302_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_RGBtoGray_512_512_2_fu_302_ap_ready = ap_const_logic_1)) then 
                    grp_RGBtoGray_512_512_2_fu_302_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_connectedComponents_fu_340_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_connectedComponents_fu_340_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond1_i7_fu_551_p2 = ap_const_lv1_1))) then 
                    grp_connectedComponents_fu_340_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_connectedComponents_fu_340_ap_ready = ap_const_logic_1)) then 
                    grp_connectedComponents_fu_340_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dilate_fu_356_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dilate_fu_356_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_dilate_fu_356_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dilate_fu_356_ap_ready = ap_const_logic_1)) then 
                    grp_dilate_fu_356_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_distanceTransform_fu_294_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_distanceTransform_fu_294_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_distanceTransform_fu_294_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_distanceTransform_fu_294_ap_ready = ap_const_logic_1)) then 
                    grp_distanceTransform_fu_294_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_morphologyEx_fu_348_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_morphologyEx_fu_348_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_morphologyEx_fu_348_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_morphologyEx_fu_348_ap_ready = ap_const_logic_1)) then 
                    grp_morphologyEx_fu_348_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_thresholdOtsu_fu_318_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_thresholdOtsu_fu_318_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_thresholdOtsu_fu_318_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_thresholdOtsu_fu_318_ap_ready = ap_const_logic_1)) then 
                    grp_thresholdOtsu_fu_318_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_watershed_algorithm_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_watershed_algorithm_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond1_i7_fu_551_p2 = ap_const_lv1_1))) then 
                    grp_watershed_algorithm_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_watershed_algorithm_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_watershed_algorithm_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i2_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond2_i_fu_814_p2 = ap_const_lv1_1))) then 
                i_i2_reg_272 <= i_11_reg_973;
            elsif (((ap_const_boolean_0 = ap_block_state32_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_i2_reg_272 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i6_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i1_fu_575_p2 = ap_const_lv1_1))) then 
                i_i6_reg_250 <= i_10_reg_905;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_i6_reg_250 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i_fu_417_p2 = ap_const_lv1_1))) then 
                i_i_reg_228 <= i_reg_852;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_i_reg_228 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_i1_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond1_i7_fu_551_p2 = ap_const_lv1_0))) then 
                j_i1_reg_261 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                j_i1_reg_261 <= j_9_reg_918;
            end if; 
        end if;
    end process;

    j_i4_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_i_fu_790_p2 = ap_const_lv1_0))) then 
                j_i4_reg_283 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                j_i4_reg_283 <= j_10_reg_986;
            end if; 
        end if;
    end process;

    j_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond1_i_fu_393_p2 = ap_const_lv1_0))) then 
                j_i_reg_239 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_i_reg_239 <= j_reg_865;
            end if; 
        end if;
    end process;

    max_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                max_fu_108 <= max_2_fu_525_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                max_fu_108 <= distanceTransformOut_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_10_reg_905 <= i_10_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                i_11_reg_973 <= i_11_fu_796_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_reg_852 <= i_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                j_10_reg_986 <= j_10_fu_820_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j_9_reg_918 <= j_9_fu_581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_reg_865 <= j_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i1_fu_575_p2 = ap_const_lv1_0))) then
                notlhs4_reg_933 <= notlhs4_fu_610_p2;
                    tmp_85_cast_reg_923(19 downto 0) <= tmp_85_cast_fu_596_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                notrhs4_reg_897 <= notrhs4_fu_545_p2;
                thresholdValue_assig_1_reg_892 <= thresholdValue_assig_1_fu_537_p1;
                thresholdValue_assig_reg_887 <= grp_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond1_i_fu_393_p2 = ap_const_lv1_1)))) then
                reg_383 <= max_fu_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_34_reg_882 <= grp_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_46_reg_965 <= tmp_46_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_54_i_reg_959 <= grp_fu_371_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond1_i_fu_393_p2 = ap_const_lv1_0))) then
                    tmp_79_cast_reg_857(18 downto 9) <= tmp_79_cast_fu_413_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond1_i7_fu_551_p2 = ap_const_lv1_0))) then
                    tmp_81_cast_reg_910(18 downto 9) <= tmp_81_cast_fu_571_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_i_fu_790_p2 = ap_const_lv1_0))) then
                    tmp_84_cast_reg_978(18 downto 9) <= tmp_84_cast_fu_810_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond2_i_fu_814_p2 = ap_const_lv1_0))) then
                    tmp_89_cast_reg_991(19 downto 0) <= tmp_89_cast_fu_835_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_V_1_reg_944 <= tmp_V_1_fu_630_p1;
                tmp_V_reg_938 <= p_Val2_s_fu_616_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                val_V_reg_949 <= val_V_fu_727_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                val_reg_875 <= distanceTransformOut_q0;
            end if;
        end if;
    end process;
    tmp_79_cast_reg_857(8 downto 0) <= "000000000";
    tmp_79_cast_reg_857(19) <= '0';
    tmp_81_cast_reg_910(8 downto 0) <= "000000000";
    tmp_81_cast_reg_910(19) <= '0';
    tmp_85_cast_reg_923(63 downto 20) <= "00000000000000000000000000000000000000000000";
    tmp_84_cast_reg_978(8 downto 0) <= "000000000";
    tmp_84_cast_reg_978(19) <= '0';
    tmp_89_cast_reg_991(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state13, exitcond1_i_fu_393_p2, ap_CS_fsm_state14, exitcond_i_fu_417_p2, ap_CS_fsm_state21, exitcond1_i7_fu_551_p2, ap_CS_fsm_state22, exitcond_i1_fu_575_p2, ap_CS_fsm_state33, exitcond3_i_fu_790_p2, ap_CS_fsm_state34, exitcond2_i_fu_814_p2, grp_distanceTransform_fu_294_ap_done, grp_RGBtoGray_512_512_2_fu_302_ap_done, grp_thresholdOtsu_fu_318_ap_done, grp_morphologyEx_fu_348_ap_done, grp_dilate_fu_356_ap_done, ap_CS_fsm_state32, ap_block_state32_on_subcall_done, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_RGBtoGray_512_512_2_fu_302_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_thresholdOtsu_fu_318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_morphologyEx_fu_348_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_dilate_fu_356_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_distanceTransform_fu_294_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond1_i_fu_393_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i_fu_417_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond1_i7_fu_551_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i1_fu_575_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state32 => 
                if (((ap_const_boolean_0 = ap_block_state32_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_i_fu_790_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond2_i_fu_814_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state32_on_subcall_done_assign_proc : process(grp_watershed_algorithm_fu_328_ap_done, grp_connectedComponents_fu_340_ap_done)
    begin
                ap_block_state32_on_subcall_done <= ((grp_connectedComponents_fu_340_ap_done = ap_const_logic_0) or (grp_watershed_algorithm_fu_328_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state33, exitcond3_i_fu_790_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_i_fu_790_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33, exitcond3_i_fu_790_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_i_fu_790_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    binaryThreshold_address0_assign_proc : process(grp_thresholdOtsu_fu_318_dst_address0, grp_morphologyEx_fu_348_binaryThreshold_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            binaryThreshold_address0 <= grp_morphologyEx_fu_348_binaryThreshold_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            binaryThreshold_address0 <= grp_thresholdOtsu_fu_318_dst_address0;
        else 
            binaryThreshold_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    binaryThreshold_ce0_assign_proc : process(grp_thresholdOtsu_fu_318_dst_ce0, grp_morphologyEx_fu_348_binaryThreshold_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            binaryThreshold_ce0 <= grp_morphologyEx_fu_348_binaryThreshold_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            binaryThreshold_ce0 <= grp_thresholdOtsu_fu_318_dst_ce0;
        else 
            binaryThreshold_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    binaryThreshold_we0_assign_proc : process(grp_thresholdOtsu_fu_318_dst_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            binaryThreshold_we0 <= grp_thresholdOtsu_fu_318_dst_we0;
        else 
            binaryThreshold_we0 <= ap_const_logic_0;
        end if; 
    end process;


    distanceTransformOut_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state22, tmp_85_cast_fu_596_p1, grp_distanceTransform_fu_294_outputImage_address0, ap_CS_fsm_state10, tmp_82_cast_fu_438_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            distanceTransformOut_address0 <= tmp_85_cast_fu_596_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            distanceTransformOut_address0 <= tmp_82_cast_fu_438_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            distanceTransformOut_address0 <= ap_const_lv18_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            distanceTransformOut_address0 <= grp_distanceTransform_fu_294_outputImage_address0;
        else 
            distanceTransformOut_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    distanceTransformOut_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state22, grp_distanceTransform_fu_294_outputImage_ce0, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            distanceTransformOut_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            distanceTransformOut_ce0 <= grp_distanceTransform_fu_294_outputImage_ce0;
        else 
            distanceTransformOut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    distanceTransformOut_ce1_assign_proc : process(grp_distanceTransform_fu_294_outputImage_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            distanceTransformOut_ce1 <= grp_distanceTransform_fu_294_outputImage_ce1;
        else 
            distanceTransformOut_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    distanceTransformOut_we0_assign_proc : process(grp_distanceTransform_fu_294_outputImage_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            distanceTransformOut_we0 <= grp_distanceTransform_fu_294_outputImage_we0;
        else 
            distanceTransformOut_we0 <= ap_const_logic_0;
        end if; 
    end process;


    distanceTransformOut_we1_assign_proc : process(grp_distanceTransform_fu_294_outputImage_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            distanceTransformOut_we1 <= grp_distanceTransform_fu_294_outputImage_we1;
        else 
            distanceTransformOut_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i7_fu_551_p2 <= "1" when (i_i6_reg_250 = ap_const_lv10_200) else "0";
    exitcond1_i_fu_393_p2 <= "1" when (i_i_reg_228 = ap_const_lv10_200) else "0";
    exitcond2_i_fu_814_p2 <= "1" when (j_i4_reg_283 = ap_const_lv10_200) else "0";
    exitcond3_i_fu_790_p2 <= "1" when (i_i2_reg_272 = ap_const_lv10_200) else "0";
    exitcond_i1_fu_575_p2 <= "1" when (j_i1_reg_261 = ap_const_lv10_200) else "0";
    exitcond_i_fu_417_p2 <= "1" when (j_i_reg_239 = ap_const_lv10_200) else "0";

    grayOutput_address0_assign_proc : process(grp_RGBtoGray_512_512_2_fu_302_output_r_address0, grp_thresholdOtsu_fu_318_src_address0, grp_watershed_algorithm_fu_328_grayOutput_address0, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grayOutput_address0 <= grp_watershed_algorithm_fu_328_grayOutput_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grayOutput_address0 <= grp_thresholdOtsu_fu_318_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grayOutput_address0 <= grp_RGBtoGray_512_512_2_fu_302_output_r_address0;
        else 
            grayOutput_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grayOutput_ce0_assign_proc : process(grp_RGBtoGray_512_512_2_fu_302_output_r_ce0, grp_thresholdOtsu_fu_318_src_ce0, grp_watershed_algorithm_fu_328_grayOutput_ce0, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grayOutput_ce0 <= grp_watershed_algorithm_fu_328_grayOutput_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grayOutput_ce0 <= grp_thresholdOtsu_fu_318_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grayOutput_ce0 <= grp_RGBtoGray_512_512_2_fu_302_output_r_ce0;
        else 
            grayOutput_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grayOutput_we0_assign_proc : process(grp_RGBtoGray_512_512_2_fu_302_output_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grayOutput_we0 <= grp_RGBtoGray_512_512_2_fu_302_output_r_we0;
        else 
            grayOutput_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_RGBtoGray_512_512_2_fu_302_ap_start <= grp_RGBtoGray_512_512_2_fu_302_ap_start_reg;
    grp_connectedComponents_fu_340_ap_start <= grp_connectedComponents_fu_340_ap_start_reg;
    grp_dilate_fu_356_ap_start <= grp_dilate_fu_356_ap_start_reg;
    grp_distanceTransform_fu_294_ap_start <= grp_distanceTransform_fu_294_ap_start_reg;
    grp_fu_371_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_V_reg_949),32));

    grp_fu_374_p0_assign_proc : process(ap_CS_fsm_state16, val_reg_875, tmp_54_i_reg_959, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_374_p0 <= tmp_54_i_reg_959;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_374_p0 <= val_reg_875;
        else 
            grp_fu_374_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_374_p1_assign_proc : process(ap_CS_fsm_state16, thresholdValue_assig_reg_887, ap_CS_fsm_state30, max_fu_108)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_374_p1 <= thresholdValue_assig_reg_887;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_374_p1 <= max_fu_108;
        else 
            grp_fu_374_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_morphologyEx_fu_348_ap_start <= grp_morphologyEx_fu_348_ap_start_reg;
    grp_thresholdOtsu_fu_318_ap_start <= grp_thresholdOtsu_fu_318_ap_start_reg;
    grp_watershed_algorithm_fu_328_ap_start <= grp_watershed_algorithm_fu_328_ap_start_reg;
    i_10_fu_557_p2 <= std_logic_vector(unsigned(i_i6_reg_250) + unsigned(ap_const_lv10_1));
    i_11_fu_796_p2 <= std_logic_vector(unsigned(i_i2_reg_272) + unsigned(ap_const_lv10_1));
    i_fu_399_p2 <= std_logic_vector(unsigned(i_i_reg_228) + unsigned(ap_const_lv10_1));

    input_image_b_address0_assign_proc : process(ap_CS_fsm_state34, tmp_89_cast_fu_835_p1, grp_RGBtoGray_512_512_2_fu_302_input_b_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_image_b_address0 <= tmp_89_cast_fu_835_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_image_b_address0 <= grp_RGBtoGray_512_512_2_fu_302_input_b_address0;
        else 
            input_image_b_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_image_b_ce0_assign_proc : process(ap_CS_fsm_state34, grp_RGBtoGray_512_512_2_fu_302_input_b_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_image_b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_image_b_ce0 <= grp_RGBtoGray_512_512_2_fu_302_input_b_ce0;
        else 
            input_image_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_image_g_address0_assign_proc : process(ap_CS_fsm_state34, tmp_89_cast_fu_835_p1, grp_RGBtoGray_512_512_2_fu_302_input_g_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_image_g_address0 <= tmp_89_cast_fu_835_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_image_g_address0 <= grp_RGBtoGray_512_512_2_fu_302_input_g_address0;
        else 
            input_image_g_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_image_g_ce0_assign_proc : process(ap_CS_fsm_state34, grp_RGBtoGray_512_512_2_fu_302_input_g_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_image_g_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_image_g_ce0 <= grp_RGBtoGray_512_512_2_fu_302_input_g_ce0;
        else 
            input_image_g_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_image_r_address0_assign_proc : process(ap_CS_fsm_state34, tmp_89_cast_fu_835_p1, grp_RGBtoGray_512_512_2_fu_302_input_r_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_image_r_address0 <= tmp_89_cast_fu_835_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_image_r_address0 <= grp_RGBtoGray_512_512_2_fu_302_input_r_address0;
        else 
            input_image_r_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_image_r_ce0_assign_proc : process(ap_CS_fsm_state34, grp_RGBtoGray_512_512_2_fu_302_input_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_image_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_image_r_ce0 <= grp_RGBtoGray_512_512_2_fu_302_input_r_ce0;
        else 
            input_image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_656_p3 <= sh_assign_fu_650_p2(8 downto 8);
    j_10_fu_820_p2 <= std_logic_vector(unsigned(j_i4_reg_283) + unsigned(ap_const_lv10_1));
    j_9_fu_581_p2 <= std_logic_vector(unsigned(j_i1_reg_261) + unsigned(ap_const_lv10_1));
    j_fu_423_p2 <= std_logic_vector(unsigned(j_i_reg_239) + unsigned(ap_const_lv10_1));
    mantissa_V_1_cast1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_634_p4),55));
    mantissa_V_fu_634_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_944) & ap_const_lv1_0);
    max_1_i_to_int_fu_460_p1 <= reg_383;
    max_2_fu_525_p3 <= 
        val_reg_875 when (tmp_35_fu_520_p2(0) = '1') else 
        reg_383;

    morphOpening_address0_assign_proc : process(grp_distanceTransform_fu_294_morphOpening_address0, grp_morphologyEx_fu_348_dst_address0, grp_dilate_fu_356_src_address0, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            morphOpening_address0 <= grp_dilate_fu_356_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            morphOpening_address0 <= grp_morphologyEx_fu_348_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            morphOpening_address0 <= grp_distanceTransform_fu_294_morphOpening_address0;
        else 
            morphOpening_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    morphOpening_ce0_assign_proc : process(grp_distanceTransform_fu_294_morphOpening_ce0, grp_morphologyEx_fu_348_dst_ce0, grp_dilate_fu_356_src_ce0, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            morphOpening_ce0 <= grp_dilate_fu_356_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            morphOpening_ce0 <= grp_morphologyEx_fu_348_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            morphOpening_ce0 <= grp_distanceTransform_fu_294_morphOpening_ce0;
        else 
            morphOpening_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    morphOpening_we0_assign_proc : process(grp_morphologyEx_fu_348_dst_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            morphOpening_we0 <= grp_morphologyEx_fu_348_dst_we0;
        else 
            morphOpening_we0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs2_fu_496_p2 <= "0" when (tmp_29_fu_464_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_756_p2 <= "0" when (tmp_38_fu_742_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_610_p2 <= "0" when (tmp_40_fu_601_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_478_p2 <= "0" when (tmp_fu_446_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_502_p2 <= "1" when (tmp_64_fu_474_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_762_p2 <= "1" when (tmp_70_fu_752_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_545_p2 <= "1" when (tmp_61_fu_541_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_484_p2 <= "1" when (tmp_63_fu_456_p1 = ap_const_lv23_0) else "0";
    output_image_b_address0 <= tmp_89_cast_reg_991(18 - 1 downto 0);

    output_image_b_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_image_b_ce0 <= ap_const_logic_1;
        else 
            output_image_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_image_b_d0 <= input_image_b_q0;

    output_image_b_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_image_b_we0 <= ap_const_logic_1;
        else 
            output_image_b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_image_g_address0 <= tmp_89_cast_reg_991(18 - 1 downto 0);

    output_image_g_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_image_g_ce0 <= ap_const_logic_1;
        else 
            output_image_g_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_image_g_d0 <= input_image_g_q0;

    output_image_g_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_image_g_we0 <= ap_const_logic_1;
        else 
            output_image_g_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_image_r_address0 <= tmp_89_cast_reg_991(18 - 1 downto 0);

    output_image_r_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_image_r_ce0 <= ap_const_logic_1;
        else 
            output_image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_image_r_d0 <= input_image_r_q0;

    output_image_r_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_image_r_we0 <= ap_const_logic_1;
        else 
            output_image_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_s_fu_616_p1 <= distanceTransformOut_q0;
    r_V_1_fu_699_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast1_fu_643_p1),to_integer(unsigned('0' & tmp_i_i_i_i_44_fu_689_p1(31-1 downto 0)))));
    r_V_fu_693_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_634_p4),to_integer(unsigned('0' & sh_assign_6_cast_cas_fu_685_p1(25-1 downto 0)))));
        sh_assign_6_cast_cas_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_673_p3),25));

        sh_assign_6_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_673_p3),32));

    sh_assign_fu_650_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_i_cast_fu_647_p1));

    sureForeground_address0_assign_proc : process(tmp_85_cast_reg_923, grp_connectedComponents_fu_340_sureForeground_address0, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sureForeground_address0 <= tmp_85_cast_reg_923(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sureForeground_address0 <= grp_connectedComponents_fu_340_sureForeground_address0;
        else 
            sureForeground_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sureForeground_ce0_assign_proc : process(grp_connectedComponents_fu_340_sureForeground_ce0, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sureForeground_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sureForeground_ce0 <= grp_connectedComponents_fu_340_sureForeground_ce0;
        else 
            sureForeground_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sureForeground_we0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sureForeground_we0 <= ap_const_logic_1;
        else 
            sureForeground_we0 <= ap_const_logic_0;
        end if; 
    end process;

    thresholdValue_assig_1_fu_537_p1 <= grp_fu_366_p2;
    tmp_29_fu_464_p4 <= max_1_i_to_int_fu_460_p1(30 downto 23);
    tmp_31_fu_490_p2 <= (notrhs_fu_484_p2 or notlhs_fu_478_p2);
    tmp_32_fu_508_p2 <= (notrhs2_fu_502_p2 or notlhs2_fu_496_p2);
    tmp_33_fu_514_p2 <= (tmp_32_fu_508_p2 and tmp_31_fu_490_p2);
    tmp_35_fu_520_p2 <= (tmp_34_reg_882 and tmp_33_fu_514_p2);
    tmp_38_fu_742_p4 <= tmp_54_i_to_int_fu_739_p1(30 downto 23);
    tmp_40_fu_601_p4 <= thresholdValue_assig_1_reg_892(30 downto 23);
    tmp_42_fu_768_p2 <= (notrhs3_fu_762_p2 or notlhs3_fu_756_p2);
    tmp_43_fu_774_p2 <= (notrhs4_reg_897 or notlhs4_reg_933);
    tmp_44_fu_778_p2 <= (tmp_43_fu_774_p2 and tmp_42_fu_768_p2);
    tmp_46_fu_784_p2 <= (tmp_44_fu_778_p2 and grp_fu_374_p2);
    tmp_54_i_to_int_fu_739_p1 <= tmp_54_i_reg_959;
    tmp_60_fu_563_p3 <= (i_i6_reg_250 & ap_const_lv9_0);
    tmp_61_fu_541_p1 <= thresholdValue_assig_1_fu_537_p1(23 - 1 downto 0);
    tmp_62_fu_433_p2 <= std_logic_vector(unsigned(tmp_79_cast_reg_857) + unsigned(tmp_i_cast_fu_429_p1));
    tmp_63_fu_456_p1 <= val_to_int_fu_443_p1(23 - 1 downto 0);
    tmp_64_fu_474_p1 <= max_1_i_to_int_fu_460_p1(23 - 1 downto 0);
    tmp_65_fu_802_p3 <= (i_i2_reg_272 & ap_const_lv9_0);
    tmp_66_fu_591_p2 <= std_logic_vector(unsigned(tmp_i9_cast_fu_587_p1) + unsigned(tmp_81_cast_reg_910));
    tmp_67_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_705_p3),8));
    tmp_68_fu_717_p4 <= r_V_1_fu_699_p2(31 downto 24);
    tmp_69_fu_705_p3 <= r_V_fu_693_p2(24 downto 24);
    tmp_70_fu_752_p1 <= tmp_54_i_to_int_fu_739_p1(23 - 1 downto 0);
    tmp_71_fu_830_p2 <= std_logic_vector(unsigned(tmp_84_cast_reg_978) + unsigned(tmp_i5_cast_fu_826_p1));
    tmp_79_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_405_p3),20));
    tmp_81_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_563_p3),20));
    tmp_82_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_433_p2),64));
    tmp_84_cast_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_802_p3),20));
    tmp_85_cast_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_591_p2),64));
    tmp_89_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_830_p2),64));
    tmp_V_1_fu_630_p1 <= p_Val2_s_fu_616_p1(23 - 1 downto 0);
    tmp_fu_446_p4 <= val_to_int_fu_443_p1(30 downto 23);
    tmp_i5_cast_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i4_reg_283),20));
    tmp_i9_cast_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i1_reg_261),20));
    tmp_i_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_239),20));
    tmp_i_i_i_i_44_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_6_cast_fu_681_p1),55));
        tmp_i_i_i_i_cast_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_i_fu_664_p2),9));

    tmp_i_i_i_i_fu_664_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_reg_938));
    tmp_i_i_i_i_i_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_938),9));
    tmp_s_fu_405_p3 <= (i_i_reg_228 & ap_const_lv9_0);
    ush_fu_673_p3 <= 
        tmp_i_i_i_i_cast_fu_669_p1 when (isNeg_fu_656_p3(0) = '1') else 
        sh_assign_fu_650_p2;
    val_V_fu_727_p3 <= 
        tmp_67_fu_713_p1 when (isNeg_fu_656_p3(0) = '1') else 
        tmp_68_fu_717_p4;
    val_to_int_fu_443_p1 <= val_reg_875;
end behav;
