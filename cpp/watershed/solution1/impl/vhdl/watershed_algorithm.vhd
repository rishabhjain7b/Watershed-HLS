-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity watershed_algorithm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    grayOutput_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grayOutput_ce0 : OUT STD_LOGIC;
    grayOutput_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of watershed_algorithm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_40001 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal watershedOutput_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal watershedOutput_ce0 : STD_LOGIC;
    signal watershedOutput_we0 : STD_LOGIC;
    signal watershedOutput_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal watershedOutput_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal neighbours_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal neighbours_0_ce0 : STD_LOGIC;
    signal neighbours_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal neighbours_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal neighbours_1_ce0 : STD_LOGIC;
    signal neighbours_1_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal queue_end_load_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_cast7_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast7_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_831 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_cast_fu_392_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_cast_reg_836 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond4_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast6_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast6_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_406_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_849 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_449_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_865 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_20_cast_fu_463_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_20_cast_reg_870 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond2_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_477_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_reg_885 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_32_cast_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_reg_890 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_900 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal queue_start_1_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_start_1_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_5_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal queue_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal queue_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_539_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_7_reg_933 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal watershedOutput_addr_1_reg_943 : STD_LOGIC_VECTOR (17 downto 0);
    signal dist_addr_reg_948 : STD_LOGIC_VECTOR (17 downto 0);
    signal grayOutput_load_1_reg_953 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal k_1_fu_557_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_961 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_labels_2_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neighbours_0_load_reg_981 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal neighbours_1_load_reg_986 : STD_LOGIC_VECTOR (1 downto 0);
    signal ni_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ni_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal nj_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nj_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond6_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal grayOutput_addr_1_reg_1005 : STD_LOGIC_VECTOR (17 downto 0);
    signal watershedOutput_addr_3_reg_1010 : STD_LOGIC_VECTOR (17 downto 0);
    signal dist_addr_2_reg_1015 : STD_LOGIC_VECTOR (17 downto 0);
    signal min_label_1_fu_769_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_label_1_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_23_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal dist_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_load_1_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_26_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1041 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal queue_0_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal queue_0_ce0 : STD_LOGIC;
    signal queue_0_we0 : STD_LOGIC;
    signal queue_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_1_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal queue_1_ce0 : STD_LOGIC;
    signal queue_1_we0 : STD_LOGIC;
    signal queue_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal dist_ce0 : STD_LOGIC;
    signal dist_we0 : STD_LOGIC;
    signal dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_243 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_254 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i1_reg_265 : STD_LOGIC_VECTOR (9 downto 0);
    signal j2_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal queue_start_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_labels_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_label_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_min_label_be_phi_fu_337_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal k_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal min_label_be_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal queue_end_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_end_2_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_end_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_end_3_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_fu_595_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge1_cast_cas_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_384_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_3_cast_fu_412_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_fu_416_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_fu_426_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_end_2_fu_432_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_455_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_7_cast_fu_483_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_12_fu_487_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_fu_527_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_cast_fu_531_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_523_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_14_fu_585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal num_labels_1_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal neighbours_0_load_ca_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal neighbours_1_load_ca_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_642_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_18_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_672_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp7_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_710_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_cast_fu_714_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_20_fu_706_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_28_fu_722_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_29_fu_735_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal min_label_2_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_label_3_min_labe_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_794_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_end_3_fu_800_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component watershed_algorithm_watershedOutput IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component watershed_algorithm_neighbours_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component watershed_algorithm_neighbours_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component connectedComponents_equivLabels_parent IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    watershedOutput_U : component watershed_algorithm_watershedOutput
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => watershedOutput_address0,
        ce0 => watershedOutput_ce0,
        we0 => watershedOutput_we0,
        d0 => watershedOutput_d0,
        q0 => watershedOutput_q0);

    neighbours_0_U : component watershed_algorithm_neighbours_0
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => neighbours_0_address0,
        ce0 => neighbours_0_ce0,
        q0 => neighbours_0_q0);

    neighbours_1_U : component watershed_algorithm_neighbours_1
    generic map (
        DataWidth => 2,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => neighbours_1_address0,
        ce0 => neighbours_1_ce0,
        q0 => neighbours_1_q0);

    queue_0_U : component connectedComponents_equivLabels_parent
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_0_address0,
        ce0 => queue_0_ce0,
        we0 => queue_0_we0,
        d0 => queue_0_d0,
        q0 => queue_0_q0);

    queue_1_U : component connectedComponents_equivLabels_parent
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_1_address0,
        ce0 => queue_1_ce0,
        we0 => queue_1_we0,
        d0 => queue_1_d0,
        q0 => queue_1_q0);

    dist_U : component connectedComponents_equivLabels_parent
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dist_address0,
        ce0 => dist_ce0,
        we0 => dist_we0,
        d0 => dist_d0,
        q0 => dist_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_265 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_471_p2 = ap_const_lv1_1))) then 
                i1_reg_265 <= i_3_reg_865;
            end if; 
        end if;
    end process;

    i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_243 <= i_1_reg_831;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_243 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j2_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_443_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j2_reg_276 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j2_reg_276 <= j_3_reg_885;
            end if; 
        end if;
    end process;

    j_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_254 <= j_1_reg_849;
            elsif (((exitcond4_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_254 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                k_reg_322 <= k_1_reg_961;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_reg_322 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    min_label_be_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                min_label_be_reg_333 <= min_label_1_fu_769_p3;
            elsif (((or_cond6_fu_700_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                min_label_be_reg_333 <= min_label_reg_310;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_26_reg_1041 = ap_const_lv1_1) and (tmp_24_reg_1032 = ap_const_lv1_1) and (tmp_23_reg_1028 = ap_const_lv1_1) and (or_cond6_reg_1001 = ap_const_lv1_1)) or ((tmp_26_fu_788_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((tmp_24_fu_777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
                min_label_be_reg_333 <= min_label_1_reg_1020;
            end if; 
        end if;
    end process;

    min_label_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                min_label_reg_310 <= ap_phi_mux_min_label_be_phi_fu_337_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                min_label_reg_310 <= ap_const_lv32_40001;
            end if; 
        end if;
    end process;

    num_labels_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_443_p2 = ap_const_lv1_1))) then 
                num_labels_reg_298 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_551_p2 = ap_const_lv1_1))) then 
                num_labels_reg_298 <= num_labels_2_fu_604_p3;
            end if; 
        end if;
    end process;

    queue_end_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_26_fu_788_p2 = ap_const_lv1_1))) then 
                queue_end_1_fu_80 <= queue_end_3_fu_800_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_443_p2 = ap_const_lv1_1))) then 
                queue_end_1_fu_80 <= queue_end_load_reg_818;
            end if; 
        end if;
    end process;

    queue_end_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_354_p2 = ap_const_lv1_1))) then 
                queue_end_fu_64 <= queue_end_2_fu_432_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                queue_end_fu_64 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    queue_start_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_443_p2 = ap_const_lv1_1))) then 
                queue_start_reg_287 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_551_p2 = ap_const_lv1_1))) then 
                queue_start_reg_287 <= queue_start_1_reg_908;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (or_cond6_fu_700_p2 = ap_const_lv1_1))) then
                dist_addr_2_reg_1015 <= tmp_35_cast_fu_728_p1(18 - 1 downto 0);
                grayOutput_addr_1_reg_1005 <= tmp_35_cast_fu_728_p1(18 - 1 downto 0);
                watershedOutput_addr_3_reg_1010 <= tmp_35_cast_fu_728_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                dist_addr_reg_948 <= tmp_31_cast_fu_545_p1(18 - 1 downto 0);
                watershedOutput_addr_1_reg_943 <= tmp_31_cast_fu_545_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                dist_load_1_reg_1036 <= dist_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                grayOutput_load_1_reg_953 <= grayOutput_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_831 <= i_1_fu_378_p2;
                    i_cast7_reg_823(9 downto 0) <= i_cast7_fu_368_p1(9 downto 0);
                queue_end_load_reg_818 <= queue_end_fu_64;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_3_reg_865 <= i_3_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_4_reg_923 <= queue_0_q0;
                j_2_reg_928 <= queue_1_q0;
                tmp_7_reg_933 <= tmp_7_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_849 <= j_1_fu_406_p2;
                    j_cast6_reg_841(9 downto 0) <= j_cast6_fu_396_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_3_reg_885 <= j_3_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                k_1_reg_961 <= k_1_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                min_label_1_reg_1020 <= min_label_1_fu_769_p3;
                tmp_23_reg_1028 <= grp_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                neighbours_0_load_reg_981 <= neighbours_0_q0;
                neighbours_1_load_reg_986 <= neighbours_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                ni_reg_991 <= ni_fu_615_p2;
                nj_reg_996 <= nj_fu_623_p2;
                or_cond6_reg_1001 <= or_cond6_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                queue_start_1_reg_908 <= queue_start_1_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_1_cast_reg_836(18 downto 9) <= tmp_1_cast_fu_392_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_443_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_20_cast_reg_870(18 downto 9) <= tmp_20_cast_fu_463_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_24_reg_1032 <= tmp_24_fu_777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_26_reg_1041 <= tmp_26_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_32_cast_reg_890(19 downto 0) <= tmp_32_cast_fu_492_p1(19 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_8_reg_900 <= grp_fu_354_p2;
            end if;
        end if;
    end process;
    i_cast7_reg_823(31 downto 10) <= "0000000000000000000000";
    tmp_1_cast_reg_836(8 downto 0) <= "000000000";
    tmp_1_cast_reg_836(19) <= '0';
    j_cast6_reg_841(31 downto 10) <= "0000000000000000000000";
    tmp_20_cast_reg_870(8 downto 0) <= "000000000";
    tmp_20_cast_reg_870(19) <= '0';
    tmp_32_cast_reg_890(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_372_p2, ap_CS_fsm_state3, exitcond3_fu_400_p2, ap_CS_fsm_state5, exitcond2_fu_443_p2, ap_CS_fsm_state6, exitcond1_fu_471_p2, grp_fu_354_p2, ap_CS_fsm_state9, tmp_5_fu_505_p2, ap_CS_fsm_state13, exitcond_fu_551_p2, ap_CS_fsm_state15, or_cond6_fu_700_p2, ap_CS_fsm_state16, tmp_24_fu_777_p2, ap_CS_fsm_state17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_443_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_471_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((tmp_5_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_551_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((or_cond6_fu_700_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((grp_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((tmp_24_fu_777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, tmp_5_fu_505_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_5_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_min_label_be_phi_fu_337_p10_assign_proc : process(or_cond6_reg_1001, min_label_1_reg_1020, tmp_23_reg_1028, tmp_24_reg_1032, tmp_26_reg_1041, ap_CS_fsm_state20, min_label_be_reg_333)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_26_reg_1041 = ap_const_lv1_1) and (tmp_24_reg_1032 = ap_const_lv1_1) and (tmp_23_reg_1028 = ap_const_lv1_1) and (or_cond6_reg_1001 = ap_const_lv1_1))) then 
            ap_phi_mux_min_label_be_phi_fu_337_p10 <= min_label_1_reg_1020;
        else 
            ap_phi_mux_min_label_be_phi_fu_337_p10 <= min_label_be_reg_333;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, tmp_5_fu_505_p2)
    begin
        if (((tmp_5_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dist_address0_assign_proc : process(tmp_32_cast_reg_890, dist_addr_reg_948, dist_addr_2_reg_1015, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dist_address0 <= dist_addr_2_reg_1015;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dist_address0 <= dist_addr_reg_948;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dist_address0 <= tmp_32_cast_reg_890(18 - 1 downto 0);
        else 
            dist_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dist_ce0 <= ap_const_logic_1;
        else 
            dist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_d0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state8, storemerge1_cast_cas_fu_497_p3, tmp_25_fu_782_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dist_d0 <= tmp_25_fu_782_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dist_d0 <= storemerge1_cast_cas_fu_497_p3;
        else 
            dist_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_we0_assign_proc : process(tmp_26_fu_788_p2, ap_CS_fsm_state19, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_26_fu_788_p2 = ap_const_lv1_1)))) then 
            dist_we0 <= ap_const_logic_1;
        else 
            dist_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_471_p2 <= "1" when (j2_reg_276 = ap_const_lv10_200) else "0";
    exitcond2_fu_443_p2 <= "1" when (i1_reg_265 = ap_const_lv10_200) else "0";
    exitcond3_fu_400_p2 <= "1" when (j_reg_254 = ap_const_lv10_200) else "0";
    exitcond4_fu_372_p2 <= "1" when (i_reg_243 = ap_const_lv10_200) else "0";
    exitcond_fu_551_p2 <= "1" when (k_reg_322 = ap_const_lv4_8) else "0";

    grayOutput_address0_assign_proc : process(ap_CS_fsm_state11, grayOutput_addr_1_reg_1005, ap_CS_fsm_state16, tmp_31_cast_fu_545_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grayOutput_address0 <= grayOutput_addr_1_reg_1005;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grayOutput_address0 <= tmp_31_cast_fu_545_p1(18 - 1 downto 0);
        else 
            grayOutput_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grayOutput_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grayOutput_ce0 <= ap_const_logic_1;
        else 
            grayOutput_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_354_p2 <= "1" when (watershedOutput_q0 = ap_const_lv8_1) else "0";
    i_1_fu_378_p2 <= std_logic_vector(unsigned(i_reg_243) + unsigned(ap_const_lv10_1));
    i_3_fu_449_p2 <= std_logic_vector(unsigned(i1_reg_265) + unsigned(ap_const_lv10_1));
    i_cast7_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_243),32));
    icmp1_fu_745_p2 <= "0" when (tmp_29_fu_735_p4 = ap_const_lv7_0) else "1";
    icmp7_fu_682_p2 <= "1" when (signed(tmp_19_fu_672_p4) < signed(ap_const_lv23_1)) else "0";
    icmp_fu_652_p2 <= "1" when (signed(tmp_17_fu_642_p4) < signed(ap_const_lv23_1)) else "0";
    j_1_fu_406_p2 <= std_logic_vector(unsigned(j_reg_254) + unsigned(ap_const_lv10_1));
    j_3_fu_477_p2 <= std_logic_vector(unsigned(j2_reg_276) + unsigned(ap_const_lv10_1));
    j_cast6_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_254),32));
    k_1_fu_557_p2 <= std_logic_vector(unsigned(k_reg_322) + unsigned(ap_const_lv4_1));
    min_label_1_fu_769_p3 <= 
        min_label_3_min_labe_fu_761_p3 when (icmp1_fu_745_p2(0) = '1') else 
        min_label_reg_310;
    min_label_2_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(watershedOutput_q0),32));
    min_label_3_min_labe_fu_761_p3 <= 
        min_label_2_fu_751_p1 when (tmp_22_fu_755_p2(0) = '1') else 
        min_label_reg_310;
    neighbours_0_address0 <= tmp_11_fu_563_p1(3 - 1 downto 0);

    neighbours_0_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            neighbours_0_ce0 <= ap_const_logic_1;
        else 
            neighbours_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        neighbours_0_load_ca_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(neighbours_0_load_reg_981),32));

    neighbours_1_address0 <= tmp_11_fu_563_p1(3 - 1 downto 0);

    neighbours_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            neighbours_1_ce0 <= ap_const_logic_1;
        else 
            neighbours_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        neighbours_1_load_ca_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(neighbours_1_load_reg_986),32));

    ni_fu_615_p2 <= std_logic_vector(unsigned(i_4_reg_923) + unsigned(neighbours_0_load_ca_fu_612_p1));
    nj_fu_623_p2 <= std_logic_vector(unsigned(j_2_reg_928) + unsigned(neighbours_1_load_ca_fu_620_p1));
    num_labels_1_fu_579_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(num_labels_reg_298));
    num_labels_2_fu_604_p3 <= 
        num_labels_reg_298 when (tmp_10_fu_569_p2(0) = '1') else 
        num_labels_1_fu_579_p2;
    or_cond6_fu_700_p2 <= (tmp2_fu_694_p2 and tmp1_fu_688_p2);

    queue_0_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state4, tmp_6_fu_426_p1, tmp_9_fu_517_p1, tmp_27_fu_794_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            queue_0_address0 <= tmp_27_fu_794_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            queue_0_address0 <= tmp_9_fu_517_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            queue_0_address0 <= tmp_6_fu_426_p1(18 - 1 downto 0);
        else 
            queue_0_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    queue_0_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            queue_0_ce0 <= ap_const_logic_1;
        else 
            queue_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_0_d0_assign_proc : process(i_cast7_reg_823, ni_reg_991, ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            queue_0_d0 <= ni_reg_991;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            queue_0_d0 <= i_cast7_reg_823;
        else 
            queue_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    queue_0_we0_assign_proc : process(grp_fu_354_p2, tmp_26_fu_788_p2, ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_354_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_26_fu_788_p2 = ap_const_lv1_1)))) then 
            queue_0_we0 <= ap_const_logic_1;
        else 
            queue_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_1_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state4, tmp_6_fu_426_p1, tmp_9_fu_517_p1, tmp_27_fu_794_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            queue_1_address0 <= tmp_27_fu_794_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            queue_1_address0 <= tmp_9_fu_517_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            queue_1_address0 <= tmp_6_fu_426_p1(18 - 1 downto 0);
        else 
            queue_1_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    queue_1_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            queue_1_ce0 <= ap_const_logic_1;
        else 
            queue_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_1_d0_assign_proc : process(j_cast6_reg_841, nj_reg_996, ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            queue_1_d0 <= nj_reg_996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            queue_1_d0 <= j_cast6_reg_841;
        else 
            queue_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    queue_1_we0_assign_proc : process(grp_fu_354_p2, tmp_26_fu_788_p2, ap_CS_fsm_state19, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_354_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_26_fu_788_p2 = ap_const_lv1_1)))) then 
            queue_1_we0 <= ap_const_logic_1;
        else 
            queue_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    queue_end_2_fu_432_p0 <= queue_end_fu_64;
    queue_end_2_fu_432_p2 <= std_logic_vector(signed(queue_end_2_fu_432_p0) + signed(ap_const_lv32_1));
    queue_end_3_fu_800_p0 <= queue_end_1_fu_80;
    queue_end_3_fu_800_p2 <= std_logic_vector(signed(queue_end_3_fu_800_p0) + signed(ap_const_lv32_1));
    queue_start_1_fu_511_p2 <= std_logic_vector(signed(queue_start_reg_287) + signed(ap_const_lv32_1));
    rev4_fu_666_p2 <= (tmp_18_fu_658_p3 xor ap_const_lv1_1);
    rev_fu_636_p2 <= (tmp_16_fu_628_p3 xor ap_const_lv1_1);
    storemerge1_cast_cas_fu_497_p3 <= 
        ap_const_lv32_0 when (tmp_8_reg_900(0) = '1') else 
        ap_const_lv32_40001;
    storemerge_fu_595_p3 <= 
        tmp_13_fu_575_p1 when (tmp_10_fu_569_p2(0) = '1') else 
        tmp_15_fu_589_p2;
    tmp1_fu_688_p2 <= (rev_fu_636_p2 and icmp_fu_652_p2);
    tmp2_fu_694_p2 <= (rev4_fu_666_p2 and icmp7_fu_682_p2);
    tmp_10_fu_569_p2 <= "1" when (signed(min_label_reg_310) < signed(ap_const_lv32_40001)) else "0";
    tmp_11_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_322),64));
    tmp_12_fu_487_p2 <= std_logic_vector(unsigned(tmp_20_cast_reg_870) + unsigned(tmp_7_cast_fu_483_p1));
    tmp_13_fu_575_p1 <= min_label_reg_310(8 - 1 downto 0);
    tmp_14_fu_585_p1 <= num_labels_reg_298(8 - 1 downto 0);
    tmp_15_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(tmp_14_fu_585_p1));
    tmp_16_fu_628_p3 <= ni_fu_615_p2(31 downto 31);
    tmp_17_fu_642_p4 <= ni_fu_615_p2(31 downto 9);
    tmp_18_fu_658_p3 <= nj_fu_623_p2(31 downto 31);
    tmp_19_fu_672_p4 <= nj_fu_623_p2(31 downto 9);
    tmp_1_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_384_p3),20));
    tmp_1_fu_523_p1 <= queue_1_q0(20 - 1 downto 0);
    tmp_20_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_455_p3),20));
    tmp_20_fu_706_p1 <= nj_fu_623_p2(20 - 1 downto 0);
    tmp_21_fu_710_p1 <= ni_fu_615_p2(11 - 1 downto 0);
    tmp_22_fu_755_p2 <= "1" when (signed(min_label_2_fu_751_p1) < signed(min_label_reg_310)) else "0";
    tmp_24_fu_777_p2 <= "1" when (grayOutput_q0 = grayOutput_load_1_reg_953) else "0";
    tmp_25_fu_782_p2 <= std_logic_vector(unsigned(dist_load_1_reg_1036) + unsigned(ap_const_lv32_1));
    tmp_26_fu_788_p2 <= "1" when (signed(dist_q0) > signed(tmp_25_fu_782_p2)) else "0";
    tmp_27_fu_794_p0 <= queue_end_1_fu_80;
        tmp_27_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_794_p0),64));

    tmp_28_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_416_p2),64));
    tmp_28_fu_722_p2 <= std_logic_vector(unsigned(tmp_34_cast_fu_714_p3) + unsigned(tmp_20_fu_706_p1));
    tmp_29_fu_735_p4 <= watershedOutput_q0(7 downto 1);
    tmp_2_fu_455_p3 <= (i1_reg_265 & ap_const_lv9_0);
    tmp_30_cast_fu_531_p3 <= (tmp_3_fu_527_p1 & ap_const_lv9_0);
        tmp_31_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_933),64));

    tmp_32_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_487_p2),64));
    tmp_34_cast_fu_714_p3 <= (tmp_21_fu_710_p1 & ap_const_lv9_0);
    tmp_35_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_722_p2),64));
    tmp_3_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_254),20));
    tmp_3_fu_527_p1 <= queue_0_q0(11 - 1 downto 0);
    tmp_5_fu_505_p2 <= "1" when (signed(queue_start_reg_287) < signed(queue_end_1_fu_80)) else "0";
    tmp_6_fu_426_p0 <= queue_end_fu_64;
        tmp_6_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_426_p0),64));

    tmp_7_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_276),20));
    tmp_7_fu_539_p2 <= std_logic_vector(unsigned(tmp_30_cast_fu_531_p3) + unsigned(tmp_1_fu_523_p1));
        tmp_9_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(queue_start_reg_287),64));

    tmp_fu_384_p3 <= (i_reg_243 & ap_const_lv9_0);
    tmp_s_fu_416_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_836) + unsigned(tmp_3_cast_fu_412_p1));

    watershedOutput_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_32_cast_fu_492_p1, watershedOutput_addr_1_reg_943, ap_CS_fsm_state13, ap_CS_fsm_state15, watershedOutput_addr_3_reg_1010, ap_CS_fsm_state19, ap_CS_fsm_state20, tmp_28_cast_fu_421_p1, tmp_35_cast_fu_728_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            watershedOutput_address0 <= watershedOutput_addr_3_reg_1010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            watershedOutput_address0 <= tmp_35_cast_fu_728_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            watershedOutput_address0 <= watershedOutput_addr_1_reg_943;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            watershedOutput_address0 <= tmp_32_cast_fu_492_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            watershedOutput_address0 <= tmp_28_cast_fu_421_p1(18 - 1 downto 0);
        else 
            watershedOutput_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    watershedOutput_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            watershedOutput_ce0 <= ap_const_logic_1;
        else 
            watershedOutput_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    watershedOutput_d0_assign_proc : process(watershedOutput_q0, ap_CS_fsm_state13, ap_CS_fsm_state20, storemerge_fu_595_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            watershedOutput_d0 <= watershedOutput_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            watershedOutput_d0 <= storemerge_fu_595_p3;
        else 
            watershedOutput_d0 <= "XXXXXXXX";
        end if; 
    end process;


    watershedOutput_we0_assign_proc : process(ap_CS_fsm_state13, exitcond_fu_551_p2, or_cond6_reg_1001, tmp_23_reg_1028, tmp_24_reg_1032, tmp_26_reg_1041, ap_CS_fsm_state20)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_26_reg_1041 = ap_const_lv1_1) and (tmp_24_reg_1032 = ap_const_lv1_1) and (tmp_23_reg_1028 = ap_const_lv1_1) and (or_cond6_reg_1001 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_551_p2 = ap_const_lv1_1)))) then 
            watershedOutput_we0 <= ap_const_logic_1;
        else 
            watershedOutput_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
