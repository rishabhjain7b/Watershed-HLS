// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RGBtoGray_512_512_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_g_address0,
        input_g_ce0,
        input_g_q0,
        input_b_address0,
        input_b_ce0,
        input_b_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [17:0] input_g_address0;
output   input_g_ce0;
input  [0:0] input_g_q0;
output  [17:0] input_b_address0;
output   input_b_ce0;
input  [0:0] input_b_q0;
output  [17:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [7:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg input_g_ce0;
reg input_b_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] mask_table1_address0;
reg    mask_table1_ce0;
wire   [51:0] mask_table1_q0;
wire   [5:0] one_half_table2_address0;
reg    one_half_table2_ce0;
wire   [52:0] one_half_table2_q0;
wire   [63:0] grp_fu_186_p2;
reg   [63:0] reg_198;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state27;
wire   [9:0] i_18_fu_209_p2;
reg   [9:0] i_18_reg_522;
wire    ap_CS_fsm_state2;
wire   [19:0] tmp_191_cast_fu_223_p1;
reg   [19:0] tmp_191_cast_reg_527;
wire   [0:0] exitcond1_fu_203_p2;
wire   [9:0] j_17_fu_233_p2;
reg   [9:0] j_17_reg_535;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_192_cast_fu_248_p1;
reg   [63:0] tmp_192_cast_reg_540;
wire   [0:0] exitcond_fu_227_p2;
reg   [0:0] input_g_load_reg_552;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_195_p1;
reg   [63:0] tmp_172_reg_562;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_170_fu_257_p3;
reg   [63:0] tmp_170_reg_572;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_190_p2;
reg   [63:0] tmp_173_reg_577;
wire    ap_CS_fsm_state20;
wire   [63:0] tmp_177_fu_265_p3;
reg   [63:0] tmp_177_reg_587;
wire   [63:0] t_V_1_fu_273_p1;
reg   [63:0] t_V_1_reg_592;
wire    ap_CS_fsm_state28;
wire   [0:0] tmp_i_i_fu_287_p2;
reg   [0:0] tmp_i_i_reg_598;
wire   [0:0] tmp_213_i_i_fu_293_p2;
reg   [0:0] tmp_213_i_i_reg_604;
reg   [51:0] mask_reg_619;
wire    ap_CS_fsm_state29;
reg   [52:0] one_half_reg_624;
reg   [10:0] tmp_V_3_reg_629;
wire    ap_CS_fsm_state30;
wire   [51:0] tmp_V_4_fu_414_p1;
reg   [51:0] tmp_V_4_reg_635;
wire   [7:0] val_V_fu_511_p3;
reg   [7:0] val_V_reg_640;
wire    ap_CS_fsm_state31;
reg   [9:0] i_reg_164;
reg   [9:0] j_reg_175;
wire    ap_CS_fsm_state32;
wire   [63:0] tmp_214_i_i_fu_309_p1;
reg   [63:0] grp_fu_186_p0;
reg   [63:0] grp_fu_186_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_195_p0;
wire   [18:0] tmp_fu_215_p3;
wire   [19:0] tmp_cast_fu_239_p1;
wire   [19:0] tmp_s_fu_243_p2;
wire   [10:0] tmp_V_fu_277_p4;
wire   [5:0] index_V_fu_299_p4;
wire   [0:0] p_Result_s_fu_315_p3;
wire   [63:0] one_half_cast_fu_330_p1;
wire   [63:0] p_Val2_s_fu_333_p2;
wire   [51:0] tmp_V_2_fu_338_p1;
wire   [51:0] tmp_216_i_i_fu_342_p2;
wire   [11:0] tmp_180_fu_353_p4;
wire   [51:0] xs_sig_V_fu_347_p2;
wire   [63:0] p_Result_11_fu_322_p3;
wire   [63:0] p_Result_12_fu_363_p3;
wire   [63:0] sel_tmp_v_fu_371_p3;
wire   [0:0] sel_tmp1_fu_382_p2;
wire   [0:0] sel_tmp2_fu_387_p2;
wire   [63:0] sel_tmp_fu_378_p1;
wire   [63:0] x_assign_1_fu_392_p3;
wire   [63:0] p_Val2_11_fu_400_p1;
wire   [53:0] mantissa_V_fu_418_p4;
wire   [11:0] tmp_i_i_i_i_cast4_fu_431_p1;
wire   [11:0] sh_assign_fu_434_p2;
wire   [10:0] tmp_i_i_i_fu_448_p2;
wire   [0:0] isNeg_fu_440_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_453_p1;
wire   [11:0] ush_fu_457_p3;
wire  signed [31:0] sh_assign_8_cast_fu_465_p1;
wire   [53:0] tmp_i_i_i_cast_130_fu_473_p1;
wire   [112:0] mantissa_V_2_cast_fu_427_p1;
wire   [112:0] tmp_i_i_i_129_fu_469_p1;
wire   [53:0] r_V_fu_477_p2;
wire   [0:0] tmp_185_fu_489_p3;
wire   [112:0] r_V_2_fu_483_p2;
wire   [7:0] tmp_181_fu_497_p1;
wire   [7:0] tmp_182_fu_501_p4;
reg   [31:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
end

RGBtoGray_512_512_2_mask_table1 #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table1_address0),
    .ce0(mask_table1_ce0),
    .q0(mask_table1_q0)
);

RGBtoGray_512_512_2_one_half_table2 #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table2_address0),
    .ce0(one_half_table2_ce0),
    .q0(one_half_table2_q0)
);

imageProcessing_dadd_64ns_64ns_64_6_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
imageProcessing_dadd_64ns_64ns_64_6_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_186_p0),
    .din1(grp_fu_186_p1),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

imageProcessing_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
imageProcessing_dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_172_reg_562),
    .din1(64'd4603462445507809378),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

imageProcessing_sitodp_32ns_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
imageProcessing_sitodp_32ns_64_5_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_195_p0),
    .ce(1'b1),
    .dout(grp_fu_195_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_227_p2 == 1'd1))) begin
        i_reg_164 <= i_18_reg_522;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_164 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_203_p2 == 1'd0))) begin
        j_reg_175 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        j_reg_175 <= j_17_reg_535;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_18_reg_522 <= i_18_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_g_load_reg_552 <= input_g_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_17_reg_535 <= j_17_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        mask_reg_619 <= mask_table1_q0;
        one_half_reg_624 <= one_half_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_198 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        t_V_1_reg_592 <= t_V_1_fu_273_p1;
        tmp_213_i_i_reg_604 <= tmp_213_i_i_fu_293_p2;
        tmp_i_i_reg_598 <= tmp_i_i_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_170_reg_572[2 : 0] <= tmp_170_fu_257_p3[2 : 0];
tmp_170_reg_572[6] <= tmp_170_fu_257_p3[6];
tmp_170_reg_572[8] <= tmp_170_fu_257_p3[8];
tmp_170_reg_572[15 : 13] <= tmp_170_fu_257_p3[15 : 13];
tmp_170_reg_572[17] <= tmp_170_fu_257_p3[17];
tmp_170_reg_572[22 : 19] <= tmp_170_fu_257_p3[22 : 19];
tmp_170_reg_572[26] <= tmp_170_fu_257_p3[26];
tmp_170_reg_572[28] <= tmp_170_fu_257_p3[28];
tmp_170_reg_572[35 : 33] <= tmp_170_fu_257_p3[35 : 33];
tmp_170_reg_572[37] <= tmp_170_fu_257_p3[37];
tmp_170_reg_572[43 : 39] <= tmp_170_fu_257_p3[43 : 39];
tmp_170_reg_572[49 : 48] <= tmp_170_fu_257_p3[49 : 48];
tmp_170_reg_572[52] <= tmp_170_fu_257_p3[52];
tmp_170_reg_572[54] <= tmp_170_fu_257_p3[54];
tmp_170_reg_572[62] <= tmp_170_fu_257_p3[62];
        tmp_173_reg_577 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_172_reg_562 <= grp_fu_195_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_177_reg_587[1] <= tmp_177_fu_265_p3[1];
tmp_177_reg_587[4] <= tmp_177_fu_265_p3[4];
tmp_177_reg_587[6] <= tmp_177_fu_265_p3[6];
tmp_177_reg_587[13 : 11] <= tmp_177_fu_265_p3[13 : 11];
tmp_177_reg_587[15] <= tmp_177_fu_265_p3[15];
tmp_177_reg_587[20 : 17] <= tmp_177_fu_265_p3[20 : 17];
tmp_177_reg_587[24] <= tmp_177_fu_265_p3[24];
tmp_177_reg_587[26] <= tmp_177_fu_265_p3[26];
tmp_177_reg_587[33 : 31] <= tmp_177_fu_265_p3[33 : 31];
tmp_177_reg_587[35] <= tmp_177_fu_265_p3[35];
tmp_177_reg_587[40 : 37] <= tmp_177_fu_265_p3[40 : 37];
tmp_177_reg_587[44] <= tmp_177_fu_265_p3[44];
tmp_177_reg_587[48] <= tmp_177_fu_265_p3[48];
tmp_177_reg_587[53 : 50] <= tmp_177_fu_265_p3[53 : 50];
tmp_177_reg_587[62] <= tmp_177_fu_265_p3[62];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_203_p2 == 1'd0))) begin
        tmp_191_cast_reg_527[18 : 9] <= tmp_191_cast_fu_223_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_227_p2 == 1'd0))) begin
        tmp_192_cast_reg_540[19 : 0] <= tmp_192_cast_fu_248_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_V_3_reg_629 <= {{p_Val2_11_fu_400_p1[62:52]}};
        tmp_V_4_reg_635 <= tmp_V_4_fu_414_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        val_V_reg_640 <= val_V_fu_511_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_203_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_203_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_186_p0 = reg_198;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_186_p0 = tmp_170_reg_572;
    end else begin
        grp_fu_186_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_186_p1 = tmp_177_reg_587;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_186_p1 = tmp_173_reg_577;
    end else begin
        grp_fu_186_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        input_b_ce0 = 1'b1;
    end else begin
        input_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_g_ce0 = 1'b1;
    end else begin
        input_g_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        mask_table1_ce0 = 1'b1;
    end else begin
        mask_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        one_half_table2_ce0 = 1'b1;
    end else begin
        one_half_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_203_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_227_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_203_p2 = ((i_reg_164 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_227_p2 = ((j_reg_175 == 10'd512) ? 1'b1 : 1'b0);

assign grp_fu_195_p0 = input_g_load_reg_552;

assign i_18_fu_209_p2 = (i_reg_164 + 10'd1);

assign index_V_fu_299_p4 = {{t_V_1_fu_273_p1[57:52]}};

assign input_b_address0 = tmp_192_cast_reg_540;

assign input_g_address0 = tmp_192_cast_fu_248_p1;

assign input_r_address0 = tmp_192_cast_reg_540;

assign isNeg_fu_440_p3 = sh_assign_fu_434_p2[32'd11];

assign j_17_fu_233_p2 = (j_reg_175 + 10'd1);

assign mantissa_V_2_cast_fu_427_p1 = mantissa_V_fu_418_p4;

assign mantissa_V_fu_418_p4 = {{{{1'd1}, {tmp_V_4_reg_635}}}, {1'd0}};

assign mask_table1_address0 = tmp_214_i_i_fu_309_p1;

assign one_half_cast_fu_330_p1 = one_half_reg_624;

assign one_half_table2_address0 = tmp_214_i_i_fu_309_p1;

assign output_r_address0 = tmp_192_cast_reg_540;

assign output_r_d0 = val_V_reg_640;

assign p_Result_11_fu_322_p3 = {{p_Result_s_fu_315_p3}, {63'd0}};

assign p_Result_12_fu_363_p3 = {{tmp_180_fu_353_p4}, {xs_sig_V_fu_347_p2}};

assign p_Result_s_fu_315_p3 = t_V_1_reg_592[32'd63];

assign p_Val2_11_fu_400_p1 = x_assign_1_fu_392_p3;

assign p_Val2_s_fu_333_p2 = (t_V_1_reg_592 + one_half_cast_fu_330_p1);

assign r_V_2_fu_483_p2 = mantissa_V_2_cast_fu_427_p1 << tmp_i_i_i_129_fu_469_p1;

assign r_V_fu_477_p2 = mantissa_V_fu_418_p4 >> tmp_i_i_i_cast_130_fu_473_p1;

assign sel_tmp1_fu_382_p2 = (tmp_i_i_reg_598 ^ 1'd1);

assign sel_tmp2_fu_387_p2 = (tmp_213_i_i_reg_604 & sel_tmp1_fu_382_p2);

assign sel_tmp_fu_378_p1 = sel_tmp_v_fu_371_p3;

assign sel_tmp_v_fu_371_p3 = ((tmp_i_i_reg_598[0:0] === 1'b1) ? p_Result_11_fu_322_p3 : p_Result_12_fu_363_p3);

assign sh_assign_8_cast_fu_465_p1 = $signed(ush_fu_457_p3);

assign sh_assign_fu_434_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast4_fu_431_p1));

assign t_V_1_fu_273_p1 = reg_198;

assign tmp_170_fu_257_p3 = ((input_r_q0[0:0] === 1'b1) ? 64'd4635065681836695879 : 64'd0);

assign tmp_177_fu_265_p3 = ((input_b_q0[0:0] === 1'b1) ? 64'd4628875695255107666 : 64'd0);

assign tmp_180_fu_353_p4 = {{p_Val2_s_fu_333_p2[63:52]}};

assign tmp_181_fu_497_p1 = tmp_185_fu_489_p3;

assign tmp_182_fu_501_p4 = {{r_V_2_fu_483_p2[60:53]}};

assign tmp_185_fu_489_p3 = r_V_fu_477_p2[32'd53];

assign tmp_191_cast_fu_223_p1 = tmp_fu_215_p3;

assign tmp_192_cast_fu_248_p1 = tmp_s_fu_243_p2;

assign tmp_213_i_i_fu_293_p2 = ((tmp_V_fu_277_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign tmp_214_i_i_fu_309_p1 = index_V_fu_299_p4;

assign tmp_216_i_i_fu_342_p2 = (mask_reg_619 ^ 52'd4503599627370495);

assign tmp_V_2_fu_338_p1 = p_Val2_s_fu_333_p2[51:0];

assign tmp_V_4_fu_414_p1 = p_Val2_11_fu_400_p1[51:0];

assign tmp_V_fu_277_p4 = {{t_V_1_fu_273_p1[62:52]}};

assign tmp_cast_fu_239_p1 = j_reg_175;

assign tmp_fu_215_p3 = {{i_reg_164}, {9'd0}};

assign tmp_i_i_fu_287_p2 = ((tmp_V_fu_277_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign tmp_i_i_i_129_fu_469_p1 = $unsigned(sh_assign_8_cast_fu_465_p1);

assign tmp_i_i_i_cast_130_fu_473_p1 = $unsigned(sh_assign_8_cast_fu_465_p1);

assign tmp_i_i_i_cast_fu_453_p1 = $signed(tmp_i_i_i_fu_448_p2);

assign tmp_i_i_i_fu_448_p2 = (11'd1023 - tmp_V_3_reg_629);

assign tmp_i_i_i_i_cast4_fu_431_p1 = tmp_V_3_reg_629;

assign tmp_s_fu_243_p2 = (tmp_cast_fu_239_p1 + tmp_191_cast_reg_527);

assign ush_fu_457_p3 = ((isNeg_fu_440_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_453_p1 : sh_assign_fu_434_p2);

assign val_V_fu_511_p3 = ((isNeg_fu_440_p3[0:0] === 1'b1) ? tmp_181_fu_497_p1 : tmp_182_fu_501_p4);

assign x_assign_1_fu_392_p3 = ((sel_tmp2_fu_387_p2[0:0] === 1'b1) ? reg_198 : sel_tmp_fu_378_p1);

assign xs_sig_V_fu_347_p2 = (tmp_V_2_fu_338_p1 & tmp_216_i_i_fu_342_p2);

always @ (posedge ap_clk) begin
    tmp_191_cast_reg_527[8:0] <= 9'b000000000;
    tmp_191_cast_reg_527[19] <= 1'b0;
    tmp_192_cast_reg_540[63:20] <= 44'b00000000000000000000000000000000000000000000;
    tmp_170_reg_572[5:3] <= 3'b000;
    tmp_170_reg_572[7:7] <= 1'b0;
    tmp_170_reg_572[12:9] <= 4'b0000;
    tmp_170_reg_572[16:16] <= 1'b0;
    tmp_170_reg_572[18:18] <= 1'b0;
    tmp_170_reg_572[25:23] <= 3'b000;
    tmp_170_reg_572[27:27] <= 1'b0;
    tmp_170_reg_572[32:29] <= 4'b0000;
    tmp_170_reg_572[36:36] <= 1'b0;
    tmp_170_reg_572[38:38] <= 1'b0;
    tmp_170_reg_572[47:44] <= 4'b0000;
    tmp_170_reg_572[51:50] <= 2'b00;
    tmp_170_reg_572[53:53] <= 1'b0;
    tmp_170_reg_572[61:55] <= 7'b0000000;
    tmp_170_reg_572[63] <= 1'b0;
    tmp_177_reg_587[0] <= 1'b0;
    tmp_177_reg_587[3:2] <= 2'b00;
    tmp_177_reg_587[5:5] <= 1'b0;
    tmp_177_reg_587[10:7] <= 4'b0000;
    tmp_177_reg_587[14:14] <= 1'b0;
    tmp_177_reg_587[16:16] <= 1'b0;
    tmp_177_reg_587[23:21] <= 3'b000;
    tmp_177_reg_587[25:25] <= 1'b0;
    tmp_177_reg_587[30:27] <= 4'b0000;
    tmp_177_reg_587[34:34] <= 1'b0;
    tmp_177_reg_587[36:36] <= 1'b0;
    tmp_177_reg_587[43:41] <= 3'b000;
    tmp_177_reg_587[47:45] <= 3'b000;
    tmp_177_reg_587[49:49] <= 1'b0;
    tmp_177_reg_587[61:54] <= 8'b00000000;
    tmp_177_reg_587[63] <= 1'b0;
end

endmodule //RGBtoGray_512_512_2
