// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dilate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] src_address0;
output   src_ce0;
input  [7:0] src_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[17:0] src_address0;
reg src_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] imKernel_address0;
reg    imKernel_ce0;
wire   [0:0] imKernel_q0;
wire   [17:0] sureBackground_address0;
reg    sureBackground_ce0;
reg    sureBackground_we0;
wire   [9:0] r_1_fu_253_p2;
reg   [9:0] r_1_reg_583;
wire    ap_CS_fsm_state2;
wire   [19:0] tmp_153_cast_fu_267_p1;
reg   [19:0] tmp_153_cast_reg_588;
wire   [0:0] exitcond8_fu_247_p2;
wire   [9:0] c_1_fu_277_p2;
reg   [9:0] c_1_reg_596;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_154_cast_fu_292_p1;
reg   [63:0] tmp_154_cast_reg_601;
wire   [0:0] exitcond7_fu_271_p2;
wire   [1:0] i_14_fu_303_p2;
reg   [1:0] i_14_reg_614;
wire    ap_CS_fsm_state5;
wire   [9:0] r_2_fu_315_p2;
reg   [9:0] r_2_reg_622;
wire    ap_CS_fsm_state6;
wire   [19:0] tmp_156_cast_fu_329_p1;
reg   [19:0] tmp_156_cast_reg_628;
wire   [0:0] exitcond5_fu_309_p2;
wire   [9:0] c_3_fu_339_p2;
reg   [9:0] c_3_reg_636;
wire    ap_CS_fsm_state7;
wire   [1:0] kr_1_fu_355_p2;
reg   [1:0] kr_1_reg_645;
wire    ap_CS_fsm_state8;
wire   [9:0] rr_fu_361_p2;
reg   [9:0] rr_reg_650;
wire   [0:0] exitcond3_fu_349_p2;
wire   [19:0] tmp_162_cast_fu_374_p1;
reg   [19:0] tmp_162_cast_reg_655;
wire   [4:0] tmp_149_fu_394_p2;
reg   [4:0] tmp_149_reg_660;
wire   [1:0] kc_1_fu_429_p2;
reg   [1:0] kc_1_reg_668;
wire    ap_CS_fsm_state9;
wire   [9:0] cc_fu_435_p2;
reg   [9:0] cc_reg_673;
wire   [0:0] exitcond2_fu_423_p2;
reg   [7:0] src_load_2_reg_688;
wire    ap_CS_fsm_state10;
reg   [0:0] imKernel_load_reg_693;
wire   [31:0] max_val_3_fu_522_p3;
wire    ap_CS_fsm_state11;
wire   [9:0] r_3_fu_536_p2;
reg   [9:0] r_3_reg_706;
wire    ap_CS_fsm_state12;
wire   [19:0] tmp_158_cast_fu_550_p1;
reg   [19:0] tmp_158_cast_reg_711;
wire   [0:0] exitcond1_fu_530_p2;
wire   [9:0] c_2_fu_560_p2;
reg   [9:0] c_2_reg_719;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_159_cast_fu_575_p1;
reg   [63:0] tmp_159_cast_reg_724;
wire   [0:0] exitcond_fu_554_p2;
reg   [17:0] tmp_address0;
reg    tmp_ce0;
reg    tmp_we0;
reg   [7:0] tmp_d0;
wire   [7:0] tmp_q0;
reg   [9:0] r_reg_123;
reg   [9:0] c_reg_134;
wire    ap_CS_fsm_state4;
reg   [1:0] i_reg_145;
reg   [9:0] r1_reg_156;
wire   [0:0] exitcond4_fu_333_p2;
wire   [0:0] exitcond6_fu_297_p2;
reg   [9:0] c2_reg_167;
reg   [31:0] max_val_reg_179;
reg   [1:0] kr_reg_191;
reg   [31:0] max_val_1_reg_202;
reg   [1:0] kc_reg_214;
reg   [9:0] r3_reg_225;
reg   [9:0] c4_reg_236;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_160_cast_fu_414_p1;
wire   [63:0] tmp_165_cast_fu_449_p1;
wire  signed [63:0] tmp_166_cast_fu_463_p1;
wire   [7:0] tmp_145_fu_400_p1;
wire   [18:0] tmp_s_fu_259_p3;
wire   [19:0] tmp_cast_fu_283_p1;
wire   [19:0] tmp_141_fu_287_p2;
wire   [18:0] tmp_142_fu_321_p3;
wire   [9:0] kr_cast9_fu_345_p1;
wire   [18:0] tmp_147_fu_366_p3;
wire   [3:0] tmp_148_fu_382_p3;
wire   [4:0] p_shl_cast_fu_390_p1;
wire   [4:0] tmp_137_cast_fu_378_p1;
wire   [19:0] tmp_136_cast_fu_405_p1;
wire   [19:0] tmp_146_fu_409_p2;
wire   [9:0] kc_cast6_fu_419_p1;
wire   [19:0] tmp_138_cast_fu_440_p1;
wire   [19:0] tmp_151_fu_444_p2;
wire   [4:0] tmp_139_cast_fu_454_p1;
wire   [4:0] tmp_152_fu_458_p2;
wire   [9:0] tmp_132_fu_468_p2;
wire   [8:0] tmp_195_cast_fu_480_p1;
wire   [8:0] tmp_197_cast_fu_483_p1;
wire   [8:0] max_val_5_fu_486_p2;
wire   [31:0] max_val_5_cast_fu_496_p1;
wire   [0:0] tmp_140_fu_500_p2;
wire   [30:0] max_val_5_cast3_fu_492_p1;
wire   [30:0] tmp_153_fu_506_p1;
wire   [30:0] val_0_max_val_1_fu_510_p3;
wire   [0:0] tmp_150_fu_472_p3;
wire   [31:0] val_0_max_val_1_cast_fu_518_p1;
wire   [18:0] tmp_143_fu_542_p3;
wire   [19:0] tmp_134_cast_fu_566_p1;
wire   [19:0] tmp_144_fu_570_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

dilate_imKernel #(
    .DataWidth( 1 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
imKernel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(imKernel_address0),
    .ce0(imKernel_ce0),
    .q0(imKernel_q0)
);

dilate_sureBackground #(
    .DataWidth( 8 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
sureBackground_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sureBackground_address0),
    .ce0(sureBackground_ce0),
    .we0(sureBackground_we0),
    .d0(tmp_q0)
);

morphologyEx_temp #(
    .DataWidth( 8 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_address0),
    .ce0(tmp_ce0),
    .we0(tmp_we0),
    .d0(tmp_d0),
    .q0(tmp_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        c2_reg_167 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_349_p2 == 1'd1))) begin
        c2_reg_167 <= c_3_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_530_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        c4_reg_236 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        c4_reg_236 <= c_2_reg_719;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_reg_134 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_134 <= c_1_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_145 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond1_fu_530_p2 == 1'd1))) begin
        i_reg_145 <= i_14_reg_614;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        kc_reg_214 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        kc_reg_214 <= kc_1_reg_668;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        kr_reg_191 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_423_p2 == 1'd1))) begin
        kr_reg_191 <= kr_1_reg_645;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        max_val_1_reg_202 <= max_val_reg_179;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        max_val_1_reg_202 <= max_val_3_fu_522_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        max_val_reg_179 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_423_p2 == 1'd1))) begin
        max_val_reg_179 <= max_val_1_reg_202;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        r1_reg_156 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_333_p2 == 1'd1))) begin
        r1_reg_156 <= r_2_reg_622;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        r3_reg_225 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_554_p2 == 1'd1))) begin
        r3_reg_225 <= r_3_reg_706;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_reg_123 <= r_1_reg_583;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_reg_123 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_reg_596 <= c_1_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        c_2_reg_719 <= c_2_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_3_reg_636 <= c_3_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        cc_reg_673 <= cc_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_14_reg_614 <= i_14_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        imKernel_load_reg_693 <= imKernel_q0;
        src_load_2_reg_688 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kc_1_reg_668 <= kc_1_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        kr_1_reg_645 <= kr_1_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_1_reg_583 <= r_1_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_2_reg_622 <= r_2_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        r_3_reg_706 <= r_3_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        rr_reg_650 <= rr_fu_361_p2;
        tmp_149_reg_660 <= tmp_149_fu_394_p2;
        tmp_162_cast_reg_655[18 : 9] <= tmp_162_cast_fu_374_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_153_cast_reg_588[18 : 9] <= tmp_153_cast_fu_267_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_154_cast_reg_601[19 : 0] <= tmp_154_cast_fu_292_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_156_cast_reg_628[18 : 9] <= tmp_156_cast_fu_329_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_530_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_158_cast_reg_711[18 : 9] <= tmp_158_cast_fu_550_p1[18 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_554_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_159_cast_reg_724[19 : 0] <= tmp_159_cast_fu_575_p1[19 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (exitcond6_fu_297_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond6_fu_297_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        imKernel_ce0 = 1'b1;
    end else begin
        imKernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        src_address0 = tmp_165_cast_fu_449_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        src_address0 = tmp_154_cast_fu_292_p1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sureBackground_ce0 = 1'b1;
    end else begin
        sureBackground_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sureBackground_we0 = 1'b1;
    end else begin
        sureBackground_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_address0 = tmp_159_cast_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_address0 = tmp_160_cast_fu_414_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_address0 = tmp_154_cast_reg_601;
    end else begin
        tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        tmp_ce0 = 1'b1;
    end else begin
        tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_d0 = tmp_145_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_d0 = src_q0;
    end else begin
        tmp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_349_p2 == 1'd1)))) begin
        tmp_we0 = 1'b1;
    end else begin
        tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond8_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond7_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond6_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond5_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_349_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_423_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond1_fu_530_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_554_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_1_fu_277_p2 = (c_reg_134 + 10'd1);

assign c_2_fu_560_p2 = (c4_reg_236 + 10'd1);

assign c_3_fu_339_p2 = (c2_reg_167 + 10'd1);

assign cc_fu_435_p2 = (kc_cast6_fu_419_p1 + c_3_reg_636);

assign exitcond1_fu_530_p2 = ((r3_reg_225 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond2_fu_423_p2 = ((kc_reg_214 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_349_p2 = ((kr_reg_191 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond4_fu_333_p2 = ((c2_reg_167 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond5_fu_309_p2 = ((r1_reg_156 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond6_fu_297_p2 = ((i_reg_145 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond7_fu_271_p2 = ((c_reg_134 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond8_fu_247_p2 = ((r_reg_123 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_554_p2 = ((c4_reg_236 == 10'd512) ? 1'b1 : 1'b0);

assign i_14_fu_303_p2 = (i_reg_145 + 2'd1);

assign imKernel_address0 = tmp_166_cast_fu_463_p1;

assign kc_1_fu_429_p2 = (kc_reg_214 + 2'd1);

assign kc_cast6_fu_419_p1 = kc_reg_214;

assign kr_1_fu_355_p2 = (kr_reg_191 + 2'd1);

assign kr_cast9_fu_345_p1 = kr_reg_191;

assign max_val_3_fu_522_p3 = ((tmp_150_fu_472_p3[0:0] === 1'b1) ? max_val_1_reg_202 : val_0_max_val_1_cast_fu_518_p1);

assign max_val_5_cast3_fu_492_p1 = max_val_5_fu_486_p2;

assign max_val_5_cast_fu_496_p1 = max_val_5_fu_486_p2;

assign max_val_5_fu_486_p2 = (tmp_195_cast_fu_480_p1 + tmp_197_cast_fu_483_p1);

assign p_shl_cast_fu_390_p1 = tmp_148_fu_382_p3;

assign r_1_fu_253_p2 = (r_reg_123 + 10'd1);

assign r_2_fu_315_p2 = (r1_reg_156 + 10'd1);

assign r_3_fu_536_p2 = (r3_reg_225 + 10'd1);

assign rr_fu_361_p2 = (r_2_reg_622 + kr_cast9_fu_345_p1);

assign sureBackground_address0 = tmp_159_cast_reg_724;

assign tmp_132_fu_468_p2 = (rr_reg_650 | cc_reg_673);

assign tmp_134_cast_fu_566_p1 = c4_reg_236;

assign tmp_136_cast_fu_405_p1 = c2_reg_167;

assign tmp_137_cast_fu_378_p1 = kr_reg_191;

assign tmp_138_cast_fu_440_p1 = cc_fu_435_p2;

assign tmp_139_cast_fu_454_p1 = kc_reg_214;

assign tmp_140_fu_500_p2 = (($signed(max_val_5_cast_fu_496_p1) > $signed(max_val_1_reg_202)) ? 1'b1 : 1'b0);

assign tmp_141_fu_287_p2 = (tmp_153_cast_reg_588 + tmp_cast_fu_283_p1);

assign tmp_142_fu_321_p3 = {{r1_reg_156}, {9'd0}};

assign tmp_143_fu_542_p3 = {{r3_reg_225}, {9'd0}};

assign tmp_144_fu_570_p2 = (tmp_158_cast_reg_711 + tmp_134_cast_fu_566_p1);

assign tmp_145_fu_400_p1 = max_val_reg_179[7:0];

assign tmp_146_fu_409_p2 = (tmp_156_cast_reg_628 + tmp_136_cast_fu_405_p1);

assign tmp_147_fu_366_p3 = {{rr_fu_361_p2}, {9'd0}};

assign tmp_148_fu_382_p3 = {{kr_reg_191}, {2'd0}};

assign tmp_149_fu_394_p2 = (p_shl_cast_fu_390_p1 - tmp_137_cast_fu_378_p1);

assign tmp_150_fu_472_p3 = tmp_132_fu_468_p2[32'd9];

assign tmp_151_fu_444_p2 = (tmp_138_cast_fu_440_p1 + tmp_162_cast_reg_655);

assign tmp_152_fu_458_p2 = (tmp_139_cast_fu_454_p1 + tmp_149_reg_660);

assign tmp_153_cast_fu_267_p1 = tmp_s_fu_259_p3;

assign tmp_153_fu_506_p1 = max_val_1_reg_202[30:0];

assign tmp_154_cast_fu_292_p1 = tmp_141_fu_287_p2;

assign tmp_156_cast_fu_329_p1 = tmp_142_fu_321_p3;

assign tmp_158_cast_fu_550_p1 = tmp_143_fu_542_p3;

assign tmp_159_cast_fu_575_p1 = tmp_144_fu_570_p2;

assign tmp_160_cast_fu_414_p1 = tmp_146_fu_409_p2;

assign tmp_162_cast_fu_374_p1 = tmp_147_fu_366_p3;

assign tmp_165_cast_fu_449_p1 = tmp_151_fu_444_p2;

assign tmp_166_cast_fu_463_p1 = $signed(tmp_152_fu_458_p2);

assign tmp_195_cast_fu_480_p1 = src_load_2_reg_688;

assign tmp_197_cast_fu_483_p1 = imKernel_load_reg_693;

assign tmp_cast_fu_283_p1 = c_reg_134;

assign tmp_s_fu_259_p3 = {{r_reg_123}, {9'd0}};

assign val_0_max_val_1_cast_fu_518_p1 = val_0_max_val_1_fu_510_p3;

assign val_0_max_val_1_fu_510_p3 = ((tmp_140_fu_500_p2[0:0] === 1'b1) ? max_val_5_cast3_fu_492_p1 : tmp_153_fu_506_p1);

always @ (posedge ap_clk) begin
    tmp_153_cast_reg_588[8:0] <= 9'b000000000;
    tmp_153_cast_reg_588[19] <= 1'b0;
    tmp_154_cast_reg_601[63:20] <= 44'b00000000000000000000000000000000000000000000;
    tmp_156_cast_reg_628[8:0] <= 9'b000000000;
    tmp_156_cast_reg_628[19] <= 1'b0;
    tmp_162_cast_reg_655[8:0] <= 9'b000000000;
    tmp_162_cast_reg_655[19] <= 1'b0;
    tmp_158_cast_reg_711[8:0] <= 9'b000000000;
    tmp_158_cast_reg_711[19] <= 1'b0;
    tmp_159_cast_reg_724[63:20] <= 44'b00000000000000000000000000000000000000000000;
end

endmodule //dilate
