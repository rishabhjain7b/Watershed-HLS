// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="imageProcessing,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.606000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4103,HLS_SYN_DSP=27,HLS_SYN_FF=7740,HLS_SYN_LUT=17403,HLS_VERSION=2018_3}" *)

module imageProcessing (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] i_12_fu_185_p2;
reg   [9:0] i_12_reg_234;
wire    ap_CS_fsm_state2;
wire   [19:0] tmp_90_cast_fu_199_p1;
reg   [19:0] tmp_90_cast_reg_239;
wire   [0:0] exitcond1_fu_179_p2;
wire   [9:0] j_11_fu_209_p2;
wire    ap_CS_fsm_state3;
reg   [17:0] inputImage_r_address0;
reg    inputImage_r_ce0;
reg    inputImage_r_we0;
wire   [0:0] inputImage_r_q0;
reg   [17:0] inputImage_g_address0;
reg    inputImage_g_ce0;
reg    inputImage_g_we0;
wire   [0:0] inputImage_g_q0;
reg   [17:0] inputImage_b_address0;
reg    inputImage_b_ce0;
reg    inputImage_b_we0;
wire   [0:0] inputImage_b_q0;
wire    grp_image_segmentation_fu_141_ap_start;
wire    grp_image_segmentation_fu_141_ap_done;
wire    grp_image_segmentation_fu_141_ap_idle;
wire    grp_image_segmentation_fu_141_ap_ready;
wire   [17:0] grp_image_segmentation_fu_141_input_image_r_address0;
wire    grp_image_segmentation_fu_141_input_image_r_ce0;
wire   [17:0] grp_image_segmentation_fu_141_input_image_g_address0;
wire    grp_image_segmentation_fu_141_input_image_g_ce0;
wire   [17:0] grp_image_segmentation_fu_141_input_image_b_address0;
wire    grp_image_segmentation_fu_141_input_image_b_ce0;
wire   [17:0] grp_image_segmentation_fu_141_output_image_r_address0;
wire    grp_image_segmentation_fu_141_output_image_r_ce0;
wire    grp_image_segmentation_fu_141_output_image_r_we0;
wire   [0:0] grp_image_segmentation_fu_141_output_image_r_d0;
wire   [17:0] grp_image_segmentation_fu_141_output_image_g_address0;
wire    grp_image_segmentation_fu_141_output_image_g_ce0;
wire    grp_image_segmentation_fu_141_output_image_g_we0;
wire   [0:0] grp_image_segmentation_fu_141_output_image_g_d0;
wire   [17:0] grp_image_segmentation_fu_141_output_image_b_address0;
wire    grp_image_segmentation_fu_141_output_image_b_ce0;
wire    grp_image_segmentation_fu_141_output_image_b_we0;
wire   [0:0] grp_image_segmentation_fu_141_output_image_b_d0;
reg   [9:0] i_reg_119;
wire   [0:0] exitcond_fu_203_p2;
reg   [9:0] j_reg_130;
reg    grp_image_segmentation_fu_141_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_91_cast_fu_224_p1;
wire   [18:0] tmp_fu_191_p3;
wire   [19:0] tmp_cast_fu_215_p1;
wire   [19:0] tmp_s_fu_219_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_image_segmentation_fu_141_ap_start_reg = 1'b0;
end

imageProcessing_inputImage_r #(
    .DataWidth( 1 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
inputImage_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inputImage_r_address0),
    .ce0(inputImage_r_ce0),
    .we0(inputImage_r_we0),
    .d0(1'd1),
    .q0(inputImage_r_q0)
);

imageProcessing_inputImage_r #(
    .DataWidth( 1 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
inputImage_g_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inputImage_g_address0),
    .ce0(inputImage_g_ce0),
    .we0(inputImage_g_we0),
    .d0(1'd0),
    .q0(inputImage_g_q0)
);

imageProcessing_inputImage_r #(
    .DataWidth( 1 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
inputImage_b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inputImage_b_address0),
    .ce0(inputImage_b_ce0),
    .we0(inputImage_b_we0),
    .d0(1'd1),
    .q0(inputImage_b_q0)
);

imageProcessing_finalOutputImage_r #(
    .DataWidth( 1 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
finalOutputImage_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_image_segmentation_fu_141_output_image_r_address0),
    .ce0(grp_image_segmentation_fu_141_output_image_r_ce0),
    .we0(grp_image_segmentation_fu_141_output_image_r_we0),
    .d0(grp_image_segmentation_fu_141_output_image_r_d0)
);

imageProcessing_finalOutputImage_r #(
    .DataWidth( 1 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
finalOutputImage_g_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_image_segmentation_fu_141_output_image_g_address0),
    .ce0(grp_image_segmentation_fu_141_output_image_g_ce0),
    .we0(grp_image_segmentation_fu_141_output_image_g_we0),
    .d0(grp_image_segmentation_fu_141_output_image_g_d0)
);

imageProcessing_finalOutputImage_r #(
    .DataWidth( 1 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
finalOutputImage_b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_image_segmentation_fu_141_output_image_b_address0),
    .ce0(grp_image_segmentation_fu_141_output_image_b_ce0),
    .we0(grp_image_segmentation_fu_141_output_image_b_we0),
    .d0(grp_image_segmentation_fu_141_output_image_b_d0)
);

image_segmentation grp_image_segmentation_fu_141(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_image_segmentation_fu_141_ap_start),
    .ap_done(grp_image_segmentation_fu_141_ap_done),
    .ap_idle(grp_image_segmentation_fu_141_ap_idle),
    .ap_ready(grp_image_segmentation_fu_141_ap_ready),
    .input_image_r_address0(grp_image_segmentation_fu_141_input_image_r_address0),
    .input_image_r_ce0(grp_image_segmentation_fu_141_input_image_r_ce0),
    .input_image_r_q0(inputImage_r_q0),
    .input_image_g_address0(grp_image_segmentation_fu_141_input_image_g_address0),
    .input_image_g_ce0(grp_image_segmentation_fu_141_input_image_g_ce0),
    .input_image_g_q0(inputImage_g_q0),
    .input_image_b_address0(grp_image_segmentation_fu_141_input_image_b_address0),
    .input_image_b_ce0(grp_image_segmentation_fu_141_input_image_b_ce0),
    .input_image_b_q0(inputImage_b_q0),
    .output_image_r_address0(grp_image_segmentation_fu_141_output_image_r_address0),
    .output_image_r_ce0(grp_image_segmentation_fu_141_output_image_r_ce0),
    .output_image_r_we0(grp_image_segmentation_fu_141_output_image_r_we0),
    .output_image_r_d0(grp_image_segmentation_fu_141_output_image_r_d0),
    .output_image_g_address0(grp_image_segmentation_fu_141_output_image_g_address0),
    .output_image_g_ce0(grp_image_segmentation_fu_141_output_image_g_ce0),
    .output_image_g_we0(grp_image_segmentation_fu_141_output_image_g_we0),
    .output_image_g_d0(grp_image_segmentation_fu_141_output_image_g_d0),
    .output_image_b_address0(grp_image_segmentation_fu_141_output_image_b_address0),
    .output_image_b_ce0(grp_image_segmentation_fu_141_output_image_b_ce0),
    .output_image_b_we0(grp_image_segmentation_fu_141_output_image_b_we0),
    .output_image_b_d0(grp_image_segmentation_fu_141_output_image_b_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_image_segmentation_fu_141_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_image_segmentation_fu_141_ap_start_reg <= 1'b1;
        end else if ((grp_image_segmentation_fu_141_ap_ready == 1'b1)) begin
            grp_image_segmentation_fu_141_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_203_p2 == 1'd1))) begin
        i_reg_119 <= i_12_reg_234;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_119 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_130 <= 10'd0;
    end else if (((exitcond_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_130 <= j_11_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_12_reg_234 <= i_12_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_90_cast_reg_239[18 : 9] <= tmp_90_cast_fu_199_p1[18 : 9];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_image_segmentation_fu_141_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_image_segmentation_fu_141_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputImage_b_address0 = tmp_91_cast_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inputImage_b_address0 = grp_image_segmentation_fu_141_input_image_b_address0;
    end else begin
        inputImage_b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputImage_b_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inputImage_b_ce0 = grp_image_segmentation_fu_141_input_image_b_ce0;
    end else begin
        inputImage_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        inputImage_b_we0 = 1'b1;
    end else begin
        inputImage_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputImage_g_address0 = tmp_91_cast_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inputImage_g_address0 = grp_image_segmentation_fu_141_input_image_g_address0;
    end else begin
        inputImage_g_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputImage_g_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inputImage_g_ce0 = grp_image_segmentation_fu_141_input_image_g_ce0;
    end else begin
        inputImage_g_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        inputImage_g_we0 = 1'b1;
    end else begin
        inputImage_g_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputImage_r_address0 = tmp_91_cast_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inputImage_r_address0 = grp_image_segmentation_fu_141_input_image_r_address0;
    end else begin
        inputImage_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputImage_r_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inputImage_r_ce0 = grp_image_segmentation_fu_141_input_image_r_ce0;
    end else begin
        inputImage_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        inputImage_r_we0 = 1'b1;
    end else begin
        inputImage_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_203_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_image_segmentation_fu_141_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign exitcond1_fu_179_p2 = ((i_reg_119 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_203_p2 = ((j_reg_130 == 10'd512) ? 1'b1 : 1'b0);

assign grp_image_segmentation_fu_141_ap_start = grp_image_segmentation_fu_141_ap_start_reg;

assign i_12_fu_185_p2 = (i_reg_119 + 10'd1);

assign j_11_fu_209_p2 = (j_reg_130 + 10'd1);

assign tmp_90_cast_fu_199_p1 = tmp_fu_191_p3;

assign tmp_91_cast_fu_224_p1 = tmp_s_fu_219_p2;

assign tmp_cast_fu_215_p1 = j_reg_130;

assign tmp_fu_191_p3 = {{i_reg_119}, {9'd0}};

assign tmp_s_fu_219_p2 = (tmp_90_cast_reg_239 + tmp_cast_fu_215_p1);

always @ (posedge ap_clk) begin
    tmp_90_cast_reg_239[8:0] <= 9'b000000000;
    tmp_90_cast_reg_239[19] <= 1'b0;
end

endmodule //imageProcessing
