// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "imageProcessing.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic imageProcessing::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic imageProcessing::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> imageProcessing::ap_ST_fsm_state1 = "1";
const sc_lv<4> imageProcessing::ap_ST_fsm_state2 = "10";
const sc_lv<4> imageProcessing::ap_ST_fsm_state3 = "100";
const sc_lv<4> imageProcessing::ap_ST_fsm_state4 = "1000";
const sc_lv<32> imageProcessing::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> imageProcessing::ap_const_lv32_1 = "1";
const sc_lv<1> imageProcessing::ap_const_lv1_0 = "0";
const sc_lv<32> imageProcessing::ap_const_lv32_2 = "10";
const sc_lv<10> imageProcessing::ap_const_lv10_0 = "0000000000";
const sc_lv<1> imageProcessing::ap_const_lv1_1 = "1";
const sc_lv<32> imageProcessing::ap_const_lv32_3 = "11";
const sc_lv<10> imageProcessing::ap_const_lv10_200 = "1000000000";
const sc_lv<10> imageProcessing::ap_const_lv10_1 = "1";
const sc_lv<9> imageProcessing::ap_const_lv9_0 = "000000000";
const bool imageProcessing::ap_const_boolean_1 = true;

imageProcessing::imageProcessing(sc_module_name name) : sc_module(name), mVcdFile(0) {
    inputImage_r_U = new imageProcessing_inputImage_r("inputImage_r_U");
    inputImage_r_U->clk(ap_clk);
    inputImage_r_U->reset(ap_rst);
    inputImage_r_U->address0(inputImage_r_address0);
    inputImage_r_U->ce0(inputImage_r_ce0);
    inputImage_r_U->we0(inputImage_r_we0);
    inputImage_r_U->d0(ap_var_for_const0);
    inputImage_r_U->q0(inputImage_r_q0);
    inputImage_g_U = new imageProcessing_inputImage_r("inputImage_g_U");
    inputImage_g_U->clk(ap_clk);
    inputImage_g_U->reset(ap_rst);
    inputImage_g_U->address0(inputImage_g_address0);
    inputImage_g_U->ce0(inputImage_g_ce0);
    inputImage_g_U->we0(inputImage_g_we0);
    inputImage_g_U->d0(ap_var_for_const1);
    inputImage_g_U->q0(inputImage_g_q0);
    inputImage_b_U = new imageProcessing_inputImage_r("inputImage_b_U");
    inputImage_b_U->clk(ap_clk);
    inputImage_b_U->reset(ap_rst);
    inputImage_b_U->address0(inputImage_b_address0);
    inputImage_b_U->ce0(inputImage_b_ce0);
    inputImage_b_U->we0(inputImage_b_we0);
    inputImage_b_U->d0(ap_var_for_const0);
    inputImage_b_U->q0(inputImage_b_q0);
    finalOutputImage_r_U = new imageProcessing_finalOutputImage_r("finalOutputImage_r_U");
    finalOutputImage_r_U->clk(ap_clk);
    finalOutputImage_r_U->reset(ap_rst);
    finalOutputImage_r_U->address0(grp_image_segmentation_fu_141_output_image_r_address0);
    finalOutputImage_r_U->ce0(grp_image_segmentation_fu_141_output_image_r_ce0);
    finalOutputImage_r_U->we0(grp_image_segmentation_fu_141_output_image_r_we0);
    finalOutputImage_r_U->d0(grp_image_segmentation_fu_141_output_image_r_d0);
    finalOutputImage_g_U = new imageProcessing_finalOutputImage_r("finalOutputImage_g_U");
    finalOutputImage_g_U->clk(ap_clk);
    finalOutputImage_g_U->reset(ap_rst);
    finalOutputImage_g_U->address0(grp_image_segmentation_fu_141_output_image_g_address0);
    finalOutputImage_g_U->ce0(grp_image_segmentation_fu_141_output_image_g_ce0);
    finalOutputImage_g_U->we0(grp_image_segmentation_fu_141_output_image_g_we0);
    finalOutputImage_g_U->d0(grp_image_segmentation_fu_141_output_image_g_d0);
    finalOutputImage_b_U = new imageProcessing_finalOutputImage_r("finalOutputImage_b_U");
    finalOutputImage_b_U->clk(ap_clk);
    finalOutputImage_b_U->reset(ap_rst);
    finalOutputImage_b_U->address0(grp_image_segmentation_fu_141_output_image_b_address0);
    finalOutputImage_b_U->ce0(grp_image_segmentation_fu_141_output_image_b_ce0);
    finalOutputImage_b_U->we0(grp_image_segmentation_fu_141_output_image_b_we0);
    finalOutputImage_b_U->d0(grp_image_segmentation_fu_141_output_image_b_d0);
    grp_image_segmentation_fu_141 = new image_segmentation("grp_image_segmentation_fu_141");
    grp_image_segmentation_fu_141->ap_clk(ap_clk);
    grp_image_segmentation_fu_141->ap_rst(ap_rst);
    grp_image_segmentation_fu_141->ap_start(grp_image_segmentation_fu_141_ap_start);
    grp_image_segmentation_fu_141->ap_done(grp_image_segmentation_fu_141_ap_done);
    grp_image_segmentation_fu_141->ap_idle(grp_image_segmentation_fu_141_ap_idle);
    grp_image_segmentation_fu_141->ap_ready(grp_image_segmentation_fu_141_ap_ready);
    grp_image_segmentation_fu_141->input_image_r_address0(grp_image_segmentation_fu_141_input_image_r_address0);
    grp_image_segmentation_fu_141->input_image_r_ce0(grp_image_segmentation_fu_141_input_image_r_ce0);
    grp_image_segmentation_fu_141->input_image_r_q0(inputImage_r_q0);
    grp_image_segmentation_fu_141->input_image_g_address0(grp_image_segmentation_fu_141_input_image_g_address0);
    grp_image_segmentation_fu_141->input_image_g_ce0(grp_image_segmentation_fu_141_input_image_g_ce0);
    grp_image_segmentation_fu_141->input_image_g_q0(inputImage_g_q0);
    grp_image_segmentation_fu_141->input_image_b_address0(grp_image_segmentation_fu_141_input_image_b_address0);
    grp_image_segmentation_fu_141->input_image_b_ce0(grp_image_segmentation_fu_141_input_image_b_ce0);
    grp_image_segmentation_fu_141->input_image_b_q0(inputImage_b_q0);
    grp_image_segmentation_fu_141->output_image_r_address0(grp_image_segmentation_fu_141_output_image_r_address0);
    grp_image_segmentation_fu_141->output_image_r_ce0(grp_image_segmentation_fu_141_output_image_r_ce0);
    grp_image_segmentation_fu_141->output_image_r_we0(grp_image_segmentation_fu_141_output_image_r_we0);
    grp_image_segmentation_fu_141->output_image_r_d0(grp_image_segmentation_fu_141_output_image_r_d0);
    grp_image_segmentation_fu_141->output_image_g_address0(grp_image_segmentation_fu_141_output_image_g_address0);
    grp_image_segmentation_fu_141->output_image_g_ce0(grp_image_segmentation_fu_141_output_image_g_ce0);
    grp_image_segmentation_fu_141->output_image_g_we0(grp_image_segmentation_fu_141_output_image_g_we0);
    grp_image_segmentation_fu_141->output_image_g_d0(grp_image_segmentation_fu_141_output_image_g_d0);
    grp_image_segmentation_fu_141->output_image_b_address0(grp_image_segmentation_fu_141_output_image_b_address0);
    grp_image_segmentation_fu_141->output_image_b_ce0(grp_image_segmentation_fu_141_output_image_b_ce0);
    grp_image_segmentation_fu_141->output_image_b_we0(grp_image_segmentation_fu_141_output_image_b_we0);
    grp_image_segmentation_fu_141->output_image_b_d0(grp_image_segmentation_fu_141_output_image_b_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_image_segmentation_fu_141_ap_done );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_image_segmentation_fu_141_ap_done );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond1_fu_179_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_119 );

    SC_METHOD(thread_exitcond_fu_203_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_130 );

    SC_METHOD(thread_grp_image_segmentation_fu_141_ap_start);
    sensitive << ( grp_image_segmentation_fu_141_ap_start_reg );

    SC_METHOD(thread_i_12_fu_185_p2);
    sensitive << ( i_reg_119 );

    SC_METHOD(thread_inputImage_b_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_image_segmentation_fu_141_input_image_b_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_91_cast_fu_224_p1 );

    SC_METHOD(thread_inputImage_b_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_image_segmentation_fu_141_input_image_b_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_inputImage_b_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_203_p2 );

    SC_METHOD(thread_inputImage_g_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_image_segmentation_fu_141_input_image_g_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_91_cast_fu_224_p1 );

    SC_METHOD(thread_inputImage_g_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_image_segmentation_fu_141_input_image_g_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_inputImage_g_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_203_p2 );

    SC_METHOD(thread_inputImage_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_image_segmentation_fu_141_input_image_r_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_91_cast_fu_224_p1 );

    SC_METHOD(thread_inputImage_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_image_segmentation_fu_141_input_image_r_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_inputImage_r_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_203_p2 );

    SC_METHOD(thread_j_11_fu_209_p2);
    sensitive << ( j_reg_130 );

    SC_METHOD(thread_tmp_90_cast_fu_199_p1);
    sensitive << ( tmp_fu_191_p3 );

    SC_METHOD(thread_tmp_91_cast_fu_224_p1);
    sensitive << ( tmp_s_fu_219_p2 );

    SC_METHOD(thread_tmp_cast_fu_215_p1);
    sensitive << ( j_reg_130 );

    SC_METHOD(thread_tmp_fu_191_p3);
    sensitive << ( i_reg_119 );

    SC_METHOD(thread_tmp_s_fu_219_p2);
    sensitive << ( tmp_90_cast_reg_239 );
    sensitive << ( tmp_cast_fu_215_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_179_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_image_segmentation_fu_141_ap_done );
    sensitive << ( exitcond_fu_203_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    grp_image_segmentation_fu_141_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "imageProcessing_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_12_fu_185_p2, "i_12_fu_185_p2");
    sc_trace(mVcdFile, i_12_reg_234, "i_12_reg_234");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_90_cast_fu_199_p1, "tmp_90_cast_fu_199_p1");
    sc_trace(mVcdFile, tmp_90_cast_reg_239, "tmp_90_cast_reg_239");
    sc_trace(mVcdFile, exitcond1_fu_179_p2, "exitcond1_fu_179_p2");
    sc_trace(mVcdFile, j_11_fu_209_p2, "j_11_fu_209_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, inputImage_r_address0, "inputImage_r_address0");
    sc_trace(mVcdFile, inputImage_r_ce0, "inputImage_r_ce0");
    sc_trace(mVcdFile, inputImage_r_we0, "inputImage_r_we0");
    sc_trace(mVcdFile, inputImage_r_q0, "inputImage_r_q0");
    sc_trace(mVcdFile, inputImage_g_address0, "inputImage_g_address0");
    sc_trace(mVcdFile, inputImage_g_ce0, "inputImage_g_ce0");
    sc_trace(mVcdFile, inputImage_g_we0, "inputImage_g_we0");
    sc_trace(mVcdFile, inputImage_g_q0, "inputImage_g_q0");
    sc_trace(mVcdFile, inputImage_b_address0, "inputImage_b_address0");
    sc_trace(mVcdFile, inputImage_b_ce0, "inputImage_b_ce0");
    sc_trace(mVcdFile, inputImage_b_we0, "inputImage_b_we0");
    sc_trace(mVcdFile, inputImage_b_q0, "inputImage_b_q0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_ap_start, "grp_image_segmentation_fu_141_ap_start");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_ap_done, "grp_image_segmentation_fu_141_ap_done");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_ap_idle, "grp_image_segmentation_fu_141_ap_idle");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_ap_ready, "grp_image_segmentation_fu_141_ap_ready");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_input_image_r_address0, "grp_image_segmentation_fu_141_input_image_r_address0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_input_image_r_ce0, "grp_image_segmentation_fu_141_input_image_r_ce0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_input_image_g_address0, "grp_image_segmentation_fu_141_input_image_g_address0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_input_image_g_ce0, "grp_image_segmentation_fu_141_input_image_g_ce0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_input_image_b_address0, "grp_image_segmentation_fu_141_input_image_b_address0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_input_image_b_ce0, "grp_image_segmentation_fu_141_input_image_b_ce0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_r_address0, "grp_image_segmentation_fu_141_output_image_r_address0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_r_ce0, "grp_image_segmentation_fu_141_output_image_r_ce0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_r_we0, "grp_image_segmentation_fu_141_output_image_r_we0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_r_d0, "grp_image_segmentation_fu_141_output_image_r_d0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_g_address0, "grp_image_segmentation_fu_141_output_image_g_address0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_g_ce0, "grp_image_segmentation_fu_141_output_image_g_ce0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_g_we0, "grp_image_segmentation_fu_141_output_image_g_we0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_g_d0, "grp_image_segmentation_fu_141_output_image_g_d0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_b_address0, "grp_image_segmentation_fu_141_output_image_b_address0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_b_ce0, "grp_image_segmentation_fu_141_output_image_b_ce0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_b_we0, "grp_image_segmentation_fu_141_output_image_b_we0");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_output_image_b_d0, "grp_image_segmentation_fu_141_output_image_b_d0");
    sc_trace(mVcdFile, i_reg_119, "i_reg_119");
    sc_trace(mVcdFile, exitcond_fu_203_p2, "exitcond_fu_203_p2");
    sc_trace(mVcdFile, j_reg_130, "j_reg_130");
    sc_trace(mVcdFile, grp_image_segmentation_fu_141_ap_start_reg, "grp_image_segmentation_fu_141_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_91_cast_fu_224_p1, "tmp_91_cast_fu_224_p1");
    sc_trace(mVcdFile, tmp_fu_191_p3, "tmp_fu_191_p3");
    sc_trace(mVcdFile, tmp_cast_fu_215_p1, "tmp_cast_fu_215_p1");
    sc_trace(mVcdFile, tmp_s_fu_219_p2, "tmp_s_fu_219_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("imageProcessing.hdltvin.dat");
    mHdltvoutHandle.open("imageProcessing.hdltvout.dat");
}

imageProcessing::~imageProcessing() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete inputImage_r_U;
    delete inputImage_g_U;
    delete inputImage_b_U;
    delete finalOutputImage_r_U;
    delete finalOutputImage_g_U;
    delete finalOutputImage_b_U;
    delete grp_image_segmentation_fu_141;
}

void imageProcessing::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void imageProcessing::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv1_1;
}

void imageProcessing::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_image_segmentation_fu_141_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond1_fu_179_p2.read(), ap_const_lv1_1))) {
            grp_image_segmentation_fu_141_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_image_segmentation_fu_141_ap_ready.read())) {
            grp_image_segmentation_fu_141_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_1))) {
        i_reg_119 = i_12_reg_234.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_119 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_179_p2.read(), ap_const_lv1_0))) {
        j_reg_130 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_203_p2.read()))) {
        j_reg_130 = j_11_fu_209_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_12_reg_234 = i_12_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_179_p2.read(), ap_const_lv1_0))) {
        tmp_90_cast_reg_239 = tmp_90_cast_fu_199_p1.read();
    }
}

void imageProcessing::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void imageProcessing::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void imageProcessing::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void imageProcessing::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void imageProcessing::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(grp_image_segmentation_fu_141_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void imageProcessing::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void imageProcessing::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(grp_image_segmentation_fu_141_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void imageProcessing::thread_exitcond1_fu_179_p2() {
    exitcond1_fu_179_p2 = (!i_reg_119.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_119.read() == ap_const_lv10_200);
}

void imageProcessing::thread_exitcond_fu_203_p2() {
    exitcond_fu_203_p2 = (!j_reg_130.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_130.read() == ap_const_lv10_200);
}

void imageProcessing::thread_grp_image_segmentation_fu_141_ap_start() {
    grp_image_segmentation_fu_141_ap_start = grp_image_segmentation_fu_141_ap_start_reg.read();
}

void imageProcessing::thread_i_12_fu_185_p2() {
    i_12_fu_185_p2 = (!i_reg_119.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_119.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void imageProcessing::thread_inputImage_b_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        inputImage_b_address0 =  (sc_lv<18>) (tmp_91_cast_fu_224_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        inputImage_b_address0 = grp_image_segmentation_fu_141_input_image_b_address0.read();
    } else {
        inputImage_b_address0 = "XXXXXXXXXXXXXXXXXX";
    }
}

void imageProcessing::thread_inputImage_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        inputImage_b_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        inputImage_b_ce0 = grp_image_segmentation_fu_141_input_image_b_ce0.read();
    } else {
        inputImage_b_ce0 = ap_const_logic_0;
    }
}

void imageProcessing::thread_inputImage_b_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_203_p2.read()))) {
        inputImage_b_we0 = ap_const_logic_1;
    } else {
        inputImage_b_we0 = ap_const_logic_0;
    }
}

void imageProcessing::thread_inputImage_g_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        inputImage_g_address0 =  (sc_lv<18>) (tmp_91_cast_fu_224_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        inputImage_g_address0 = grp_image_segmentation_fu_141_input_image_g_address0.read();
    } else {
        inputImage_g_address0 = "XXXXXXXXXXXXXXXXXX";
    }
}

void imageProcessing::thread_inputImage_g_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        inputImage_g_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        inputImage_g_ce0 = grp_image_segmentation_fu_141_input_image_g_ce0.read();
    } else {
        inputImage_g_ce0 = ap_const_logic_0;
    }
}

void imageProcessing::thread_inputImage_g_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_203_p2.read()))) {
        inputImage_g_we0 = ap_const_logic_1;
    } else {
        inputImage_g_we0 = ap_const_logic_0;
    }
}

void imageProcessing::thread_inputImage_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        inputImage_r_address0 =  (sc_lv<18>) (tmp_91_cast_fu_224_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        inputImage_r_address0 = grp_image_segmentation_fu_141_input_image_r_address0.read();
    } else {
        inputImage_r_address0 = "XXXXXXXXXXXXXXXXXX";
    }
}

void imageProcessing::thread_inputImage_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        inputImage_r_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        inputImage_r_ce0 = grp_image_segmentation_fu_141_input_image_r_ce0.read();
    } else {
        inputImage_r_ce0 = ap_const_logic_0;
    }
}

void imageProcessing::thread_inputImage_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_203_p2.read()))) {
        inputImage_r_we0 = ap_const_logic_1;
    } else {
        inputImage_r_we0 = ap_const_logic_0;
    }
}

void imageProcessing::thread_j_11_fu_209_p2() {
    j_11_fu_209_p2 = (!j_reg_130.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_130.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void imageProcessing::thread_tmp_90_cast_fu_199_p1() {
    tmp_90_cast_fu_199_p1 = esl_zext<20,19>(tmp_fu_191_p3.read());
}

void imageProcessing::thread_tmp_91_cast_fu_224_p1() {
    tmp_91_cast_fu_224_p1 = esl_zext<64,20>(tmp_s_fu_219_p2.read());
}

void imageProcessing::thread_tmp_cast_fu_215_p1() {
    tmp_cast_fu_215_p1 = esl_zext<20,10>(j_reg_130.read());
}

void imageProcessing::thread_tmp_fu_191_p3() {
    tmp_fu_191_p3 = esl_concat<10,9>(i_reg_119.read(), ap_const_lv9_0);
}

void imageProcessing::thread_tmp_s_fu_219_p2() {
    tmp_s_fu_219_p2 = (!tmp_90_cast_reg_239.read().is_01() || !tmp_cast_fu_215_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(tmp_90_cast_reg_239.read()) + sc_biguint<20>(tmp_cast_fu_215_p1.read()));
}

void imageProcessing::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_179_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_image_segmentation_fu_141_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void imageProcessing::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

