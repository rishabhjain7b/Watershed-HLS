// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _imageProcessing_HH_
#define _imageProcessing_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "image_segmentation.h"
#include "imageProcessing_inputImage_r.h"
#include "imageProcessing_finalOutputImage_r.h"

namespace ap_rtl {

struct imageProcessing : public sc_module {
    // Port declarations 6
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<1> > ap_var_for_const0;


    // Module declarations
    imageProcessing(sc_module_name name);
    SC_HAS_PROCESS(imageProcessing);

    ~imageProcessing();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    imageProcessing_inputImage_r* inputImage_r_U;
    imageProcessing_inputImage_r* inputImage_g_U;
    imageProcessing_inputImage_r* inputImage_b_U;
    imageProcessing_finalOutputImage_r* finalOutputImage_r_U;
    imageProcessing_finalOutputImage_r* finalOutputImage_g_U;
    imageProcessing_finalOutputImage_r* finalOutputImage_b_U;
    image_segmentation* grp_image_segmentation_fu_141;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > i_12_fu_185_p2;
    sc_signal< sc_lv<10> > i_12_reg_234;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<20> > tmp_90_cast_fu_199_p1;
    sc_signal< sc_lv<20> > tmp_90_cast_reg_239;
    sc_signal< sc_lv<1> > exitcond1_fu_179_p2;
    sc_signal< sc_lv<10> > j_11_fu_209_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<18> > inputImage_r_address0;
    sc_signal< sc_logic > inputImage_r_ce0;
    sc_signal< sc_logic > inputImage_r_we0;
    sc_signal< sc_lv<1> > inputImage_r_q0;
    sc_signal< sc_lv<18> > inputImage_g_address0;
    sc_signal< sc_logic > inputImage_g_ce0;
    sc_signal< sc_logic > inputImage_g_we0;
    sc_signal< sc_lv<1> > inputImage_g_q0;
    sc_signal< sc_lv<18> > inputImage_b_address0;
    sc_signal< sc_logic > inputImage_b_ce0;
    sc_signal< sc_logic > inputImage_b_we0;
    sc_signal< sc_lv<1> > inputImage_b_q0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_ap_start;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_ap_done;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_ap_idle;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_ap_ready;
    sc_signal< sc_lv<18> > grp_image_segmentation_fu_141_input_image_r_address0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_input_image_r_ce0;
    sc_signal< sc_lv<18> > grp_image_segmentation_fu_141_input_image_g_address0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_input_image_g_ce0;
    sc_signal< sc_lv<18> > grp_image_segmentation_fu_141_input_image_b_address0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_input_image_b_ce0;
    sc_signal< sc_lv<18> > grp_image_segmentation_fu_141_output_image_r_address0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_output_image_r_ce0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_output_image_r_we0;
    sc_signal< sc_lv<1> > grp_image_segmentation_fu_141_output_image_r_d0;
    sc_signal< sc_lv<18> > grp_image_segmentation_fu_141_output_image_g_address0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_output_image_g_ce0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_output_image_g_we0;
    sc_signal< sc_lv<1> > grp_image_segmentation_fu_141_output_image_g_d0;
    sc_signal< sc_lv<18> > grp_image_segmentation_fu_141_output_image_b_address0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_output_image_b_ce0;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_output_image_b_we0;
    sc_signal< sc_lv<1> > grp_image_segmentation_fu_141_output_image_b_d0;
    sc_signal< sc_lv<10> > i_reg_119;
    sc_signal< sc_lv<1> > exitcond_fu_203_p2;
    sc_signal< sc_lv<10> > j_reg_130;
    sc_signal< sc_logic > grp_image_segmentation_fu_141_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > tmp_91_cast_fu_224_p1;
    sc_signal< sc_lv<19> > tmp_fu_191_p3;
    sc_signal< sc_lv<20> > tmp_cast_fu_215_p1;
    sc_signal< sc_lv<20> > tmp_s_fu_219_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_179_p2();
    void thread_exitcond_fu_203_p2();
    void thread_grp_image_segmentation_fu_141_ap_start();
    void thread_i_12_fu_185_p2();
    void thread_inputImage_b_address0();
    void thread_inputImage_b_ce0();
    void thread_inputImage_b_we0();
    void thread_inputImage_g_address0();
    void thread_inputImage_g_ce0();
    void thread_inputImage_g_we0();
    void thread_inputImage_r_address0();
    void thread_inputImage_r_ce0();
    void thread_inputImage_r_we0();
    void thread_j_11_fu_209_p2();
    void thread_tmp_90_cast_fu_199_p1();
    void thread_tmp_91_cast_fu_224_p1();
    void thread_tmp_cast_fu_215_p1();
    void thread_tmp_fu_191_p3();
    void thread_tmp_s_fu_219_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
