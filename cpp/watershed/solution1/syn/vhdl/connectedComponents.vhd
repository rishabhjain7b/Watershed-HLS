-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity connectedComponents is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sureForeground_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    sureForeground_ce0 : OUT STD_LOGIC;
    sureForeground_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of connectedComponents is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal markersGen_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal markersGen_ce0 : STD_LOGIC;
    signal markersGen_we0 : STD_LOGIC;
    signal markersGen_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal markersGen_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal markersGen_address1 : STD_LOGIC_VECTOR (17 downto 0);
    signal markersGen_ce1 : STD_LOGIC;
    signal markersGen_we1 : STD_LOGIC;
    signal markersGen_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal markersGen_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal equivLabels_parent_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal sureForeground_load_1_reg_922 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast8_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast8_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_15_fu_298_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_15_reg_706 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_175_cast_fu_312_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_175_cast_reg_711 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond5_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_13_fu_327_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_16_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_16_reg_734 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_177_cast_fu_368_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_177_cast_reg_739 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond3_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_cast_fu_392_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_179_cast_reg_753 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_15_fu_402_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_15_reg_761 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal markersGen_addr_1_reg_766 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond2_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal markersGen_addr_2_reg_771 : STD_LOGIC_VECTOR (17 downto 0);
    signal sureForeground_load_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_145_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal rootLeft_3_fu_459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rootLeft_3_reg_796 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal rootLeft_3_cast_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rootLeft_3_cast_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal rootAbove_3_fu_470_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rootAbove_3_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal rootAbove_3_cast_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rootAbove_3_cast_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_149_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_149_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_822 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal or_cond7_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_189_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_189_cast_reg_830 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal equivLabels_parent_a_2_reg_835 : STD_LOGIC_VECTOR (17 downto 0);
    signal equivLabels_child_ad_1_reg_843 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_160_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_190_cast_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_190_cast_reg_849 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal equivLabels_parent_a_3_reg_854 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_162_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_163_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_163_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal equivLabels_child_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal equivLabels_child_lo_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_164_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_164_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_reg_885 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_fu_624_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_17_reg_892 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_182_cast_fu_638_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_182_cast_reg_897 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_16_fu_648_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_16_reg_906 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal markersGen_addr_3_reg_911 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal root_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal equivLabels_parent_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal equivLabels_parent_ce0 : STD_LOGIC;
    signal equivLabels_parent_we0 : STD_LOGIC;
    signal equivLabels_parent_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal equivLabels_child_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal equivLabels_child_ce0 : STD_LOGIC;
    signal equivLabels_child_we0 : STD_LOGIC;
    signal equivLabels_child_address1 : STD_LOGIC_VECTOR (17 downto 0);
    signal equivLabels_child_ce1 : STD_LOGIC;
    signal equivLabels_child_we1 : STD_LOGIC;
    signal equivLabels_child_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal equivLabels_child_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_171 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_182 : STD_LOGIC_VECTOR (9 downto 0);
    signal i1_reg_193 : STD_LOGIC_VECTOR (9 downto 0);
    signal j2_reg_204 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal rootLeft_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal rootAbove_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge1_phi_fu_241_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge1_reg_238 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_180_fu_613_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i3_reg_250 : STD_LOGIC_VECTOR (9 downto 0);
    signal j4_reg_261 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_157_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal root1_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_180_cast_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_183_cast_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_184_cast_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_185_cast_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_187_cast_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_186_cast_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_188_cast_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal label_fu_38 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_1_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_175_fu_693_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_304_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_142_cast_fu_333_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_158_fu_337_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_153_fu_360_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_141_fu_378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_156_fu_384_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_143_cast_fu_408_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_161_fu_412_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_167_fu_422_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_146_fu_439_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_147_cast_fu_445_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_168_fu_449_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_148_fu_481_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_171_fu_502_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_172_fu_506_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_154_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_176_fu_549_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_177_fu_553_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_178_fu_569_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_179_fu_573_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_159_fu_630_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_150_cast_fu_654_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_169_fu_658_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_173_fu_673_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_174_fu_677_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component connectedComponents_markersGen IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component connectedComponents_equivLabels_parent IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component connectedComponents_equivLabels_child IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    markersGen_U : component connectedComponents_markersGen
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => markersGen_address0,
        ce0 => markersGen_ce0,
        we0 => markersGen_we0,
        d0 => markersGen_d0,
        q0 => markersGen_q0,
        address1 => markersGen_address1,
        ce1 => markersGen_ce1,
        we1 => markersGen_we1,
        d1 => markersGen_d1,
        q1 => markersGen_q1);

    equivLabels_parent_U : component connectedComponents_equivLabels_parent
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => equivLabels_parent_address0,
        ce0 => equivLabels_parent_ce0,
        we0 => equivLabels_parent_we0,
        d0 => equivLabels_parent_d0,
        q0 => equivLabels_parent_q0);

    equivLabels_child_U : component connectedComponents_equivLabels_child
    generic map (
        DataWidth => 32,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => equivLabels_child_address0,
        ce0 => equivLabels_child_ce0,
        we0 => equivLabels_child_we0,
        d0 => ap_const_lv32_0,
        q0 => equivLabels_child_q0,
        address1 => equivLabels_child_address1,
        ce1 => equivLabels_child_ce1,
        we1 => equivLabels_child_we1,
        d1 => equivLabels_child_d1,
        q1 => equivLabels_child_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i1_reg_193 <= i_16_reg_734;
            elsif (((exitcond5_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_193 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i3_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i3_reg_250 <= ap_const_lv10_0;
            elsif (((exitcond_fu_642_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i3_reg_250 <= i_17_reg_892;
            end if; 
        end if;
    end process;

    i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_171 <= i_15_reg_706;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_171 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j2_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j2_reg_204 <= j_15_reg_761;
            elsif (((exitcond3_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j2_reg_204 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j4_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j4_reg_261 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and ((tmp_157_fu_687_p2 = ap_const_lv1_1) or (sureForeground_load_1_reg_922 = ap_const_lv1_0)))) then 
                j4_reg_261 <= j_16_reg_906;
            end if; 
        end if;
    end process;

    j_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_182 <= ap_const_lv10_0;
            elsif (((exitcond4_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_182 <= j_13_fu_327_p2;
            end if; 
        end if;
    end process;

    label_fu_38_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_149_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                label_fu_38 <= label_1_fu_516_p2;
            elsif (((exitcond5_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                label_fu_38 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    root1_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_157_fu_687_p2 = ap_const_lv1_0) and (sureForeground_load_1_reg_922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                root1_reg_272 <= equivLabels_parent_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                root1_reg_272 <= root_fu_669_p1;
            end if; 
        end if;
    end process;

    rootAbove_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_160_fu_563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                rootAbove_reg_227 <= rootAbove_3_cast_reg_813;
            elsif (((tmp_162_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                rootAbove_reg_227 <= equivLabels_parent_q0;
            end if; 
        end if;
    end process;

    rootLeft_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond6_fu_537_p2 = ap_const_lv1_0) and (or_cond7_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                rootLeft_reg_216 <= rootLeft_3_cast_reg_802;
            elsif (((tmp_160_fu_563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                rootLeft_reg_216 <= equivLabels_parent_q0;
            end if; 
        end if;
    end process;

    storemerge1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond7_fu_543_p2 = ap_const_lv1_0) and (or_cond6_fu_537_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                storemerge1_reg_238 <= rootAbove_3_reg_807;
            elsif (((or_cond6_reg_822 = ap_const_lv1_0) and (tmp_149_reg_818 = ap_const_lv1_0) and (or_cond7_reg_826 = ap_const_lv1_1) and (sureForeground_load_reg_782 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                storemerge1_reg_238 <= tmp_180_fu_613_p1;
            elsif (((or_cond6_fu_537_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                storemerge1_reg_238 <= rootLeft_3_reg_796;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_160_fu_563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                equivLabels_child_ad_1_reg_843 <= tmp_189_cast_reg_830(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                equivLabels_child_lo_reg_876 <= equivLabels_child_q0;
                tmp_164_reg_881 <= tmp_164_fu_595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                equivLabels_parent_a_2_reg_835 <= tmp_189_cast_fu_558_p1(18 - 1 downto 0);
                tmp_189_cast_reg_830 <= tmp_189_cast_fu_558_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                equivLabels_parent_a_3_reg_854 <= tmp_190_cast_fu_578_p1(18 - 1 downto 0);
                tmp_190_cast_reg_849 <= tmp_190_cast_fu_578_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_15_reg_706 <= i_15_fu_298_p2;
                    i_cast8_reg_698(9 downto 0) <= i_cast8_fu_288_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_16_reg_734 <= i_16_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_17_reg_892 <= i_17_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_15_reg_761 <= j_15_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                j_16_reg_906 <= j_16_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_396_p2 = ap_const_lv1_0) and (tmp_s_reg_748 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                markersGen_addr_1_reg_766 <= tmp_183_cast_fu_417_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                markersGen_addr_2_reg_771 <= tmp_184_cast_fu_427_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                markersGen_addr_3_reg_911 <= tmp_186_cast_fu_663_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                or_cond6_reg_822 <= or_cond6_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond6_fu_537_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                or_cond7_reg_826 <= or_cond7_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    rootAbove_3_cast_reg_813(7 downto 0) <= rootAbove_3_cast_fu_477_p1(7 downto 0);
                rootAbove_3_reg_807 <= rootAbove_3_fu_470_p3;
                    rootLeft_3_cast_reg_802(7 downto 0) <= rootLeft_3_cast_fu_466_p1(7 downto 0);
                rootLeft_3_reg_796 <= rootLeft_3_fu_459_p3;
                tmp_149_reg_818 <= tmp_149_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                sureForeground_load_1_reg_922 <= sureForeground_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sureForeground_load_reg_782 <= sureForeground_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((sureForeground_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_145_reg_786 <= tmp_145_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_162_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_163_reg_872 <= tmp_163_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_164_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_165_reg_885 <= tmp_165_fu_601_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_175_cast_reg_711(18 downto 9) <= tmp_175_cast_fu_312_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_177_cast_reg_739(18 downto 9) <= tmp_177_cast_fu_368_p1(18 downto 9);
                    tmp_179_cast_reg_753(19 downto 9) <= tmp_179_cast_fu_392_p1(19 downto 9);
                tmp_s_reg_748 <= tmp_s_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    tmp_182_cast_reg_897(18 downto 9) <= tmp_182_cast_fu_638_p1(18 downto 9);
            end if;
        end if;
    end process;
    i_cast8_reg_698(31 downto 10) <= "0000000000000000000000";
    tmp_175_cast_reg_711(8 downto 0) <= "000000000";
    tmp_175_cast_reg_711(19) <= '0';
    tmp_177_cast_reg_739(8 downto 0) <= "000000000";
    tmp_177_cast_reg_739(19) <= '0';
    tmp_179_cast_reg_753(8 downto 0) <= "000000000";
    rootLeft_3_cast_reg_802(31 downto 8) <= "000000000000000000000000";
    rootAbove_3_cast_reg_813(31 downto 8) <= "000000000000000000000000";
    tmp_182_cast_reg_897(8 downto 0) <= "000000000";
    tmp_182_cast_reg_897(19) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, sureForeground_q0, ap_CS_fsm_state10, ap_CS_fsm_state20, sureForeground_load_1_reg_922, ap_CS_fsm_state2, exitcond5_fu_292_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_348_p2, ap_CS_fsm_state5, exitcond2_fu_396_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_149_fu_487_p2, or_cond6_fu_537_p2, ap_CS_fsm_state8, or_cond7_fu_543_p2, tmp_160_fu_563_p2, ap_CS_fsm_state12, tmp_162_fu_583_p2, tmp_163_fu_589_p2, ap_CS_fsm_state15, exitcond1_fu_618_p2, ap_CS_fsm_state16, exitcond_fu_642_p2, ap_CS_fsm_state17, exitcond4_fu_321_p2, tmp_157_fu_687_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond4_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((sureForeground_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_149_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((or_cond6_fu_537_p2 = ap_const_lv1_0) and (or_cond7_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((tmp_160_fu_563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((tmp_163_fu_589_p2 = ap_const_lv1_1) and (tmp_162_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((tmp_163_fu_589_p2 = ap_const_lv1_0) and (tmp_162_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state15 => 
                if (((exitcond1_fu_618_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((exitcond_fu_642_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((sureForeground_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and ((tmp_157_fu_687_p2 = ap_const_lv1_1) or (sureForeground_load_1_reg_922 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15, exitcond1_fu_618_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond1_fu_618_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge1_phi_fu_241_p6_assign_proc : process(sureForeground_load_reg_782, tmp_149_reg_818, or_cond6_reg_822, or_cond7_reg_826, ap_CS_fsm_state14, storemerge1_reg_238, tmp_180_fu_613_p1)
    begin
        if (((or_cond6_reg_822 = ap_const_lv1_0) and (tmp_149_reg_818 = ap_const_lv1_0) and (or_cond7_reg_826 = ap_const_lv1_1) and (sureForeground_load_reg_782 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_phi_mux_storemerge1_phi_fu_241_p6 <= tmp_180_fu_613_p1;
        else 
            ap_phi_mux_storemerge1_phi_fu_241_p6 <= storemerge1_reg_238;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, exitcond1_fu_618_p2)
    begin
        if (((exitcond1_fu_618_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    equivLabels_child_address0_assign_proc : process(ap_CS_fsm_state3, equivLabels_child_ad_1_reg_843, ap_CS_fsm_state12, tmp_180_cast_fu_342_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            equivLabels_child_address0 <= equivLabels_child_ad_1_reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            equivLabels_child_address0 <= tmp_180_cast_fu_342_p1(18 - 1 downto 0);
        else 
            equivLabels_child_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    equivLabels_child_address1_assign_proc : process(equivLabels_child_ad_1_reg_843, tmp_190_cast_reg_849, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            equivLabels_child_address1 <= equivLabels_child_ad_1_reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            equivLabels_child_address1 <= tmp_190_cast_reg_849(18 - 1 downto 0);
        else 
            equivLabels_child_address1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    equivLabels_child_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            equivLabels_child_ce0 <= ap_const_logic_1;
        else 
            equivLabels_child_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    equivLabels_child_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            equivLabels_child_ce1 <= ap_const_logic_1;
        else 
            equivLabels_child_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    equivLabels_child_d1 <= std_logic_vector(unsigned(equivLabels_child_lo_reg_876) + unsigned(ap_const_lv32_1));

    equivLabels_child_we0_assign_proc : process(ap_CS_fsm_state3, exitcond4_fu_321_p2)
    begin
        if (((exitcond4_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            equivLabels_child_we0 <= ap_const_logic_1;
        else 
            equivLabels_child_we0 <= ap_const_logic_0;
        end if; 
    end process;


    equivLabels_child_we1_assign_proc : process(sureForeground_load_reg_782, tmp_149_reg_818, or_cond6_reg_822, or_cond7_reg_826, tmp_163_reg_872, tmp_164_reg_881, tmp_165_reg_885, ap_CS_fsm_state14)
    begin
        if (((tmp_165_reg_885 = ap_const_lv1_0) and (tmp_164_reg_881 = ap_const_lv1_0) and (tmp_163_reg_872 = ap_const_lv1_0) and (or_cond6_reg_822 = ap_const_lv1_0) and (tmp_149_reg_818 = ap_const_lv1_0) and (or_cond7_reg_826 = ap_const_lv1_1) and (sureForeground_load_reg_782 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            equivLabels_child_we1 <= ap_const_logic_1;
        else 
            equivLabels_child_we1 <= ap_const_logic_0;
        end if; 
    end process;


    equivLabels_parent_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, tmp_189_cast_fu_558_p1, ap_CS_fsm_state9, equivLabels_parent_a_2_reg_835, tmp_190_cast_fu_578_p1, ap_CS_fsm_state11, equivLabels_parent_a_3_reg_854, ap_CS_fsm_state13, tmp_164_fu_595_p2, ap_CS_fsm_state19, tmp_180_cast_fu_342_p1, tmp_187_cast_fu_511_p1, tmp_188_cast_fu_682_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            equivLabels_parent_address0 <= tmp_188_cast_fu_682_p1(18 - 1 downto 0);
        elsif (((tmp_164_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            equivLabels_parent_address0 <= equivLabels_parent_a_2_reg_835;
        elsif (((tmp_164_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            equivLabels_parent_address0 <= equivLabels_parent_a_3_reg_854;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            equivLabels_parent_address0 <= tmp_190_cast_fu_578_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            equivLabels_parent_address0 <= tmp_189_cast_fu_558_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            equivLabels_parent_address0 <= tmp_187_cast_fu_511_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            equivLabels_parent_address0 <= tmp_180_cast_fu_342_p1(18 - 1 downto 0);
        else 
            equivLabels_parent_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    equivLabels_parent_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, tmp_164_fu_595_p2, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_164_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_164_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            equivLabels_parent_ce0 <= ap_const_logic_1;
        else 
            equivLabels_parent_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    equivLabels_parent_d0_assign_proc : process(i_cast8_reg_698, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state13, tmp_164_fu_595_p2, rootLeft_reg_216, rootAbove_reg_227, label_fu_38)
    begin
        if (((tmp_164_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            equivLabels_parent_d0 <= rootAbove_reg_227;
        elsif (((tmp_164_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            equivLabels_parent_d0 <= rootLeft_reg_216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            equivLabels_parent_d0 <= label_fu_38;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            equivLabels_parent_d0 <= i_cast8_reg_698;
        else 
            equivLabels_parent_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    equivLabels_parent_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, tmp_149_fu_487_p2, ap_CS_fsm_state13, tmp_164_fu_595_p2, exitcond4_fu_321_p2)
    begin
        if ((((exitcond4_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_164_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_164_fu_595_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_149_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            equivLabels_parent_we0 <= ap_const_logic_1;
        else 
            equivLabels_parent_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_618_p2 <= "1" when (i3_reg_250 = ap_const_lv10_200) else "0";
    exitcond2_fu_396_p2 <= "1" when (j2_reg_204 = ap_const_lv10_200) else "0";
    exitcond3_fu_348_p2 <= "1" when (i1_reg_193 = ap_const_lv10_200) else "0";
    exitcond4_fu_321_p2 <= "1" when (j_reg_182 = ap_const_lv10_200) else "0";
    exitcond5_fu_292_p2 <= "1" when (i_reg_171 = ap_const_lv10_200) else "0";
    exitcond_fu_642_p2 <= "1" when (j4_reg_261 = ap_const_lv10_200) else "0";
    i_15_fu_298_p2 <= std_logic_vector(unsigned(i_reg_171) + unsigned(ap_const_lv10_1));
    i_16_fu_354_p2 <= std_logic_vector(unsigned(i1_reg_193) + unsigned(ap_const_lv10_1));
    i_17_fu_624_p2 <= std_logic_vector(unsigned(i3_reg_250) + unsigned(ap_const_lv10_1));
    i_cast8_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_171),32));
    j_13_fu_327_p2 <= std_logic_vector(unsigned(j_reg_182) + unsigned(ap_const_lv10_1));
    j_15_fu_402_p2 <= std_logic_vector(unsigned(j2_reg_204) + unsigned(ap_const_lv10_1));
    j_16_fu_648_p2 <= std_logic_vector(unsigned(j4_reg_261) + unsigned(ap_const_lv10_1));
    label_1_fu_516_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(label_fu_38));

    markersGen_address0_assign_proc : process(markersGen_addr_2_reg_771, ap_CS_fsm_state6, ap_CS_fsm_state7, markersGen_addr_3_reg_911, ap_CS_fsm_state17, tmp_185_cast_fu_454_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            markersGen_address0 <= markersGen_addr_3_reg_911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            markersGen_address0 <= markersGen_addr_2_reg_771;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            markersGen_address0 <= tmp_185_cast_fu_454_p1(18 - 1 downto 0);
        else 
            markersGen_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    markersGen_address1_assign_proc : process(ap_CS_fsm_state20, markersGen_addr_1_reg_766, markersGen_addr_2_reg_771, ap_CS_fsm_state6, markersGen_addr_3_reg_911, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            markersGen_address1 <= markersGen_addr_3_reg_911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            markersGen_address1 <= markersGen_addr_2_reg_771;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            markersGen_address1 <= markersGen_addr_1_reg_766;
        else 
            markersGen_address1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    markersGen_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            markersGen_ce0 <= ap_const_logic_1;
        else 
            markersGen_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    markersGen_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state6, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            markersGen_ce1 <= ap_const_logic_1;
        else 
            markersGen_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    markersGen_d0 <= label_fu_38(8 - 1 downto 0);

    markersGen_d1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state14, ap_phi_mux_storemerge1_phi_fu_241_p6, tmp_175_fu_693_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            markersGen_d1 <= tmp_175_fu_693_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            markersGen_d1 <= ap_phi_mux_storemerge1_phi_fu_241_p6;
        else 
            markersGen_d1 <= "XXXXXXXX";
        end if; 
    end process;


    markersGen_we0_assign_proc : process(ap_CS_fsm_state7, tmp_149_fu_487_p2)
    begin
        if (((tmp_149_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            markersGen_we0 <= ap_const_logic_1;
        else 
            markersGen_we0 <= ap_const_logic_0;
        end if; 
    end process;


    markersGen_we1_assign_proc : process(ap_CS_fsm_state20, sureForeground_load_1_reg_922, sureForeground_load_reg_782, tmp_149_reg_818, ap_CS_fsm_state14, tmp_157_fu_687_p2)
    begin
        if ((((tmp_157_fu_687_p2 = ap_const_lv1_1) and (sureForeground_load_1_reg_922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((tmp_149_reg_818 = ap_const_lv1_0) and (sureForeground_load_reg_782 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            markersGen_we1 <= ap_const_logic_1;
        else 
            markersGen_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond6_fu_537_p2 <= (tmp_155_fu_532_p2 and tmp_154_fu_527_p2);
    or_cond7_fu_543_p2 <= (tmp_155_fu_532_p2 or tmp_154_fu_527_p2);
    rootAbove_3_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rootAbove_3_fu_470_p3),32));
    rootAbove_3_fu_470_p3 <= 
        markersGen_q1 when (tmp_s_reg_748(0) = '1') else 
        ap_const_lv8_0;
    rootLeft_3_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rootLeft_3_fu_459_p3),32));
    rootLeft_3_fu_459_p3 <= 
        markersGen_q0 when (tmp_145_reg_786(0) = '1') else 
        ap_const_lv8_0;
    root_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(markersGen_q0),32));

    sureForeground_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state16, tmp_184_cast_fu_427_p1, tmp_186_cast_fu_663_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sureForeground_address0 <= tmp_186_cast_fu_663_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sureForeground_address0 <= tmp_184_cast_fu_427_p1(18 - 1 downto 0);
        else 
            sureForeground_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sureForeground_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sureForeground_ce0 <= ap_const_logic_1;
        else 
            sureForeground_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_141_fu_378_p2 <= std_logic_vector(unsigned(i1_reg_193) + unsigned(ap_const_lv10_3FF));
    tmp_142_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_182),20));
    tmp_143_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_204),20));
    tmp_145_fu_433_p2 <= "0" when (j2_reg_204 = ap_const_lv10_0) else "1";
    tmp_146_fu_439_p2 <= std_logic_vector(unsigned(j2_reg_204) + unsigned(ap_const_lv10_3FF));
        tmp_147_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_146_fu_439_p2),20));

    tmp_148_fu_481_p2 <= (rootLeft_3_fu_459_p3 or rootAbove_3_fu_470_p3);
    tmp_149_fu_487_p2 <= "1" when (tmp_148_fu_481_p2 = ap_const_lv8_0) else "0";
    tmp_150_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_261),20));
    tmp_153_fu_360_p3 <= (i1_reg_193 & ap_const_lv9_0);
    tmp_154_fu_527_p2 <= "0" when (rootLeft_3_reg_796 = ap_const_lv8_0) else "1";
    tmp_155_fu_532_p2 <= "1" when (rootAbove_3_reg_807 = ap_const_lv8_0) else "0";
    tmp_156_fu_384_p3 <= (tmp_141_fu_378_p2 & ap_const_lv9_0);
    tmp_157_fu_687_p2 <= "1" when (equivLabels_parent_q0 = root1_reg_272) else "0";
    tmp_158_fu_337_p2 <= std_logic_vector(unsigned(tmp_175_cast_reg_711) + unsigned(tmp_142_cast_fu_333_p1));
    tmp_159_fu_630_p3 <= (i3_reg_250 & ap_const_lv9_0);
    tmp_160_fu_563_p2 <= "1" when (equivLabels_parent_q0 = rootLeft_reg_216) else "0";
    tmp_161_fu_412_p2 <= std_logic_vector(signed(tmp_179_cast_reg_753) + signed(tmp_143_cast_fu_408_p1));
    tmp_162_fu_583_p2 <= "1" when (equivLabels_parent_q0 = rootAbove_reg_227) else "0";
    tmp_163_fu_589_p2 <= "1" when (rootLeft_reg_216 = rootAbove_reg_227) else "0";
    tmp_164_fu_595_p2 <= "1" when (signed(equivLabels_child_q0) < signed(equivLabels_child_q1)) else "0";
    tmp_165_fu_601_p2 <= "1" when (signed(equivLabels_child_q0) > signed(equivLabels_child_q1)) else "0";
    tmp_167_fu_422_p2 <= std_logic_vector(unsigned(tmp_177_cast_reg_739) + unsigned(tmp_143_cast_fu_408_p1));
    tmp_168_fu_449_p2 <= std_logic_vector(signed(tmp_147_cast_fu_445_p1) + signed(tmp_177_cast_reg_739));
    tmp_169_fu_658_p2 <= std_logic_vector(unsigned(tmp_182_cast_reg_897) + unsigned(tmp_150_cast_fu_654_p1));
    tmp_171_fu_502_p1 <= label_fu_38(20 - 1 downto 0);
    tmp_172_fu_506_p2 <= std_logic_vector(unsigned(tmp_171_fu_502_p1) + unsigned(tmp_177_cast_reg_739));
    tmp_173_fu_673_p1 <= root1_reg_272(20 - 1 downto 0);
    tmp_174_fu_677_p2 <= std_logic_vector(unsigned(tmp_182_cast_reg_897) + unsigned(tmp_173_fu_673_p1));
    tmp_175_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_304_p3),20));
    tmp_175_fu_693_p1 <= root1_reg_272(8 - 1 downto 0);
    tmp_176_fu_549_p1 <= rootLeft_reg_216(20 - 1 downto 0);
    tmp_177_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_153_fu_360_p3),20));
    tmp_177_fu_553_p2 <= std_logic_vector(unsigned(tmp_177_cast_reg_739) + unsigned(tmp_176_fu_549_p1));
    tmp_178_fu_569_p1 <= rootAbove_reg_227(20 - 1 downto 0);
        tmp_179_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_156_fu_384_p3),20));

    tmp_179_fu_573_p2 <= std_logic_vector(unsigned(tmp_177_cast_reg_739) + unsigned(tmp_178_fu_569_p1));
    tmp_180_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_158_fu_337_p2),64));
    tmp_180_fu_613_p1 <= rootLeft_reg_216(8 - 1 downto 0);
    tmp_182_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_159_fu_630_p3),20));
        tmp_183_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_161_fu_412_p2),64));

    tmp_184_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_167_fu_422_p2),64));
    tmp_185_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_168_fu_449_p2),64));
    tmp_186_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_fu_658_p2),64));
        tmp_187_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_172_fu_506_p2),64));

        tmp_188_cast_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_174_fu_677_p2),64));

        tmp_189_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_177_fu_553_p2),64));

        tmp_190_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_179_fu_573_p2),64));

    tmp_fu_304_p3 <= (i_reg_171 & ap_const_lv9_0);
    tmp_s_fu_372_p2 <= "0" when (i1_reg_193 = ap_const_lv10_0) else "1";
end behav;
