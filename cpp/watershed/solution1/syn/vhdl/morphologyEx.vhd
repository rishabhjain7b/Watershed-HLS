-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity morphologyEx is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    binaryThreshold_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    binaryThreshold_ce0 : OUT STD_LOGIC;
    binaryThreshold_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of morphologyEx is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i1_cast_fu_287_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i1_cast_reg_845 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_853 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_cast_fu_311_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_50_cast_reg_858 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond10_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_cast_fu_315_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j2_cast_reg_863 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_325_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_871 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_2_fu_337_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_2_reg_879 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_47_fu_388_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_47_reg_884 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond8_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_1_fu_427_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_1_reg_897 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal or_cond3_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_493_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_49_reg_907 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal min_val_3_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal iter_1_fu_537_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal iter_1_reg_925 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i3_cast_fu_543_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i3_cast_reg_930 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_8_fu_553_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_8_reg_938 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_52_cast_fu_567_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_52_cast_reg_943 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond5_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j4_cast_fu_571_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j4_cast_reg_948 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_8_fu_581_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_8_reg_956 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_3_fu_593_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_3_reg_964 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_55_fu_644_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_55_reg_969 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond3_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_reg_974 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_2_fu_683_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_2_reg_982 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal or_cond6_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_749_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_58_reg_992 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal max_val_3_fu_788_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_9_fu_801_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_9_reg_1010 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_59_cast_fu_815_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_59_cast_reg_1015 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond1_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_825_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_7_reg_1023 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_66_cast_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_reg_1028 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i1_reg_116 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond9_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_reg_127 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_139 : STD_LOGIC_VECTOR (1 downto 0);
    signal min_val_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_162 : STD_LOGIC_VECTOR (1 downto 0);
    signal min_val_1_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal iter_reg_185 : STD_LOGIC_VECTOR (1 downto 0);
    signal i3_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j4_reg_207 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_val_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal k5_reg_231 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_val_1_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal l6_reg_254 : STD_LOGIC_VECTOR (1 downto 0);
    signal i9_reg_265 : STD_LOGIC_VECTOR (9 downto 0);
    signal j9_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_53_cast_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_cast_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_cast_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_303_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp2_fu_343_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_349_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_fu_353_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_372_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_cast_fu_407_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_46_fu_411_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp3_fu_433_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_439_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_fu_443_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_462_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp2_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev7_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_cast_fu_489_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal min_val_2_fu_502_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_val_2_min_val_1_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_559_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp6_fu_599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp6_cast_fu_605_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_1_fu_609_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_53_fu_614_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_628_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp3_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_cast_fu_663_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_52_fu_667_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp7_fu_689_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp7_cast_fu_695_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_1_fu_699_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_718_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp4_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_cast_fu_745_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal max_val_2_fu_758_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_2_cast_fu_762_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_60_fu_772_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal max_val_2_max_val_1_fu_776_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal max_val_2_max_val_1_s_fu_784_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_807_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_65_cast_fu_831_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_51_fu_835_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component morphologyEx_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_U : component morphologyEx_temp
    generic map (
        DataWidth => 8,
        AddressRange => 262144,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_319_p2 = ap_const_lv1_1))) then 
                i1_reg_116 <= i_reg_853;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_reg_116 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i3_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i3_reg_196 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond4_fu_575_p2 = ap_const_lv1_1))) then 
                i3_reg_196 <= i_8_reg_938;
            end if; 
        end if;
    end process;

    i9_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond5_fu_547_p2 = ap_const_lv1_1))) then 
                i9_reg_265 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_819_p2 = ap_const_lv1_1))) then 
                i9_reg_265 <= i_9_reg_1010;
            end if; 
        end if;
    end process;

    iter_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_fu_291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iter_reg_185 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond1_fu_795_p2 = ap_const_lv1_1))) then 
                iter_reg_185 <= iter_1_reg_925;
            end if; 
        end if;
    end process;

    j2_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_fu_291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j2_reg_127 <= ap_const_lv10_0;
            elsif (((exitcond8_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j2_reg_127 <= j_reg_871;
            end if; 
        end if;
    end process;

    j4_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_547_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j4_reg_207 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond3_fu_587_p2 = ap_const_lv1_1))) then 
                j4_reg_207 <= j_8_reg_956;
            end if; 
        end if;
    end process;

    j9_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_795_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j9_reg_276 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j9_reg_276 <= j_7_reg_1023;
            end if; 
        end if;
    end process;

    k5_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_575_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                k5_reg_231 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond2_fu_677_p2 = ap_const_lv1_1))) then 
                k5_reg_231 <= k_3_reg_964;
            end if; 
        end if;
    end process;

    k_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_139 <= ap_const_lv2_0;
            elsif (((exitcond7_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_reg_139 <= k_2_reg_879;
            end if; 
        end if;
    end process;

    l6_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                l6_reg_254 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                l6_reg_254 <= l_2_reg_982;
            end if; 
        end if;
    end process;

    l_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                l_reg_162 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                l_reg_162 <= l_1_reg_897;
            end if; 
        end if;
    end process;

    max_val_1_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                max_val_1_reg_242 <= max_val_reg_219;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                max_val_1_reg_242 <= max_val_3_fu_788_p3;
            end if; 
        end if;
    end process;

    max_val_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_575_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                max_val_reg_219 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond2_fu_677_p2 = ap_const_lv1_1))) then 
                max_val_reg_219 <= max_val_1_reg_242;
            end if; 
        end if;
    end process;

    min_val_1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                min_val_1_reg_173 <= min_val_reg_150;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                min_val_1_reg_173 <= min_val_3_fu_524_p3;
            end if; 
        end if;
    end process;

    min_val_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                min_val_reg_150 <= ap_const_lv32_FF;
            elsif (((exitcond7_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                min_val_reg_150 <= min_val_1_reg_173;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    i1_cast_reg_845(9 downto 0) <= i1_cast_fu_287_p1(9 downto 0);
                i_reg_853 <= i_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    i3_cast_reg_930(9 downto 0) <= i3_cast_fu_543_p1(9 downto 0);
                i_8_reg_938 <= i_8_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_9_reg_1010 <= i_9_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                iter_1_reg_925 <= iter_1_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    j2_cast_reg_863(9 downto 0) <= j2_cast_fu_315_p1(9 downto 0);
                j_reg_871 <= j_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    j4_cast_reg_948(9 downto 0) <= j4_cast_fu_571_p1(9 downto 0);
                j_8_reg_956 <= j_8_fu_581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                j_7_reg_1023 <= j_7_fu_825_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_2_reg_879 <= k_2_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                k_3_reg_964 <= k_3_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                l_1_reg_897 <= l_1_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                l_2_reg_982 <= l_2_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                or_cond3_reg_902 <= or_cond3_fu_484_p2;
                tmp_49_reg_907 <= tmp_49_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_677_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                or_cond6_reg_987 <= or_cond6_fu_740_p2;
                tmp_58_reg_992 <= tmp_58_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp4_reg_889 <= tmp4_fu_396_p2;
                    tmp_47_reg_884(19 downto 9) <= tmp_47_fu_388_p3(19 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp8_reg_974 <= tmp8_fu_652_p2;
                    tmp_55_reg_969(19 downto 9) <= tmp_55_fu_644_p3(19 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_fu_291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_50_cast_reg_858(18 downto 9) <= tmp_50_cast_fu_311_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_547_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    tmp_52_cast_reg_943(18 downto 9) <= tmp_52_cast_fu_567_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_795_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    tmp_59_cast_reg_1015(18 downto 9) <= tmp_59_cast_fu_815_p1(18 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    tmp_66_cast_reg_1028(19 downto 0) <= tmp_66_cast_fu_840_p1(19 downto 0);
            end if;
        end if;
    end process;
    i1_cast_reg_845(10) <= '0';
    tmp_50_cast_reg_858(8 downto 0) <= "000000000";
    tmp_50_cast_reg_858(19) <= '0';
    j2_cast_reg_863(10) <= '0';
    tmp_47_reg_884(8 downto 0) <= "000000000";
    i3_cast_reg_930(10) <= '0';
    tmp_52_cast_reg_943(8 downto 0) <= "000000000";
    tmp_52_cast_reg_943(19) <= '0';
    j4_cast_reg_948(10) <= '0';
    tmp_55_reg_969(8 downto 0) <= "000000000";
    tmp_59_cast_reg_1015(8 downto 0) <= "000000000";
    tmp_59_cast_reg_1015(19) <= '0';
    tmp_66_cast_reg_1028(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond10_fu_291_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond8_fu_331_p2, ap_CS_fsm_state5, exitcond7_fu_421_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, exitcond5_fu_547_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, exitcond3_fu_587_p2, ap_CS_fsm_state12, exitcond2_fu_677_p2, ap_CS_fsm_state15, exitcond1_fu_795_p2, ap_CS_fsm_state16, exitcond_fu_819_p2, exitcond9_fu_319_p2, exitcond4_fu_575_p2, exitcond6_fu_531_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond10_fu_291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_319_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond8_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond7_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond6_fu_531_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond5_fu_547_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond4_fu_575_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond3_fu_587_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond2_fu_677_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond1_fu_795_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_819_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, exitcond6_fu_531_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond6_fu_531_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, exitcond6_fu_531_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond6_fu_531_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    binaryThreshold_address0 <= tmp_63_cast_fu_498_p1(18 - 1 downto 0);

    binaryThreshold_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            binaryThreshold_ce0 <= ap_const_logic_1;
        else 
            binaryThreshold_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, tmp_66_cast_reg_1028, ap_CS_fsm_state17, tmp_53_cast_fu_416_p1, tmp_77_cast_fu_754_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dst_address0 <= tmp_66_cast_reg_1028(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_address0 <= tmp_77_cast_fu_754_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address0 <= tmp_53_cast_fu_416_p1(18 - 1 downto 0);
        else 
            dst_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_state4, temp_q0, ap_CS_fsm_state17, tmp_40_fu_402_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dst_d0 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_d0 <= tmp_40_fu_402_p1;
        else 
            dst_d0 <= "XXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_state4, exitcond8_fu_331_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((exitcond8_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_291_p2 <= "1" when (i1_reg_116 = ap_const_lv10_200) else "0";
    exitcond1_fu_795_p2 <= "1" when (i9_reg_265 = ap_const_lv10_200) else "0";
    exitcond2_fu_677_p2 <= "1" when (l6_reg_254 = ap_const_lv2_3) else "0";
    exitcond3_fu_587_p2 <= "1" when (k5_reg_231 = ap_const_lv2_3) else "0";
    exitcond4_fu_575_p2 <= "1" when (j4_reg_207 = ap_const_lv10_200) else "0";
    exitcond5_fu_547_p2 <= "1" when (i3_reg_196 = ap_const_lv10_200) else "0";
    exitcond6_fu_531_p2 <= "1" when (iter_reg_185 = ap_const_lv2_2) else "0";
    exitcond7_fu_421_p2 <= "1" when (l_reg_162 = ap_const_lv2_3) else "0";
    exitcond8_fu_331_p2 <= "1" when (k_reg_139 = ap_const_lv2_3) else "0";
    exitcond9_fu_319_p2 <= "1" when (j2_reg_127 = ap_const_lv10_200) else "0";
    exitcond_fu_819_p2 <= "1" when (j9_reg_276 = ap_const_lv10_200) else "0";
    i1_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_116),11));
    i3_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_196),11));
    i_8_fu_553_p2 <= std_logic_vector(unsigned(i3_reg_196) + unsigned(ap_const_lv10_1));
    i_9_fu_801_p2 <= std_logic_vector(unsigned(i9_reg_265) + unsigned(ap_const_lv10_1));
    i_fu_297_p2 <= std_logic_vector(unsigned(i1_reg_116) + unsigned(ap_const_lv10_1));
    icmp2_fu_472_p2 <= "0" when (tmp_44_fu_462_p4 = ap_const_lv2_1) else "1";
    icmp3_fu_638_p2 <= "0" when (tmp_54_fu_628_p4 = ap_const_lv2_1) else "1";
    icmp4_fu_728_p2 <= "0" when (tmp_57_fu_718_p4 = ap_const_lv2_1) else "1";
    icmp_fu_382_p2 <= "0" when (tmp_42_fu_372_p4 = ap_const_lv2_1) else "1";
    iter_1_fu_537_p2 <= std_logic_vector(unsigned(iter_reg_185) + unsigned(ap_const_lv2_1));
    j2_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_127),11));
    j4_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_207),11));
    j_7_fu_825_p2 <= std_logic_vector(unsigned(j9_reg_276) + unsigned(ap_const_lv10_1));
    j_8_fu_581_p2 <= std_logic_vector(unsigned(j4_reg_207) + unsigned(ap_const_lv10_1));
    j_fu_325_p2 <= std_logic_vector(unsigned(j2_reg_127) + unsigned(ap_const_lv10_1));
    k_2_fu_337_p2 <= std_logic_vector(unsigned(k_reg_139) + unsigned(ap_const_lv2_1));
    k_3_fu_593_p2 <= std_logic_vector(unsigned(k5_reg_231) + unsigned(ap_const_lv2_1));
    l_1_fu_427_p2 <= std_logic_vector(unsigned(l_reg_162) + unsigned(ap_const_lv2_1));
    l_2_fu_683_p2 <= std_logic_vector(unsigned(l6_reg_254) + unsigned(ap_const_lv2_1));
    max_val_2_cast_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_q0),31));
    max_val_2_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_q0),32));
    max_val_2_max_val_1_fu_776_p3 <= 
        max_val_2_cast_fu_762_p1 when (tmp_59_fu_766_p2(0) = '1') else 
        tmp_60_fu_772_p1;
    max_val_2_max_val_1_s_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_2_max_val_1_fu_776_p3),32));
    max_val_3_fu_788_p3 <= 
        max_val_2_max_val_1_s_fu_784_p1 when (or_cond6_reg_987(0) = '1') else 
        max_val_1_reg_242;
    min_val_2_fu_502_p3 <= 
        ap_const_lv32_FF when (binaryThreshold_q0(0) = '1') else 
        ap_const_lv32_0;
    min_val_2_min_val_1_fu_516_p3 <= 
        min_val_2_fu_502_p3 when (tmp_50_fu_510_p2(0) = '1') else 
        min_val_1_reg_173;
    min_val_3_fu_524_p3 <= 
        min_val_2_min_val_1_fu_516_p3 when (or_cond3_reg_902(0) = '1') else 
        min_val_1_reg_173;
    or_cond3_fu_484_p2 <= (tmp5_fu_478_p2 and tmp4_reg_889);
    or_cond6_fu_740_p2 <= (tmp9_fu_734_p2 and tmp8_reg_974);
    rev1_fu_622_p2 <= (tmp_53_fu_614_p3 xor ap_const_lv1_1);
    rev2_fu_712_p2 <= (tmp_56_fu_704_p3 xor ap_const_lv1_1);
    rev7_fu_456_p2 <= (tmp_43_fu_448_p3 xor ap_const_lv1_1);
    rev_fu_366_p2 <= (tmp_41_fu_358_p3 xor ap_const_lv1_1);

    temp_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16, tmp_66_cast_fu_840_p1, tmp_69_cast_fu_672_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_address0 <= tmp_66_cast_fu_840_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_address0 <= tmp_69_cast_fu_672_p1(18 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= max_val_reg_219(8 - 1 downto 0);

    temp_we0_assign_proc : process(ap_CS_fsm_state11, exitcond3_fu_587_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond3_fu_587_p2 = ap_const_lv1_1))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp2_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_343_p2),11));

    tmp2_fu_343_p2 <= std_logic_vector(unsigned(k_reg_139) + unsigned(ap_const_lv2_3));
        tmp3_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_433_p2),11));

    tmp3_fu_433_p2 <= std_logic_vector(unsigned(l_reg_162) + unsigned(ap_const_lv2_3));
    tmp4_fu_396_p2 <= (rev_fu_366_p2 and icmp_fu_382_p2);
    tmp5_fu_478_p2 <= (rev7_fu_456_p2 and icmp2_fu_472_p2);
        tmp6_cast_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_599_p2),11));

    tmp6_fu_599_p2 <= std_logic_vector(unsigned(k5_reg_231) + unsigned(ap_const_lv2_3));
        tmp7_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_689_p2),11));

    tmp7_fu_689_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(l6_reg_254));
    tmp8_fu_652_p2 <= (rev1_fu_622_p2 and icmp3_fu_638_p2);
    tmp9_fu_734_p2 <= (rev2_fu_712_p2 and icmp4_fu_728_p2);
    tmp_40_fu_402_p1 <= min_val_reg_150(8 - 1 downto 0);
    tmp_41_fu_358_p3 <= x_fu_353_p2(10 downto 10);
    tmp_42_fu_372_p4 <= x_fu_353_p2(10 downto 9);
    tmp_43_fu_448_p3 <= y_fu_443_p2(10 downto 10);
    tmp_44_fu_462_p4 <= y_fu_443_p2(10 downto 9);
    tmp_46_fu_411_p2 <= std_logic_vector(unsigned(tmp_50_cast_reg_858) + unsigned(tmp_49_cast_fu_407_p1));
    tmp_47_fu_388_p3 <= (x_fu_353_p2 & ap_const_lv9_0);
    tmp_48_fu_807_p3 <= (i9_reg_265 & ap_const_lv9_0);
    tmp_49_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_127),20));
    tmp_49_fu_493_p2 <= std_logic_vector(signed(tmp_62_cast_fu_489_p1) + signed(tmp_47_reg_884));
    tmp_50_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_303_p3),20));
    tmp_50_fu_510_p2 <= "1" when (signed(min_val_2_fu_502_p3) < signed(min_val_1_reg_173)) else "0";
    tmp_51_fu_835_p2 <= std_logic_vector(unsigned(tmp_59_cast_reg_1015) + unsigned(tmp_65_cast_fu_831_p1));
    tmp_52_cast_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_559_p3),20));
    tmp_52_fu_667_p2 <= std_logic_vector(unsigned(tmp_52_cast_reg_943) + unsigned(tmp_68_cast_fu_663_p1));
    tmp_53_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_411_p2),64));
    tmp_53_fu_614_p3 <= x_1_fu_609_p2(10 downto 10);
    tmp_54_fu_628_p4 <= x_1_fu_609_p2(10 downto 9);
    tmp_55_fu_644_p3 <= (x_1_fu_609_p2 & ap_const_lv9_0);
    tmp_56_fu_704_p3 <= y_1_fu_699_p2(10 downto 10);
    tmp_57_fu_718_p4 <= y_1_fu_699_p2(10 downto 9);
    tmp_58_fu_749_p2 <= std_logic_vector(unsigned(tmp_55_reg_969) + unsigned(tmp_76_cast_fu_745_p1));
    tmp_59_cast_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_807_p3),20));
    tmp_59_fu_766_p2 <= "1" when (signed(max_val_2_fu_758_p1) > signed(max_val_1_reg_242)) else "0";
    tmp_60_fu_772_p1 <= max_val_1_reg_242(31 - 1 downto 0);
        tmp_62_cast_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_fu_443_p2),20));

        tmp_63_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_reg_907),64));

    tmp_65_cast_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j9_reg_276),20));
    tmp_66_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_835_p2),64));
    tmp_68_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_207),20));
    tmp_69_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_667_p2),64));
        tmp_76_cast_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_1_fu_699_p2),20));

        tmp_77_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_reg_992),64));

    tmp_fu_303_p3 <= (i1_reg_116 & ap_const_lv9_0);
    tmp_s_fu_559_p3 <= (i3_reg_196 & ap_const_lv9_0);
    x_1_fu_609_p2 <= std_logic_vector(signed(tmp6_cast_fu_605_p1) + signed(i3_cast_reg_930));
    x_fu_353_p2 <= std_logic_vector(signed(tmp2_cast_fu_349_p1) + signed(i1_cast_reg_845));
    y_1_fu_699_p2 <= std_logic_vector(unsigned(j4_cast_reg_948) + unsigned(tmp7_cast_fu_695_p1));
    y_fu_443_p2 <= std_logic_vector(signed(tmp3_cast_fu_439_p1) + signed(j2_cast_reg_863));
end behav;
